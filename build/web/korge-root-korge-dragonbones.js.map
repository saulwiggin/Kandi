{"version":3,"file":"korge-root-korge-dragonbones.js","sources":["collections/Collections.kt","kotlin/math.kt","util/Preconditions.kt","../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/TimeSpan.kt","kotlin/Comparator.kt","generated/_Arrays.kt","../../../../../kmem/src/jsMain/kotlin/com/soywiz/kmem/BufferJs.kt","generated/_Collections.kt","collections/Maps.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/animation/Animation.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/internal/_FastArrayIterators.kt","../../../../../kds/src/jsMain/kotlin/com/soywiz/kds/Js.kt","../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/FastMap.kt","text/Strings.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/animation/AnimationState.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/animation/BaseTimelineState.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/animation/TimelineState.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/animation/WorldClock.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/armature/Armature.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/armature/Bone.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/armature/Constraint.kt","arrayUtils.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/armature/Slot.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/armature/Surface.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/armature/TransformObject.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/core/BaseObject.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/core/BaseObjectPool.kt","util/Standard.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/core/DragonBones.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/event/EventObject.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/factory/BaseFactory.kt","util/Lazy.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/geom/ColorTransform.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/geom/Matrix.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/geom/Point.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/geom/Rectangle.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/geom/Transform.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/model/AnimationConfig.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/model/AnimationData.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/model/ArmatureData.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/model/BoundingBoxData.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/model/CanvasData.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/model/ConstraintData.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/model/DisplayData.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/model/DragonBonesData.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/model/SkinData.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/model/TextureAtlasData.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/model/UserData.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/parser/BinaryDataParser.kt","../../../../../kmem/src/commonMain/kotlin/com/soywiz/kmem/Buffer.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/parser/ObjectDataParser.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/parser/DataParser.kt","kotlin/text/string.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/util/ArrayListExt.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/util/BufferExt.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/dragonbones/util/console.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/soywiz/korge/dragonbones/KorgeDbArmatureDisplay.kt","collections/MutableCollections.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/soywiz/korge/dragonbones/KorgeDbFactory.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/soywiz/korge/dragonbones/KorgeDbSlot.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/soywiz/korge/dragonbones/KorgeDbTextureAtlasData.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/Rectangle.kt","../../../../../korge-dragonbones/src/commonMain/kotlin/com/soywiz/korge/dragonbones/KorgeDbUtils.kt","../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/dynamic/KDynamic.kt"],"sourcesContent":["/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n@file:UseExperimental(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean) : Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/**\n * Returns a new read-only list of given elements.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.readOnlyList\n */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/**\n * Returns an empty new [MutableList].\n * @sample samples.collections.Collections.Lists.emptyMutableList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/**\n * Returns an empty new [ArrayList].\n * @sample samples.collections.Collections.Lists.emptyArrayList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/**\n * Returns a new [MutableList] with the given elements.\n * @sample samples.collections.Collections.Lists.mutableList\n */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new [ArrayList] with the given elements.\n * @sample samples.collections.Collections.Lists.arrayList\n */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new read-only list either of single given element, if it is not null, or empty list if the element is null. The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/**\n * Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.readOnlyListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.mutableListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * @sample samples.collections.Builders.Lists.buildListSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(@BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return ArrayList<E>().apply(builderAction)\n}\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of elements added in the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Lists.buildListSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(capacity: Int, @BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    checkBuilderCapacity(capacity)\n    return ArrayList<E>(capacity).apply(builderAction)\n}\n\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n * @sample samples.collections.Collections.Collections.indicesOfCollection\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/**\n * Returns `true` if the collection is not empty.\n * @sample samples.collections.Collections.Collections.collectionIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable collection is either null or empty.\n * @sample samples.collections.Collections.Collections.collectionIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.isEmpty()\n}\n\n/**\n * Returns this Collection if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Collections.collectionOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/**\n * Returns this List if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Lists.listOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/**\n * Returns this collection if it's not empty\n * or the result of calling [defaultValue] function if the collection is empty.\n *\n * @sample samples.collections.Collections.Collections.collectionIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : Collection<*>, C : R =\n    if (isEmpty()) defaultValue() else this\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n * @sample samples.collections.Collections.Collections.collectionContainsAll\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchOnComparable\n * @sample samples.collections.Collections.Lists.binarySearchWithBoundaries\n */\npublic fun <T : Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n * @sample samples.collections.Collections.Lists.binarySearchWithComparator\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchByKey\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(\n    key: K?,\n    fromIndex: Int = 0,\n    toIndex: Int = size,\n    crossinline selector: (T) -> K?\n): Int =\n    binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which the given [comparison] function returns zero using the binary search algorithm.\n *\n * The list is expected to be sorted so that the signs of the [comparison] function's return values ascend on the list elements,\n * i.e. negative values come before zero and zeroes come before positive values.\n * Otherwise, the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that returns zero when called on the list element being searched.\n * On the elements coming before the target element, the function must return negative values;\n * on the elements coming after the target element, the function must return positive values.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchWithComparisonFunction\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkIndexOverflow(index: Int): Int\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkCountOverflow(count: Int): Int\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwIndexOverflow() { throw ArithmeticException(\"Index overflow has happened.\") }\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwCountOverflow() { throw ArithmeticException(\"Count overflow has happened.\") }\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:Suppress(\"DEPRECATION\", \"DEPRECATION_ERROR\")\npackage kotlin.math\n\n\nimport kotlin.internal.InlineOnly\nimport kotlin.js.Math as nativeMath\n\n\n// region ================ Double Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Double): Double = nativeMath.sin(x)\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Double): Double = nativeMath.cos(x)\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Double): Double = nativeMath.tan(x)\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Double): Double = nativeMath.asin(x)\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Double): Double = nativeMath.acos(x)\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Double): Double = nativeMath.atan(x)\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Double, x: Double): Double = nativeMath.atan2(y, x)\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Double): Double = nativeMath.sinh(x)\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Double): Double = nativeMath.cosh(x)\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Double): Double = nativeMath.tanh(x)\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Double): Double = nativeMath.asinh(x)\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Double): Double = nativeMath.acosh(x)\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Double): Double = nativeMath.atanh(x)\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Double, y: Double): Double = nativeMath.hypot(x, y)\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Double): Double = nativeMath.sqrt(x)\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Double): Double = nativeMath.exp(x)\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Double): Double = nativeMath.expm1(x)\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun log(x: Double, base: Double): Double {\n    if (base <= 0.0 || base == 1.0) return Double.NaN\n    return nativeMath.log(x) / nativeMath.log(base)\n}\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Double): Double = nativeMath.log(x)\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Double): Double = nativeMath.log10(x)\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Double): Double = nativeMath.log2(x)\n\n/**\n * Computes `ln(x + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Double): Double = nativeMath.log1p(x)\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest double value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Double): Double = nativeMath.ceil(x).unsafeCast<Double>() // TODO: Remove unsafe cast after removing public js.math\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest double value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Double): Double = nativeMath.floor(x).unsafeCast<Double>()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Double): Double = nativeMath.trunc(x)\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun round(x: Double): Double {\n    if (x % 0.5 != 0.0) {\n        return nativeMath.round(x).unsafeCast<Double>()\n    }\n    val floor = floor(x)\n    return if (floor % 2 == 0.0) floor else ceil(x)\n}\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Double]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Double): Double = nativeMath.abs(x)\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Double): Double = nativeMath.sign(x)\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Double, b: Double): Double = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Double, b: Double): Double = nativeMath.max(a, b)\n\n// extensions\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(x: Double): Double = nativeMath.pow(this, x)\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(n: Int): Double = nativeMath.pow(this, n.toDouble())\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.absoluteValue: Double get() = nativeMath.abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.sign: Double get() = nativeMath.sign(this)\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.withSign(sign: Int): Double = this.withSign(sign.toDouble())\n\n/**\n * Returns the ulp (unit in the last place) of this value.\n *\n * An ulp is a positive distance between this value and the next nearest [Double] value larger in magnitude.\n *\n * Special Cases:\n *   - `NaN.ulp` is `NaN`\n *   - `x.ulp` is `+Inf` when `x` is `+Inf` or `-Inf`\n *   - `0.0.ulp` is `Double.MIN_VALUE`\n */\n@SinceKotlin(\"1.2\")\npublic actual val Double.ulp: Double get() = when {\n    this < 0 -> (-this).ulp\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == Double.MAX_VALUE -> this - this.nextDown()\n    else -> this.nextUp() - this\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of positive infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextUp(): Double = when {\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == 0.0 -> Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) 1 else -1)\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of negative infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextDown(): Double = when {\n    this.isNaN() || this == Double.NEGATIVE_INFINITY -> this\n    this == 0.0 -> -Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) -1 else 1)\n}\n\n\n/**\n * Returns the [Double] value nearest to this value in direction from this value towards the value [to].\n *\n * Special cases:\n *   - `x.nextTowards(y)` is `NaN` if either `x` or `y` are `NaN`\n *   - `x.nextTowards(x) == x`\n *\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextTowards(to: Double): Double = when {\n    this.isNaN() || to.isNaN() -> Double.NaN\n    to == this -> to\n    to > this -> this.nextUp()\n    else /* to < this */ -> this.nextDown()\n}\n\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToInt(): Int = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Int.MAX_VALUE -> Int.MAX_VALUE\n    this < Int.MIN_VALUE -> Int.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toInt()\n}\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToLong(): Long = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Long.MAX_VALUE -> Long.MAX_VALUE\n    this < Long.MIN_VALUE -> Long.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toLong()\n}\n\n// endregion\n\n\n\n// region ================ Float Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Float): Float = nativeMath.sin(x.toDouble()).toFloat()\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Float): Float = nativeMath.cos(x.toDouble()).toFloat()\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Float): Float = nativeMath.tan(x.toDouble()).toFloat()\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Float): Float = nativeMath.asin(x.toDouble()).toFloat()\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Float): Float = nativeMath.acos(x.toDouble()).toFloat()\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Float): Float = nativeMath.atan(x.toDouble()).toFloat()\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Float, x: Float): Float = nativeMath.atan2(y.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Float): Float = nativeMath.sinh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Float): Float = nativeMath.cosh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Float): Float = nativeMath.tanh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Float): Float = nativeMath.asinh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Float): Float = nativeMath.acosh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Float): Float = nativeMath.atanh(x.toDouble()).toFloat()\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Float, y: Float): Float = nativeMath.hypot(x.toDouble(), y.toDouble()).toFloat()\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Float): Float = nativeMath.sqrt(x.toDouble()).toFloat()\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Float): Float = nativeMath.exp(x.toDouble()).toFloat()\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Float): Float = nativeMath.expm1(x.toDouble()).toFloat()\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log(x: Float, base: Float): Float = log(x.toDouble(), base.toDouble()).toFloat()\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Float): Float = nativeMath.log(x.toDouble()).toFloat()\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Float): Float = nativeMath.log10(x.toDouble()).toFloat()\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Float): Float = nativeMath.log2(x.toDouble()).toFloat()\n\n/**\n * Computes `ln(a + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Float): Float = nativeMath.log1p(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest Float value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Float): Float = nativeMath.ceil(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest Float value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Float): Float = nativeMath.floor(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Float): Float = truncate(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun round(x: Float): Float = round(x.toDouble()).toFloat()\n\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Float]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Float): Float = nativeMath.abs(x.toDouble()).toFloat()\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Float): Float = nativeMath.sign(x.toDouble()).toFloat()\n\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Float, b: Float): Float = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Float, b: Float): Float = nativeMath.max(a, b)\n\n// extensions\n\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(x: Float): Float = nativeMath.pow(this.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(n: Int): Float = nativeMath.pow(this.toDouble(), n.toDouble()).toFloat()\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.absoluteValue: Float get() = nativeMath.abs(this.toDouble()).toFloat()\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.sign: Float get() = nativeMath.sign(this.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Float): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Int): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToInt(): Int = toDouble().roundToInt()\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToLong(): Long = toDouble().roundToLong()\n\n\n// endregion\n\n// region ================ Integer Math ========================================\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Int.MIN_VALUE)` is `Int.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Int]\n */\n// TODO: remove manual 'or' when KT-19290 is fixed\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Int): Int = if (n < 0) (-n or 0) else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Int, b: Int): Int = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Int, b: Int): Int = nativeMath.max(a, b)\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Int.MIN_VALUE.absoluteValue` is `Int.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Int.absoluteValue: Int get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Int.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Long.MIN_VALUE)` is `Long.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Long]\n */\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Long): Long = if (n < 0) -n else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun min(a: Long, b: Long): Long = if (a <= b) a else b\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun max(a: Long, b: Long): Long = if (a >= b) a else b\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Long.MIN_VALUE.absoluteValue` is `Long.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Long.absoluteValue: Long get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Long.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n// endregion\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"PreconditionsKt\")\n\npackage kotlin\n\nimport kotlin.contracts.contract\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    require(value) { \"Failed requirement.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is null. Otherwise returns the not null value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return requireNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    } else {\n        return value\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    check(value) { \"Check failed.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return checkNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage]  if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    } else {\n        return value\n    }\n}\n\n\n/**\n * Throws an [IllegalStateException] with the given [message].\n *\n * @sample samples.misc.Preconditions.failWithError\n */\n@kotlin.internal.InlineOnly\npublic inline fun error(message: Any): Nothing = throw IllegalStateException(message.toString())\n",null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n\npublic actual interface Comparator<T> {\n    @JsName(\"compare\")\n    actual fun compare(a: T, b: T): Int\n}\n\npublic actual inline fun <T> Comparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T> = object : Comparator<T> {\n    override fun compare(a: T, b: T): Int = comparison(a, b)\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ArraysKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component1(): Byte {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component1(): Short {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component1(): Int {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component1(): Long {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component1(): Float {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component1(): Double {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component1(): Boolean {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component1(): Char {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component2(): Byte {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component2(): Short {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component2(): Int {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component2(): Long {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component2(): Float {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component2(): Double {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component2(): Boolean {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component2(): Char {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component3(): Byte {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component3(): Short {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component3(): Int {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component3(): Long {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component3(): Float {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component3(): Double {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component3(): Boolean {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component3(): Char {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component4(): Byte {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component4(): Short {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component4(): Int {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component4(): Long {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component4(): Float {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component4(): Double {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component4(): Boolean {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component4(): Char {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component5(): Byte {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component5(): Short {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component5(): Int {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component5(): Long {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component5(): Float {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component5(): Double {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component5(): Boolean {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component5(): Char {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ByteArray.contains(element: Byte): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ShortArray.contains(element: Short): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun IntArray.contains(element: Int): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun LongArray.contains(element: Long): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun FloatArray.contains(element: Float): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun DoubleArray.contains(element: Double): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun BooleanArray.contains(element: Boolean): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun CharArray.contains(element: Char): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun <T> Array<out T>.elementAt(index: Int): T\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ByteArray.elementAt(index: Int): Byte\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ShortArray.elementAt(index: Int): Short\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun IntArray.elementAt(index: Int): Int\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun LongArray.elementAt(index: Int): Long\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun FloatArray.elementAt(index: Int): Float\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun DoubleArray.elementAt(index: Int): Double\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun BooleanArray.elementAt(index: Int): Boolean\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun CharArray.elementAt(index: Int): Char\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrNull(index: Int): Byte? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrNull(index: Int): Short? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrNull(index: Int): Int? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrNull(index: Int): Long? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrNull(index: Int): Float? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrNull(index: Int): Double? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrNull(index: Int): Boolean? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.find(predicate: (Byte) -> Boolean): Byte? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.find(predicate: (Short) -> Boolean): Short? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.find(predicate: (Int) -> Boolean): Int? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.find(predicate: (Long) -> Boolean): Long? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.find(predicate: (Float) -> Boolean): Float? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.find(predicate: (Double) -> Boolean): Double? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.find(predicate: (Boolean) -> Boolean): Boolean? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.findLast(predicate: (Byte) -> Boolean): Byte? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.findLast(predicate: (Short) -> Boolean): Short? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.findLast(predicate: (Int) -> Boolean): Int? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.findLast(predicate: (Long) -> Boolean): Long? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.findLast(predicate: (Float) -> Boolean): Float? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.findLast(predicate: (Double) -> Boolean): Double? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.findLast(predicate: (Boolean) -> Boolean): Boolean? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.first(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.first(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.first(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.first(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.first(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.first(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.first(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.first(predicate: (Byte) -> Boolean): Byte {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.first(predicate: (Short) -> Boolean): Short {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.first(predicate: (Int) -> Boolean): Int {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.first(predicate: (Long) -> Boolean): Long {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.first(predicate: (Float) -> Boolean): Float {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.first(predicate: (Double) -> Boolean): Double {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.first(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ByteArray.firstOrNull(): Byte? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ShortArray.firstOrNull(): Short? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun IntArray.firstOrNull(): Int? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun LongArray.firstOrNull(): Long? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun FloatArray.firstOrNull(): Float? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun DoubleArray.firstOrNull(): Double? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun BooleanArray.firstOrNull(): Boolean? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun CharArray.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Array<out T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ByteArray.firstOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ShortArray.firstOrNull(predicate: (Short) -> Boolean): Short? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun IntArray.firstOrNull(predicate: (Int) -> Boolean): Int? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun LongArray.firstOrNull(predicate: (Long) -> Boolean): Long? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun FloatArray.firstOrNull(predicate: (Float) -> Boolean): Float? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun DoubleArray.firstOrNull(predicate: (Double) -> Boolean): Double? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun BooleanArray.firstOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun CharArray.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.getOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.getOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.getOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.getOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.getOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.getOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.getOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun <T> Array<out T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ByteArray.getOrNull(index: Int): Byte? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ShortArray.getOrNull(index: Int): Short? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun IntArray.getOrNull(index: Int): Int? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun LongArray.getOrNull(index: Int): Long? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun FloatArray.getOrNull(index: Int): Float? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun DoubleArray.getOrNull(index: Int): Double? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun BooleanArray.getOrNull(index: Int): Boolean? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun CharArray.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.indexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.indexOf(element: Byte): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.indexOf(element: Short): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.indexOf(element: Int): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.indexOf(element: Long): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.indexOf(element: Float): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.indexOf(element: Double): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.indexOf(element: Boolean): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.indexOf(element: Char): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfFirst(predicate: (Byte) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfFirst(predicate: (Short) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfFirst(predicate: (Int) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfFirst(predicate: (Long) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfFirst(predicate: (Float) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfFirst(predicate: (Double) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfFirst(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfLast(predicate: (Byte) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfLast(predicate: (Short) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfLast(predicate: (Int) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfLast(predicate: (Long) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfLast(predicate: (Float) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfLast(predicate: (Double) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfLast(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.last(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.last(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.last(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.last(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.last(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.last(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.last(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.last(predicate: (T) -> Boolean): T {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.last(predicate: (Byte) -> Boolean): Byte {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.last(predicate: (Short) -> Boolean): Short {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.last(predicate: (Int) -> Boolean): Int {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.last(predicate: (Long) -> Boolean): Long {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.last(predicate: (Float) -> Boolean): Float {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.last(predicate: (Double) -> Boolean): Double {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.last(predicate: (Boolean) -> Boolean): Boolean {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.lastIndexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices.reversed()) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices.reversed()) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.lastIndexOf(element: Byte): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.lastIndexOf(element: Short): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.lastIndexOf(element: Int): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.lastIndexOf(element: Long): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.lastIndexOf(element: Float): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.lastIndexOf(element: Double): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.lastIndexOf(element: Boolean): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.lastIndexOf(element: Char): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ByteArray.lastOrNull(): Byte? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ShortArray.lastOrNull(): Short? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun IntArray.lastOrNull(): Int? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun LongArray.lastOrNull(): Long? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun FloatArray.lastOrNull(): Float? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun DoubleArray.lastOrNull(): Double? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun BooleanArray.lastOrNull(): Boolean? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun CharArray.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Array<out T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ByteArray.lastOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ShortArray.lastOrNull(predicate: (Short) -> Boolean): Short? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun IntArray.lastOrNull(predicate: (Int) -> Boolean): Int? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun LongArray.lastOrNull(predicate: (Long) -> Boolean): Long? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun FloatArray.lastOrNull(predicate: (Float) -> Boolean): Float? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun DoubleArray.lastOrNull(predicate: (Double) -> Boolean): Double? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun BooleanArray.lastOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun CharArray.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.random(): Byte {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.random(): Short {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.random(): Int {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.random(): Long {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.random(): Float {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.random(): Double {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.random(): Boolean {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Array<out T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ByteArray.random(random: Random): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ShortArray.random(random: Random): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun IntArray.random(random: Random): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun LongArray.random(random: Random): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun FloatArray.random(random: Random): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun DoubleArray.random(random: Random): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun BooleanArray.random(random: Random): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharArray.random(random: Random): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.randomOrNull(): Byte? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.randomOrNull(): Short? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.randomOrNull(): Int? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.randomOrNull(): Long? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.randomOrNull(): Float? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.randomOrNull(): Double? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.randomOrNull(): Boolean? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.randomOrNull(): Char? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> Array<out T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun ByteArray.randomOrNull(random: Random): Byte? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun ShortArray.randomOrNull(random: Random): Short? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun IntArray.randomOrNull(random: Random): Int? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun LongArray.randomOrNull(random: Random): Long? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun FloatArray.randomOrNull(random: Random): Float? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun DoubleArray.randomOrNull(random: Random): Double? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun BooleanArray.randomOrNull(random: Random): Boolean? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun CharArray.randomOrNull(random: Random): Char? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ByteArray.single(): Byte {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ShortArray.single(): Short {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun IntArray.single(): Int {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun LongArray.single(): Long {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun FloatArray.single(): Float {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun DoubleArray.single(): Double {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun BooleanArray.single(): Boolean {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun CharArray.single(): Char {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Array<out T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ByteArray.single(predicate: (Byte) -> Boolean): Byte {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Byte\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ShortArray.single(predicate: (Short) -> Boolean): Short {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Short\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun IntArray.single(predicate: (Int) -> Boolean): Int {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Int\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun LongArray.single(predicate: (Long) -> Boolean): Long {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Long\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun FloatArray.single(predicate: (Float) -> Boolean): Float {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Float\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun DoubleArray.single(predicate: (Double) -> Boolean): Double {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Double\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun BooleanArray.single(predicate: (Boolean) -> Boolean): Boolean {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Boolean\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun CharArray.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ByteArray.singleOrNull(): Byte? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ShortArray.singleOrNull(): Short? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun IntArray.singleOrNull(): Int? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun LongArray.singleOrNull(): Long? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun FloatArray.singleOrNull(): Float? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun DoubleArray.singleOrNull(): Double? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun BooleanArray.singleOrNull(): Boolean? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun CharArray.singleOrNull(): Char? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Array<out T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ByteArray.singleOrNull(predicate: (Byte) -> Boolean): Byte? {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ShortArray.singleOrNull(predicate: (Short) -> Boolean): Short? {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun IntArray.singleOrNull(predicate: (Int) -> Boolean): Int? {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun LongArray.singleOrNull(predicate: (Long) -> Boolean): Long? {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun FloatArray.singleOrNull(predicate: (Float) -> Boolean): Float? {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun DoubleArray.singleOrNull(predicate: (Double) -> Boolean): Double? {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun BooleanArray.singleOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun CharArray.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.drop(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.drop(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.drop(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.drop(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.drop(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.drop(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.drop(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.drop(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.dropLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.dropLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.dropLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.dropLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.dropLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.dropLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.dropLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.dropLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    var yielding = false\n    val list = ArrayList<Byte>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropWhile(predicate: (Short) -> Boolean): List<Short> {\n    var yielding = false\n    val list = ArrayList<Short>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropWhile(predicate: (Int) -> Boolean): List<Int> {\n    var yielding = false\n    val list = ArrayList<Int>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropWhile(predicate: (Long) -> Boolean): List<Long> {\n    var yielding = false\n    val list = ArrayList<Long>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropWhile(predicate: (Float) -> Boolean): List<Float> {\n    var yielding = false\n    val list = ArrayList<Float>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropWhile(predicate: (Double) -> Boolean): List<Double> {\n    var yielding = false\n    val list = ArrayList<Double>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    var yielding = false\n    val list = ArrayList<Boolean>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropWhile(predicate: (Char) -> Boolean): List<Char> {\n    var yielding = false\n    val list = ArrayList<Char>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Array<out T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ByteArray.filter(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ShortArray.filter(predicate: (Short) -> Boolean): List<Short> {\n    return filterTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun IntArray.filter(predicate: (Int) -> Boolean): List<Int> {\n    return filterTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun LongArray.filter(predicate: (Long) -> Boolean): List<Long> {\n    return filterTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun FloatArray.filter(predicate: (Float) -> Boolean): List<Float> {\n    return filterTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun DoubleArray.filter(predicate: (Double) -> Boolean): List<Double> {\n    return filterTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun BooleanArray.filter(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun CharArray.filter(predicate: (Char) -> Boolean): List<Char> {\n    return filterTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Array<out T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ByteArray.filterIndexed(predicate: (index: Int, Byte) -> Boolean): List<Byte> {\n    return filterIndexedTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ShortArray.filterIndexed(predicate: (index: Int, Short) -> Boolean): List<Short> {\n    return filterIndexedTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun IntArray.filterIndexed(predicate: (index: Int, Int) -> Boolean): List<Int> {\n    return filterIndexedTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun LongArray.filterIndexed(predicate: (index: Int, Long) -> Boolean): List<Long> {\n    return filterIndexedTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun FloatArray.filterIndexed(predicate: (index: Int, Float) -> Boolean): List<Float> {\n    return filterIndexedTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun DoubleArray.filterIndexed(predicate: (index: Int, Double) -> Boolean): List<Double> {\n    return filterIndexedTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun BooleanArray.filterIndexed(predicate: (index: Int, Boolean) -> Boolean): List<Boolean> {\n    return filterIndexedTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun CharArray.filterIndexed(predicate: (index: Int, Char) -> Boolean): List<Char> {\n    return filterIndexedTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterIndexedTo(destination: C, predicate: (index: Int, Byte) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterIndexedTo(destination: C, predicate: (index: Int, Short) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterIndexedTo(destination: C, predicate: (index: Int, Int) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterIndexedTo(destination: C, predicate: (index: Int, Long) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterIndexedTo(destination: C, predicate: (index: Int, Float) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterIndexedTo(destination: C, predicate: (index: Int, Double) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterIndexedTo(destination: C, predicate: (index: Int, Boolean) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Array<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Array<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Array<out T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ByteArray.filterNot(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterNotTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ShortArray.filterNot(predicate: (Short) -> Boolean): List<Short> {\n    return filterNotTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun IntArray.filterNot(predicate: (Int) -> Boolean): List<Int> {\n    return filterNotTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun LongArray.filterNot(predicate: (Long) -> Boolean): List<Long> {\n    return filterNotTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun FloatArray.filterNot(predicate: (Float) -> Boolean): List<Float> {\n    return filterNotTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun DoubleArray.filterNot(predicate: (Double) -> Boolean): List<Double> {\n    return filterNotTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun BooleanArray.filterNot(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterNotTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun CharArray.filterNot(predicate: (Char) -> Boolean): List<Char> {\n    return filterNotTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Array<out T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Array<out T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterNotTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterNotTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterNotTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterNotTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterNotTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterNotTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterNotTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<out T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.slice(indices: IntRange): List<Byte> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.slice(indices: IntRange): List<Short> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.slice(indices: IntRange): List<Int> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.slice(indices: IntRange): List<Long> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.slice(indices: IntRange): List<Float> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.slice(indices: IntRange): List<Double> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.slice(indices: IntRange): List<Boolean> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.slice(indices: IntRange): List<Char> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> Array<out T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ByteArray.slice(indices: Iterable<Int>): List<Byte> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Byte>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ShortArray.slice(indices: Iterable<Int>): List<Short> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Short>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun IntArray.slice(indices: Iterable<Int>): List<Int> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Int>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun LongArray.slice(indices: Iterable<Int>): List<Long> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Long>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun FloatArray.slice(indices: Iterable<Int>): List<Float> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Float>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun DoubleArray.slice(indices: Iterable<Int>): List<Double> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Double>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun BooleanArray.slice(indices: Iterable<Int>): List<Boolean> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Boolean>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun CharArray.slice(indices: Iterable<Int>): List<Char> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Char>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun <T> Array<T>.sliceArray(indices: Collection<Int>): Array<T> {\n    val result = arrayOfNulls(this, indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ByteArray.sliceArray(indices: Collection<Int>): ByteArray {\n    val result = ByteArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ShortArray.sliceArray(indices: Collection<Int>): ShortArray {\n    val result = ShortArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun IntArray.sliceArray(indices: Collection<Int>): IntArray {\n    val result = IntArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun LongArray.sliceArray(indices: Collection<Int>): LongArray {\n    val result = LongArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun FloatArray.sliceArray(indices: Collection<Int>): FloatArray {\n    val result = FloatArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun DoubleArray.sliceArray(indices: Collection<Int>): DoubleArray {\n    val result = DoubleArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun BooleanArray.sliceArray(indices: Collection<Int>): BooleanArray {\n    val result = BooleanArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun CharArray.sliceArray(indices: Collection<Int>): CharArray {\n    val result = CharArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<T>.sliceArray(indices: IntRange): Array<T> {\n    if (indices.isEmpty()) return copyOfRange(0, 0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.sliceArray(indices: IntRange): ByteArray {\n    if (indices.isEmpty()) return ByteArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.sliceArray(indices: IntRange): ShortArray {\n    if (indices.isEmpty()) return ShortArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.sliceArray(indices: IntRange): IntArray {\n    if (indices.isEmpty()) return IntArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.sliceArray(indices: IntRange): LongArray {\n    if (indices.isEmpty()) return LongArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.sliceArray(indices: IntRange): FloatArray {\n    if (indices.isEmpty()) return FloatArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.sliceArray(indices: IntRange): DoubleArray {\n    if (indices.isEmpty()) return DoubleArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.sliceArray(indices: IntRange): BooleanArray {\n    if (indices.isEmpty()) return BooleanArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.sliceArray(indices: IntRange): CharArray {\n    if (indices.isEmpty()) return CharArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.take(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Byte>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.take(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Short>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.take(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Int>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.take(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Long>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.take(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Float>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.take(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Double>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.take(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Boolean>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.take(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Char>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<T>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.takeLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Byte>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.takeLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Short>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.takeLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Int>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.takeLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Long>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.takeLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Float>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.takeLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Double>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.takeLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Boolean>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.takeLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Char>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    val list = ArrayList<Byte>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeWhile(predicate: (Short) -> Boolean): List<Short> {\n    val list = ArrayList<Short>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeWhile(predicate: (Int) -> Boolean): List<Int> {\n    val list = ArrayList<Int>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeWhile(predicate: (Long) -> Boolean): List<Long> {\n    val list = ArrayList<Long>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeWhile(predicate: (Float) -> Boolean): List<Float> {\n    val list = ArrayList<Float>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeWhile(predicate: (Double) -> Boolean): List<Double> {\n    val list = ArrayList<Double>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    val list = ArrayList<Boolean>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeWhile(predicate: (Char) -> Boolean): List<Char> {\n    val list = ArrayList<Char>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun <T> Array<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ByteArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ShortArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun IntArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun LongArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun FloatArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun DoubleArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun BooleanArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun CharArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Array<out T>.reversed(): List<T> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ByteArray.reversed(): List<Byte> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ShortArray.reversed(): List<Short> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun IntArray.reversed(): List<Int> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun LongArray.reversed(): List<Long> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun FloatArray.reversed(): List<Float> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun DoubleArray.reversed(): List<Double> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun BooleanArray.reversed(): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun CharArray.reversed(): List<Char> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun <T> Array<T>.reversedArray(): Array<T> {\n    if (isEmpty()) return this\n    val result = arrayOfNulls(this, size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ByteArray.reversedArray(): ByteArray {\n    if (isEmpty()) return this\n    val result = ByteArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ShortArray.reversedArray(): ShortArray {\n    if (isEmpty()) return this\n    val result = ShortArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun IntArray.reversedArray(): IntArray {\n    if (isEmpty()) return this\n    val result = IntArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun LongArray.reversedArray(): LongArray {\n    if (isEmpty()) return this\n    val result = LongArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun FloatArray.reversedArray(): FloatArray {\n    if (isEmpty()) return this\n    val result = FloatArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun DoubleArray.reversedArray(): DoubleArray {\n    if (isEmpty()) return this\n    val result = DoubleArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun BooleanArray.reversedArray(): BooleanArray {\n    if (isEmpty()) return this\n    val result = BooleanArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun CharArray.reversedArray(): CharArray {\n    if (isEmpty()) return this\n    val result = CharArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Sorts elements in the array in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ByteArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ShortArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun IntArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun LongArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun FloatArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun DoubleArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun CharArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sorted(): List<T> {\n    return sortedArray().asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ByteArray.sorted(): List<Byte> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ShortArray.sorted(): List<Short> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun IntArray.sorted(): List<Int> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun LongArray.sorted(): List<Long> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun FloatArray.sorted(): List<Float> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun DoubleArray.sorted(): List<Double> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun CharArray.sorted(): List<Char> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArray(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ByteArray.sortedArray(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ShortArray.sortedArray(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun IntArray.sortedArray(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun LongArray.sortedArray(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun FloatArray.sortedArray(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun DoubleArray.sortedArray(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun CharArray.sortedArray(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArrayDescending(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(reverseOrder()) }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedArrayDescending(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedArrayDescending(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedArrayDescending(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedArrayDescending(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedArrayDescending(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedArrayDescending(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedArrayDescending(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedArrayWith(comparator: Comparator<in T>): Array<out T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(comparator) }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedBy(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedBy(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedBy(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedBy(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedBy(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedBy(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedBy(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedBy(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedByDescending(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedByDescending(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedByDescending(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedByDescending(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedByDescending(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedByDescending(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedByDescending(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedByDescending(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedDescending(): List<Byte> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedDescending(): List<Short> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedDescending(): List<Int> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedDescending(): List<Long> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedDescending(): List<Float> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedDescending(): List<Double> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedDescending(): List<Char> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    return sortedArrayWith(comparator).asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ByteArray.sortedWith(comparator: Comparator<in Byte>): List<Byte> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ShortArray.sortedWith(comparator: Comparator<in Short>): List<Short> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun IntArray.sortedWith(comparator: Comparator<in Int>): List<Int> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun LongArray.sortedWith(comparator: Comparator<in Long>): List<Long> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun FloatArray.sortedWith(comparator: Comparator<in Float>): List<Float> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun DoubleArray.sortedWith(comparator: Comparator<in Double>): List<Double> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun BooleanArray.sortedWith(comparator: Comparator<in Boolean>): List<Boolean> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun CharArray.sortedWith(comparator: Comparator<in Char>): List<Char> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun <T> Array<out T>.asList(): List<T>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ByteArray.asList(): List<Byte>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ShortArray.asList(): List<Short>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun IntArray.asList(): List<Int>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun LongArray.asList(): List<Long>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun FloatArray.asList(): List<Float>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun DoubleArray.asList(): List<Double>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun BooleanArray.asList(): List<Boolean>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun CharArray.asList(): List<Char>\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentDeepHashCode(): Int\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentDeepToString(): String\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun ByteArray.contentEquals(other: ByteArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun ShortArray.contentEquals(other: ShortArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun IntArray.contentEquals(other: IntArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun LongArray.contentEquals(other: LongArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun FloatArray.contentEquals(other: FloatArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun CharArray.contentEquals(other: CharArray): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ByteArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ShortArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun IntArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun LongArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun FloatArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun DoubleArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun BooleanArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun CharArray.contentHashCode(): Int\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ByteArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ShortArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun IntArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun LongArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun FloatArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun DoubleArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun BooleanArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun CharArray.contentToString(): String\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T>\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(): Array<T>\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ByteArray.copyOf(): ByteArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ShortArray.copyOf(): ShortArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun IntArray.copyOf(): IntArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun LongArray.copyOf(): LongArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun FloatArray.copyOf(): FloatArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun DoubleArray.copyOf(): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun BooleanArray.copyOf(): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun CharArray.copyOf(): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ByteArray.copyOf(newSize: Int): ByteArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ShortArray.copyOf(newSize: Int): ShortArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun IntArray.copyOf(newSize: Int): IntArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun LongArray.copyOf(newSize: Int): LongArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun FloatArray.copyOf(newSize: Int): FloatArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun DoubleArray.copyOf(newSize: Int): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun BooleanArray.copyOf(newSize: Int): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun CharArray.copyOf(newSize: Int): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(newSize: Int): Array<T?>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val <T> Array<out T>.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ByteArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ShortArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val IntArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val LongArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val FloatArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val DoubleArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val BooleanArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val CharArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns the last valid index for the array.\n */\npublic val <T> Array<out T>.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ByteArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ShortArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val IntArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val LongArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val FloatArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val DoubleArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val BooleanArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val CharArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(element: T): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ByteArray.plus(element: Byte): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ShortArray.plus(element: Short): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun IntArray.plus(element: Int): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun LongArray.plus(element: Long): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun FloatArray.plus(element: Float): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun DoubleArray.plus(element: Double): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun BooleanArray.plus(element: Boolean): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun CharArray.plus(element: Char): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Collection<T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ShortArray.plus(elements: Collection<Short>): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun IntArray.plus(elements: Collection<Int>): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun LongArray.plus(elements: Collection<Long>): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun FloatArray.plus(elements: Collection<Float>): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun CharArray.plus(elements: Collection<Char>): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Array<out T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ByteArray.plus(elements: ByteArray): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ShortArray.plus(elements: ShortArray): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun IntArray.plus(elements: IntArray): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun LongArray.plus(elements: LongArray): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun FloatArray.plus(elements: FloatArray): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun CharArray.plus(elements: CharArray): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.plusElement(element: T): Array<T>\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun IntArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun LongArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ByteArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ShortArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun DoubleArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun FloatArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun CharArray.sort(): Unit\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable\n */\npublic expect fun <T : Comparable<T>> Array<out T>.sort(): Unit\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic expect fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit\n\n/**\n * Returns an array of Boolean containing all of the elements of this generic array.\n */\npublic fun Array<out Boolean>.toBooleanArray(): BooleanArray {\n    return BooleanArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this generic array.\n */\npublic fun Array<out Byte>.toByteArray(): ByteArray {\n    return ByteArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Char containing all of the elements of this generic array.\n */\npublic fun Array<out Char>.toCharArray(): CharArray {\n    return CharArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Double containing all of the elements of this generic array.\n */\npublic fun Array<out Double>.toDoubleArray(): DoubleArray {\n    return DoubleArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Float containing all of the elements of this generic array.\n */\npublic fun Array<out Float>.toFloatArray(): FloatArray {\n    return FloatArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Int containing all of the elements of this generic array.\n */\npublic fun Array<out Int>.toIntArray(): IntArray {\n    return IntArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Long containing all of the elements of this generic array.\n */\npublic fun Array<out Long>.toLongArray(): LongArray {\n    return LongArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Short containing all of the elements of this generic array.\n */\npublic fun Array<out Short>.toShortArray(): ShortArray {\n    return ShortArray(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ByteArray.toTypedArray(): Array<Byte>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ShortArray.toTypedArray(): Array<Short>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun IntArray.toTypedArray(): Array<Int>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun LongArray.toTypedArray(): Array<Long>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun FloatArray.toTypedArray(): Array<Float>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun DoubleArray.toTypedArray(): Array<Double>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun BooleanArray.toTypedArray(): Array<Boolean>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun CharArray.toTypedArray(): Array<Char>\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <T, K, V> Array<out T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> ByteArray.associate(transform: (Byte) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> ShortArray.associate(transform: (Short) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> IntArray.associate(transform: (Int) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> LongArray.associate(transform: (Long) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> FloatArray.associate(transform: (Float) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> DoubleArray.associate(transform: (Double) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> BooleanArray.associate(transform: (Boolean) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> CharArray.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <T, K> Array<out T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> ByteArray.associateBy(keySelector: (Byte) -> K): Map<K, Byte> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Byte>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> ShortArray.associateBy(keySelector: (Short) -> K): Map<K, Short> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Short>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> IntArray.associateBy(keySelector: (Int) -> K): Map<K, Int> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Int>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> LongArray.associateBy(keySelector: (Long) -> K): Map<K, Long> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Long>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> FloatArray.associateBy(keySelector: (Float) -> K): Map<K, Float> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Float>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> DoubleArray.associateBy(keySelector: (Double) -> K): Map<K, Double> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Double>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> BooleanArray.associateBy(keySelector: (Boolean) -> K): Map<K, Boolean> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Boolean>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> CharArray.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <T, K, V> Array<out T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> ByteArray.associateBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> ShortArray.associateBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> IntArray.associateBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> LongArray.associateBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> FloatArray.associateBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> DoubleArray.associateBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> BooleanArray.associateBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> CharArray.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Byte>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Short>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Int>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Long>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Float>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Double>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Boolean>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateTo(destination: M, transform: (Byte) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateTo(destination: M, transform: (Short) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateTo(destination: M, transform: (Int) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateTo(destination: M, transform: (Long) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateTo(destination: M, transform: (Float) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateTo(destination: M, transform: (Double) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateTo(destination: M, transform: (Boolean) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Array<out T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Byte>> ByteArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Short>> ShortArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Int>> IntArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Long>> LongArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Float>> FloatArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Double>> DoubleArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Boolean>> BooleanArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Array<out T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ByteArray.toHashSet(): HashSet<Byte> {\n    return toCollection(HashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ShortArray.toHashSet(): HashSet<Short> {\n    return toCollection(HashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun IntArray.toHashSet(): HashSet<Int> {\n    return toCollection(HashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun LongArray.toHashSet(): HashSet<Long> {\n    return toCollection(HashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun FloatArray.toHashSet(): HashSet<Float> {\n    return toCollection(HashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun DoubleArray.toHashSet(): HashSet<Double> {\n    return toCollection(HashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun BooleanArray.toHashSet(): HashSet<Boolean> {\n    return toCollection(HashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun CharArray.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(size)))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Array<out T>.toList(): List<T> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ByteArray.toList(): List<Byte> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ShortArray.toList(): List<Short> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun IntArray.toList(): List<Int> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun LongArray.toList(): List<Long> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun FloatArray.toList(): List<Float> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun DoubleArray.toList(): List<Double> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun BooleanArray.toList(): List<Boolean> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun CharArray.toList(): List<Char> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun <T> Array<out T>.toMutableList(): MutableList<T> {\n    return ArrayList(this.asCollection())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ByteArray.toMutableList(): MutableList<Byte> {\n    val list = ArrayList<Byte>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ShortArray.toMutableList(): MutableList<Short> {\n    val list = ArrayList<Short>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun IntArray.toMutableList(): MutableList<Int> {\n    val list = ArrayList<Int>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun LongArray.toMutableList(): MutableList<Long> {\n    val list = ArrayList<Long>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun FloatArray.toMutableList(): MutableList<Float> {\n    val list = ArrayList<Float>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun DoubleArray.toMutableList(): MutableList<Double> {\n    val list = ArrayList<Double>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun BooleanArray.toMutableList(): MutableList<Boolean> {\n    val list = ArrayList<Boolean>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun CharArray.toMutableList(): MutableList<Char> {\n    val list = ArrayList<Char>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toSet(): Set<T> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toSet(): Set<Byte> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toSet(): Set<Short> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toSet(): Set<Int> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toSet(): Set<Long> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toSet(): Set<Float> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toSet(): Set<Double> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toSet(): Set<Boolean> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toSet(): Set<Char> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> ByteArray.flatMap(transform: (Byte) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> ShortArray.flatMap(transform: (Short) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> IntArray.flatMap(transform: (Int) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> LongArray.flatMap(transform: (Long) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> FloatArray.flatMap(transform: (Float) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> DoubleArray.flatMap(transform: (Double) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> BooleanArray.flatMap(transform: (Boolean) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> CharArray.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapTo(destination: C, transform: (Byte) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapTo(destination: C, transform: (Short) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapTo(destination: C, transform: (Int) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapTo(destination: C, transform: (Long) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapTo(destination: C, transform: (Float) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapTo(destination: C, transform: (Double) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapTo(destination: C, transform: (Boolean) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Array<out T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ByteArray.groupBy(keySelector: (Byte) -> K): Map<K, List<Byte>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Byte>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ShortArray.groupBy(keySelector: (Short) -> K): Map<K, List<Short>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Short>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> IntArray.groupBy(keySelector: (Int) -> K): Map<K, List<Int>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Int>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> LongArray.groupBy(keySelector: (Long) -> K): Map<K, List<Long>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Long>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> FloatArray.groupBy(keySelector: (Float) -> K): Map<K, List<Float>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Float>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> DoubleArray.groupBy(keySelector: (Double) -> K): Map<K, List<Double>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Double>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> BooleanArray.groupBy(keySelector: (Boolean) -> K): Map<K, List<Boolean>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Boolean>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharArray.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Array<out T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ByteArray.groupBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ShortArray.groupBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> IntArray.groupBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> LongArray.groupBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> FloatArray.groupBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> DoubleArray.groupBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> BooleanArray.groupBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharArray.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Byte>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Byte>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Short>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Short>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Int>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Int>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Long>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Long>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Float>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Float>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Double>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Double>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Boolean>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Boolean>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from an array to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Array<out T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Array<out T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ByteArray.map(transform: (Byte) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ShortArray.map(transform: (Short) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> IntArray.map(transform: (Int) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> LongArray.map(transform: (Long) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> FloatArray.map(transform: (Float) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> DoubleArray.map(transform: (Double) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> BooleanArray.map(transform: (Boolean) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> CharArray.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Array<out T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ByteArray.mapIndexed(transform: (index: Int, Byte) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ShortArray.mapIndexed(transform: (index: Int, Short) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> IntArray.mapIndexed(transform: (index: Int, Int) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> LongArray.mapIndexed(transform: (index: Int, Long) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> FloatArray.mapIndexed(transform: (index: Int, Float) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> DoubleArray.mapIndexed(transform: (index: Int, Double) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> BooleanArray.mapIndexed(transform: (index: Int, Boolean) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> CharArray.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Array<out T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapIndexedTo(destination: C, transform: (index: Int, Byte) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapIndexedTo(destination: C, transform: (index: Int, Short) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapIndexedTo(destination: C, transform: (index: Int, Int) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapIndexedTo(destination: C, transform: (index: Int, Long) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapIndexedTo(destination: C, transform: (index: Int, Float) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapIndexedTo(destination: C, transform: (index: Int, Double) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapIndexedTo(destination: C, transform: (index: Int, Boolean) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <T, R : Any> Array<out T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original array\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapTo(destination: C, transform: (Byte) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapTo(destination: C, transform: (Short) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapTo(destination: C, transform: (Int) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapTo(destination: C, transform: (Long) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapTo(destination: C, transform: (Float) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapTo(destination: C, transform: (Double) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapTo(destination: C, transform: (Boolean) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Array<out T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ByteArray.withIndex(): Iterable<IndexedValue<Byte>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ShortArray.withIndex(): Iterable<IndexedValue<Short>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun IntArray.withIndex(): Iterable<IndexedValue<Int>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun LongArray.withIndex(): Iterable<IndexedValue<Long>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun FloatArray.withIndex(): Iterable<IndexedValue<Float>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun DoubleArray.withIndex(): Iterable<IndexedValue<Double>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun BooleanArray.withIndex(): Iterable<IndexedValue<Boolean>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun CharArray.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Array<out T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun ByteArray.distinct(): List<Byte> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun ShortArray.distinct(): List<Short> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun IntArray.distinct(): List<Int> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun LongArray.distinct(): List<Long> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun FloatArray.distinct(): List<Float> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun DoubleArray.distinct(): List<Double> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun BooleanArray.distinct(): List<Boolean> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun CharArray.distinct(): List<Char> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Array<out T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> ByteArray.distinctBy(selector: (Byte) -> K): List<Byte> {\n    val set = HashSet<K>()\n    val list = ArrayList<Byte>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> ShortArray.distinctBy(selector: (Short) -> K): List<Short> {\n    val set = HashSet<K>()\n    val list = ArrayList<Short>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> IntArray.distinctBy(selector: (Int) -> K): List<Int> {\n    val set = HashSet<K>()\n    val list = ArrayList<Int>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> LongArray.distinctBy(selector: (Long) -> K): List<Long> {\n    val set = HashSet<K>()\n    val list = ArrayList<Long>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> FloatArray.distinctBy(selector: (Float) -> K): List<Float> {\n    val set = HashSet<K>()\n    val list = ArrayList<Float>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> DoubleArray.distinctBy(selector: (Double) -> K): List<Double> {\n    val set = HashSet<K>()\n    val list = ArrayList<Double>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> BooleanArray.distinctBy(selector: (Boolean) -> K): List<Boolean> {\n    val set = HashSet<K>()\n    val list = ArrayList<Boolean>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> CharArray.distinctBy(selector: (Char) -> K): List<Char> {\n    val set = HashSet<K>()\n    val list = ArrayList<Char>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Array<out T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ByteArray.intersect(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ShortArray.intersect(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun IntArray.intersect(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun LongArray.intersect(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun FloatArray.intersect(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun DoubleArray.intersect(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun BooleanArray.intersect(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun CharArray.intersect(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.subtract(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.subtract(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.subtract(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.subtract(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.subtract(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.subtract(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.subtract(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.subtract(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toMutableSet(): MutableSet<T> {\n    val set = LinkedHashSet<T>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toMutableSet(): MutableSet<Byte> {\n    val set = LinkedHashSet<Byte>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toMutableSet(): MutableSet<Short> {\n    val set = LinkedHashSet<Short>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toMutableSet(): MutableSet<Int> {\n    val set = LinkedHashSet<Int>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toMutableSet(): MutableSet<Long> {\n    val set = LinkedHashSet<Long>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toMutableSet(): MutableSet<Float> {\n    val set = LinkedHashSet<Float>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toMutableSet(): MutableSet<Double> {\n    val set = LinkedHashSet<Double>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toMutableSet(): MutableSet<Boolean> {\n    val set = LinkedHashSet<Boolean>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toMutableSet(): MutableSet<Char> {\n    val set = LinkedHashSet<Char>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Array<out T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ByteArray.union(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ShortArray.union(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun IntArray.union(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun LongArray.union(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun FloatArray.union(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun DoubleArray.union(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun BooleanArray.union(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun CharArray.union(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Array<out T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ByteArray.all(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ShortArray.all(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun IntArray.all(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun LongArray.all(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun FloatArray.all(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun DoubleArray.all(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun BooleanArray.all(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun CharArray.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Array<out T>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ByteArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ShortArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun IntArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun LongArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun FloatArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun DoubleArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun BooleanArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun CharArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Array<out T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ByteArray.any(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ShortArray.any(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun IntArray.any(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun LongArray.any(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun FloatArray.any(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun DoubleArray.any(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun BooleanArray.any(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun CharArray.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ByteArray.count(predicate: (Byte) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ShortArray.count(predicate: (Short) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun IntArray.count(predicate: (Int) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun LongArray.count(predicate: (Long) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun FloatArray.count(predicate: (Float) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun DoubleArray.count(predicate: (Double) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun BooleanArray.count(predicate: (Boolean) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun CharArray.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Array<out T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ByteArray.fold(initial: R, operation: (acc: R, Byte) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ShortArray.fold(initial: R, operation: (acc: R, Short) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> IntArray.fold(initial: R, operation: (acc: R, Int) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> LongArray.fold(initial: R, operation: (acc: R, Long) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> FloatArray.fold(initial: R, operation: (acc: R, Float) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> DoubleArray.fold(initial: R, operation: (acc: R, Double) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> BooleanArray.fold(initial: R, operation: (acc: R, Boolean) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> CharArray.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ByteArray.foldRight(initial: R, operation: (Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ShortArray.foldRight(initial: R, operation: (Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> IntArray.foldRight(initial: R, operation: (Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> LongArray.foldRight(initial: R, operation: (Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> FloatArray.foldRight(initial: R, operation: (Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRight(initial: R, operation: (Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRight(initial: R, operation: (Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> CharArray.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRightIndexed(initial: R, operation: (index: Int, Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRightIndexed(initial: R, operation: (index: Int, Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRightIndexed(initial: R, operation: (index: Int, Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRightIndexed(initial: R, operation: (index: Int, Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRightIndexed(initial: R, operation: (index: Int, Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRightIndexed(initial: R, operation: (index: Int, Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRightIndexed(initial: R, operation: (index: Int, Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun <T> Array<out T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ByteArray.forEach(action: (Byte) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ShortArray.forEach(action: (Short) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun IntArray.forEach(action: (Int) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun LongArray.forEach(action: (Long) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun FloatArray.forEach(action: (Float) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun DoubleArray.forEach(action: (Double) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun BooleanArray.forEach(action: (Boolean) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun CharArray.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Array<out T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ByteArray.forEachIndexed(action: (index: Int, Byte) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ShortArray.forEachIndexed(action: (index: Int, Short) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun IntArray.forEachIndexed(action: (index: Int, Int) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun LongArray.forEachIndexed(action: (index: Int, Long) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun FloatArray.forEachIndexed(action: (index: Int, Float) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun DoubleArray.forEachIndexed(action: (index: Int, Double) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun BooleanArray.forEachIndexed(action: (index: Int, Boolean) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun CharArray.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.max(): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ByteArray.max(): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ShortArray.max(): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun IntArray.max(): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun LongArray.max(): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun CharArray.max(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.maxBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.maxBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> IntArray.maxBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> LongArray.maxBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.maxBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.maxBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.maxBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> CharArray.maxBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.maxWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.maxWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.maxWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.maxWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.maxWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.maxWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.maxWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.maxWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.maxWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.min(): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ByteArray.min(): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ShortArray.min(): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun IntArray.min(): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun LongArray.min(): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun CharArray.min(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.minBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.minBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.minBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> IntArray.minBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> LongArray.minBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.minBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.minBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.minBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> CharArray.minBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.minWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.minWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.minWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.minWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.minWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.minWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.minWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.minWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.minWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Array<out T>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ByteArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ShortArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun IntArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun LongArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun FloatArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun DoubleArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun BooleanArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun CharArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Array<out T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ByteArray.none(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ShortArray.none(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun IntArray.none(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun LongArray.none(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun FloatArray.none(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun DoubleArray.none(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun BooleanArray.none(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun CharArray.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Array<out T>.reduce(operation: (acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ByteArray.reduce(operation: (acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ShortArray.reduce(operation: (acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun IntArray.reduce(operation: (acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun LongArray.reduce(operation: (acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun FloatArray.reduce(operation: (acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun DoubleArray.reduce(operation: (acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun BooleanArray.reduce(operation: (acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharArray.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Array<out T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ByteArray.reduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ShortArray.reduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun IntArray.reduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun LongArray.reduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun FloatArray.reduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun DoubleArray.reduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun BooleanArray.reduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharArray.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    if (isEmpty())\n        return null\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun ByteArray.reduceOrNull(operation: (acc: Byte, Byte) -> Byte): Byte? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun ShortArray.reduceOrNull(operation: (acc: Short, Short) -> Short): Short? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun IntArray.reduceOrNull(operation: (acc: Int, Int) -> Int): Int? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun LongArray.reduceOrNull(operation: (acc: Long, Long) -> Long): Long? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun FloatArray.reduceOrNull(operation: (acc: Float, Float) -> Float): Float? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun DoubleArray.reduceOrNull(operation: (acc: Double, Double) -> Double): Double? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun BooleanArray.reduceOrNull(operation: (acc: Boolean, Boolean) -> Boolean): Boolean? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun CharArray.reduceOrNull(operation: (acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> Array<out T>.reduceRight(operation: (T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ByteArray.reduceRight(operation: (Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ShortArray.reduceRight(operation: (Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun IntArray.reduceRight(operation: (Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun LongArray.reduceRight(operation: (Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun FloatArray.reduceRight(operation: (Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun DoubleArray.reduceRight(operation: (Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun BooleanArray.reduceRight(operation: (Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharArray.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> Array<out T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ByteArray.reduceRightIndexed(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ShortArray.reduceRightIndexed(operation: (index: Int, Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun IntArray.reduceRightIndexed(operation: (index: Int, Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun LongArray.reduceRightIndexed(operation: (index: Int, Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun FloatArray.reduceRightIndexed(operation: (index: Int, Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun DoubleArray.reduceRightIndexed(operation: (index: Int, Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun BooleanArray.reduceRightIndexed(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharArray.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun ByteArray.reduceRightOrNull(operation: (Byte, acc: Byte) -> Byte): Byte? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun ShortArray.reduceRightOrNull(operation: (Short, acc: Short) -> Short): Short? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun IntArray.reduceRightOrNull(operation: (Int, acc: Int) -> Int): Int? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun LongArray.reduceRightOrNull(operation: (Long, acc: Long) -> Long): Long? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun FloatArray.reduceRightOrNull(operation: (Float, acc: Float) -> Float): Float? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun DoubleArray.reduceRightOrNull(operation: (Double, acc: Double) -> Double): Double? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun BooleanArray.reduceRightOrNull(operation: (Boolean, acc: Boolean) -> Boolean): Boolean? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun CharArray.reduceRightOrNull(operation: (Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Array<out T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.scan(initial: R, operation: (acc: R, Byte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.scan(initial: R, operation: (acc: R, Short) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.scan(initial: R, operation: (acc: R, Int) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.scan(initial: R, operation: (acc: R, Long) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.scan(initial: R, operation: (acc: R, Float) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.scan(initial: R, operation: (acc: R, Double) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.scan(initial: R, operation: (acc: R, Boolean) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.scan(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Array<out T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.scanReduce(operation: (acc: S, T) -> S): List<S> {\n    if (isEmpty()) return emptyList()\n    var accumulator: S = this[0]\n    val result = ArrayList<S>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.scanReduce(operation: (acc: Byte, Byte) -> Byte): List<Byte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Byte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.scanReduce(operation: (acc: Short, Short) -> Short): List<Short> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Short>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.scanReduce(operation: (acc: Int, Int) -> Int): List<Int> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Int>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.scanReduce(operation: (acc: Long, Long) -> Long): List<Long> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Long>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.scanReduce(operation: (acc: Float, Float) -> Float): List<Float> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Float>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.scanReduce(operation: (acc: Double, Double) -> Double): List<Double> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Double>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.scanReduce(operation: (acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Boolean>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.scanReduce(operation: (acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.scanReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    if (isEmpty()) return emptyList()\n    var accumulator: S = this[0]\n    val result = ArrayList<S>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.scanReduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): List<Byte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Byte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.scanReduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): List<Short> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Short>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.scanReduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): List<Int> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Int>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.scanReduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): List<Long> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Long>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.scanReduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): List<Float> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Float>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.scanReduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): List<Double> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Double>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.scanReduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Boolean>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.scanReduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumBy(selector: (Byte) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumBy(selector: (Short) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumBy(selector: (Int) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumBy(selector: (Long) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumBy(selector: (Float) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumBy(selector: (Double) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumBy(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumByDouble(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumByDouble(selector: (Short) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumByDouble(selector: (Int) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumByDouble(selector: (Long) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumByDouble(selector: (Float) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumByDouble(selector: (Double) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumByDouble(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Array<T?>.requireNoNulls(): Array<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Array<T>\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun <T> Array<out T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun ByteArray.partition(predicate: (Byte) -> Boolean): Pair<List<Byte>, List<Byte>> {\n    val first = ArrayList<Byte>()\n    val second = ArrayList<Byte>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun ShortArray.partition(predicate: (Short) -> Boolean): Pair<List<Short>, List<Short>> {\n    val first = ArrayList<Short>()\n    val second = ArrayList<Short>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun IntArray.partition(predicate: (Int) -> Boolean): Pair<List<Int>, List<Int>> {\n    val first = ArrayList<Int>()\n    val second = ArrayList<Int>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun LongArray.partition(predicate: (Long) -> Boolean): Pair<List<Long>, List<Long>> {\n    val first = ArrayList<Long>()\n    val second = ArrayList<Long>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun FloatArray.partition(predicate: (Float) -> Boolean): Pair<List<Float>, List<Float>> {\n    val first = ArrayList<Float>()\n    val second = ArrayList<Float>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun DoubleArray.partition(predicate: (Double) -> Boolean): Pair<List<Double>, List<Double>> {\n    val first = ArrayList<Double>()\n    val second = ArrayList<Double>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun BooleanArray.partition(predicate: (Boolean) -> Boolean): Pair<List<Boolean>, List<Boolean>> {\n    val first = ArrayList<Boolean>()\n    val second = ArrayList<Boolean>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun CharArray.partition(predicate: (Char) -> Boolean): Pair<List<Char>, List<Char>> {\n    val first = ArrayList<Char>()\n    val second = ArrayList<Char>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Array<out R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Array<out R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Array<out R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Array<out R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Array<out R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Array<out R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Array<out R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Array<out R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Array<out R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Array<out R>, transform: (a: Short, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Array<out R>, transform: (a: Int, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Array<out R>, transform: (a: Long, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Array<out R>, transform: (a: Float, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Array<out R>, transform: (a: Double, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Array<out R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Array<out R>, transform: (a: Char, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Iterable<R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Iterable<R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Iterable<R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Iterable<R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Iterable<R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Iterable<R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Iterable<R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Iterable<R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Iterable<R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Iterable<R>, transform: (a: Short, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Iterable<R>, transform: (a: Int, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Iterable<R>, transform: (a: Long, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Iterable<R>, transform: (a: Float, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Iterable<R>, transform: (a: Double, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Iterable<R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Iterable<R>, transform: (a: Char, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ByteArray.zip(other: ByteArray): List<Pair<Byte, Byte>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ShortArray.zip(other: ShortArray): List<Pair<Short, Short>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun IntArray.zip(other: IntArray): List<Pair<Int, Int>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun LongArray.zip(other: LongArray): List<Pair<Long, Long>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun FloatArray.zip(other: FloatArray): List<Pair<Float, Float>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun DoubleArray.zip(other: DoubleArray): List<Pair<Double, Double>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun BooleanArray.zip(other: BooleanArray): List<Pair<Boolean, Boolean>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun CharArray.zip(other: CharArray): List<Pair<Char, Char>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ByteArray.zip(other: ByteArray, transform: (a: Byte, b: Byte) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ShortArray.zip(other: ShortArray, transform: (a: Short, b: Short) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> IntArray.zip(other: IntArray, transform: (a: Int, b: Int) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> LongArray.zip(other: LongArray, transform: (a: Long, b: Long) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> FloatArray.zip(other: FloatArray, transform: (a: Float, b: Float) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> DoubleArray.zip(other: DoubleArray, transform: (a: Double, b: Double) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> BooleanArray.zip(other: BooleanArray, transform: (a: Boolean, b: Boolean) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> CharArray.zip(other: CharArray, transform: (a: Char, b: Char) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Array<out T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ByteArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ShortArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> IntArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> LongArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> FloatArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> DoubleArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> BooleanArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> CharArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Array<out T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ByteArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ShortArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun IntArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun LongArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun FloatArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun DoubleArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun BooleanArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun CharArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun <T> Array<out T>.asIterable(): Iterable<T> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ByteArray.asIterable(): Iterable<Byte> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ShortArray.asIterable(): Iterable<Short> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun IntArray.asIterable(): Iterable<Int> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun LongArray.asIterable(): Iterable<Long> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun FloatArray.asIterable(): Iterable<Float> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun DoubleArray.asIterable(): Iterable<Double> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun BooleanArray.asIterable(): Iterable<Boolean> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun CharArray.asIterable(): Iterable<Char> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun <T> Array<out T>.asSequence(): Sequence<T> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ByteArray.asSequence(): Sequence<Byte> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ShortArray.asSequence(): Sequence<Short> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun IntArray.asSequence(): Sequence<Int> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun LongArray.asSequence(): Sequence<Long> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun FloatArray.asSequence(): Sequence<Float> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun DoubleArray.asSequence(): Sequence<Double> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun BooleanArray.asSequence(): Sequence<Boolean> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun CharArray.asSequence(): Sequence<Char> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Array<out Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Array<out Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Array<out Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Array<out Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Array<out Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Array<out Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ByteArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ShortArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun IntArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun LongArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun FloatArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun DoubleArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Array<out Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Array<out Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Array<out Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Array<out Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Array<out Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Array<out Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ByteArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ShortArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun IntArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun LongArray.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun FloatArray.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun DoubleArray.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n",null,"/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 1.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 2.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 3.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 4.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 5.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this collection.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Collection<T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Collection is empty.\")\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this collection, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> Collection<T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n until size)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count >= n) list.add(item) else ++count\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n until size)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic expect fun <T> MutableList<T>.reverse(): Unit\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associate\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateBy\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateByWithValueTransform\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given collection and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Iterable<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given collection,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original collection\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this collection and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the collection is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the list is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> List<T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        return null\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Iterable<T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Iterable<T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var index = 0\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(index++, accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.scanReduce(operation: (acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.scanReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    var index = 1\n    while (iterator.hasNext()) {\n        accumulator = operation(index++, accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Iterables.Operations.partition\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<List<T>>(resultCapacity)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<R>(resultCapacity)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (!partialWindows && windowSize < size) break\n            window.move(index, index + windowSize)\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] collection with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n@file:UseExperimental(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\nprivate object EmptyMap : Map<Any?, Nothing>, Serializable {\n    private const val serialVersionUID: Long = 8246714829545688274\n\n    override fun equals(other: Any?): Boolean = other is Map<*, *> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"{}\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n\n    override fun containsKey(key: Any?): Boolean = false\n    override fun containsValue(value: Nothing): Boolean = false\n    override fun get(key: Any?): Nothing? = null\n    override val entries: Set<Map.Entry<Any?, Nothing>> get() = EmptySet\n    override val keys: Set<Any?> get() = EmptySet\n    override val values: Collection<Nothing> get() = EmptyList\n\n    private fun readResolve(): Any = EmptyMap\n}\n\n/**\n * Returns an empty read-only map of specified type.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\npublic fun <K, V> emptyMap(): Map<K, V> = @Suppress(\"UNCHECKED_CAST\") (EmptyMap as Map<K, V>)\n\n/**\n * Returns a new read-only map with the specified contents, given as a list of pairs\n * where the first value is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V> =\n    if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap()\n\n/**\n * Returns an empty read-only map.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mapOf(): Map<K, V> = emptyMap()\n\n/**\n * Returns an empty new [MutableMap].\n *\n * The returned map preserves the entry iteration order.\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mutableMapOf(): MutableMap<K, V> = LinkedHashMap()\n\n/**\n * Returns a new [MutableMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.mutableMapFromPairs\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\npublic fun <K, V> mutableMapOf(vararg pairs: Pair<K, V>): MutableMap<K, V> =\n    LinkedHashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [HashMap].\n *\n * @sample samples.collections.Maps.Instantiation.emptyHashMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> hashMapOf(): HashMap<K, V> = HashMap<K, V>()\n\n/**\n * Returns a new [HashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * @sample samples.collections.Maps.Instantiation.hashMapFromPairs\n */\npublic fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V> = HashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [LinkedHashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> linkedMapOf(): LinkedHashMap<K, V> = LinkedHashMap<K, V>()\n\n/**\n * Returns a new [LinkedHashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.linkedMapFromPairs\n */\npublic fun <K, V> linkedMapOf(vararg pairs: Pair<K, V>): LinkedHashMap<K, V> = pairs.toMap(LinkedHashMap(mapCapacity(pairs.size)))\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(@BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return LinkedHashMap<K, V>().apply(builderAction)\n}\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of pairs added in the [builderAction].\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(capacity: Int, @BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    checkBuilderCapacity(capacity)\n    return LinkedHashMap<K, V>(mapCapacity(capacity)).apply(builderAction)\n}\n\n/**\n * Calculate the initial capacity of a map.\n */\n@PublishedApi\ninternal expect fun mapCapacity(expectedSize: Int): Int\n\n/**\n * Checks a collection builder function capacity argument.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@PublishedApi\ninternal expect fun checkBuilderCapacity(capacity: Int)\n\n/**\n * Returns `true` if this map is not empty.\n * @sample samples.collections.Maps.Usage.mapIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable map is either null or empty.\n * @sample samples.collections.Maps.Usage.mapIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || isEmpty()\n}\n\n/**\n * Returns the [Map] if its not `null`, or the empty [Map] otherwise.\n *\n * @sample samples.collections.Maps.Usage.mapOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>?.orEmpty(): Map<K, V> = this ?: emptyMap()\n\n/**\n * Returns this map if it's not empty\n * or the result of calling [defaultValue] function if the map is empty.\n *\n * @sample samples.collections.Maps.Usage.mapIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <M, R> M.ifEmpty(defaultValue: () -> R): R where M : Map<*, *>, M : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Checks if the map contains the given key.\n *\n * This method allows to use the `x in map` syntax for checking whether an object is contained in the map.\n *\n * @sample samples.collections.Maps.Usage.containsKey\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K): Boolean = containsKey(key)\n\n/**\n * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.get(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, V>).get(key)\n\n/**\n * Allows to use the index operator for storing values in a mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit {\n    put(key, value)\n}\n\n/**\n * Returns `true` if the map contains the specified [key].\n *\n * Allows to overcome type-safety restriction of `containsKey` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K> Map<out K, *>.containsKey(key: K): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, *>).containsKey(key)\n\n/**\n * Returns `true` if the map maps one or more keys to the specified [value].\n *\n * Allows to overcome type-safety restriction of `containsValue` that requires to pass a value of type `V`.\n *\n * @sample samples.collections.Maps.Usage.containsValue\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <K, @kotlin.internal.OnlyInputTypes V> Map<K, V>.containsValue(value: V): Boolean = this.containsValue(value)\n\n\n/**\n * Removes the specified key and its corresponding value from this map.\n *\n * @return the previous value associated with the key, or `null` if the key was not present in the map.\n\n * Allows to overcome type-safety restriction of `remove` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K, V> MutableMap<out K, V>.remove(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableMap<K, V>).remove(key)\n\n/**\n * Returns the key component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component1(): K = key\n\n/**\n * Returns the value component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component2(): V = value\n\n/**\n * Converts entry to [Pair] with key being first component and value being second.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map.Entry<K, V>.toPair(): Pair<K, V> = Pair(key, value)\n\n/**\n * Returns the value for the given key, or the result of the [defaultValue] function if there was no entry for the given key.\n *\n * @sample samples.collections.Maps.Usage.getOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>.getOrElse(key: K, defaultValue: () -> V): V = get(key) ?: defaultValue()\n\n\ninternal inline fun <K, V> Map<K, V>.getOrElseNullable(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    if (value == null && !containsKey(key)) {\n        return defaultValue()\n    } else {\n        @Suppress(\"UNCHECKED_CAST\")\n        return value as V\n    }\n}\n\n/**\n * Returns the value for the given [key] or throws an exception if there is no such key in the map.\n *\n * If the map was created by [withDefault], resorts to its `defaultValue` provider function\n * instead of throwing an exception.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and\n * no implicit default value was provided for that map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<K, V>.getValue(key: K): V = getOrImplicitDefault(key)\n\n/**\n * Returns the value for the given key. If the key is not found in the map, calls the [defaultValue] function,\n * puts its result into the map under the given key and returns it.\n *\n * Note that the operation is not guaranteed to be atomic if the map is being modified concurrently.\n *\n * @sample samples.collections.Maps.Usage.getOrPut\n */\npublic inline fun <K, V> MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    return if (value == null) {\n        val answer = defaultValue()\n        put(key, answer)\n        answer\n    } else {\n        value\n    }\n}\n\n/**\n * Returns an [Iterator] over the entries in the [Map].\n *\n * @sample samples.collections.Maps.Usage.forOverEntries\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map<out K, V>.iterator(): Iterator<Map.Entry<K, V>> = entries.iterator()\n\n/**\n * Returns a [MutableIterator] over the mutable entries in the [MutableMap].\n *\n */\n@kotlin.jvm.JvmName(\"mutableIterator\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.iterator(): MutableIterator<MutableMap.MutableEntry<K, V>> = entries.iterator()\n\n/**\n * Populates the given [destination] map with entries having the keys of this map and the values obtained\n * by applying the [transform] function to each entry in this [Map].\n */\npublic inline fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, { it.key }, transform)\n}\n\n/**\n * Populates the given [destination] map with entries having the keys obtained\n * by applying the [transform] function to each entry in this [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n */\npublic inline fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, transform, { it.value })\n}\n\n/**\n * Puts all the given [pairs] into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Array<out Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given collection into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Iterable<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given sequence into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Sequence<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Returns a new map with entries having the keys of this map and the values obtained by applying the [transform]\n * function to each entry in this [Map].\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapValues\n */\npublic inline fun <K, V, R> Map<out K, V>.mapValues(transform: (Map.Entry<K, V>) -> R): Map<K, R> {\n    return mapValuesTo(LinkedHashMap<K, R>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a new Map with entries having the keys obtained by applying the [transform] function to each entry in this\n * [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapKeys\n */\npublic inline fun <K, V, R> Map<out K, V>.mapKeys(transform: (Map.Entry<K, V>) -> R): Map<R, V> {\n    return mapKeysTo(LinkedHashMap<R, V>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a map containing all key-value pairs with keys matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterKeys\n */\npublic inline fun <K, V> Map<out K, V>.filterKeys(predicate: (K) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.key)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n/**\n * Returns a map containing all key-value pairs with values matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n *  @sample samples.collections.Maps.Filtering.filterValues\n */\npublic inline fun <K, V> Map<out K, V>.filterValues(predicate: (V) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.value)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n\n/**\n * Appends all entries matching the given [predicate] into the mutable map given as [destination] parameter.\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filter\n */\npublic inline fun <K, V> Map<out K, V>.filter(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Appends all entries not matching the given [predicate] into the given [destination].\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterNotTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (!predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs not matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterNot\n */\npublic inline fun <K, V> Map<out K, V>.filterNot(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterNotTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Returns a new map containing all key-value pairs from the given collection of pairs.\n *\n * The returned map preserves the entry iteration order of the original collection.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyMap()\n            1 -> mapOf(if (this is List) this[0] else iterator().next())\n            else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n        }\n    }\n    return toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given collection of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given array of pairs.\n *\n * The returned map preserves the entry iteration order of the original array.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> mapOf(this[0])\n    else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n}\n\n/**\n *  Populates and returns the [destination] mutable map with key-value pairs from the given array of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given sequence of pairs.\n *\n * The returned map preserves the entry iteration order of the original sequence.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V> = toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given sequence of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new read-only map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMap()\n    else -> toMutableMap()\n}\n\n/**\n * Returns a new mutable map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V> = LinkedHashMap(this)\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Creates a new read-only map by replacing or adding an entry to this map from a given key-value [pair].\n *\n * The returned map preserves the entry iteration order of the original map.\n * The [pair] is iterated in the end if it has a unique key.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pair: Pair<K, V>): Map<K, V> =\n    if (this.isEmpty()) mapOf(pair) else LinkedHashMap(this).apply { put(pair.first, pair.second) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] collection.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Iterable<Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given array of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] array.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Array<out Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] sequence.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Sequence<Pair<K, V>>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(pairs) }.optimizeReadOnlyMap()\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from another [map].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those entries of another [map] that are missing in this map are iterated in the end in the order of that [map].\n */\npublic operator fun <K, V> Map<out K, V>.plus(map: Map<out K, V>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(map) }\n\n\n/**\n * Appends or replaces the given [pair] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pair: Pair<K, V>) {\n    put(pair.first, pair.second)\n}\n\n/**\n * Appends or replaces all pairs from the given collection of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Iterable<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given array of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Array<out Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given sequence of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Sequence<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all entries from the given [map] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(map: Map<K, V>) {\n    putAll(map)\n}\n\n/**\n * Returns a map containing all entries of the original map except the entry with the given [key].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(key) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] collection.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Iterable<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] array.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Array<out K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] sequence.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Sequence<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Removes the entry with the given [key] from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(key: K) {\n    remove(key)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] collection from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Iterable<K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] array from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Array<out K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries from the keys of which are contained in the given [keys] sequence from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Sequence<K>) {\n    this.keys.removeAll(keys)\n}\n\n\n// do not expose for now @PublishedApi\ninternal fun <K, V> Map<K, V>.optimizeReadOnlyMap() = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMapOrSelf()\n    else -> this\n}\n",null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\nimport kotlin.contracts.contract\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trim(predicate: (Char) -> Boolean): CharSequence {\n    var startIndex = 0\n    var endIndex = length - 1\n    var startFound = false\n\n    while (startIndex <= endIndex) {\n        val index = if (!startFound) startIndex else endIndex\n        val match = predicate(this[index])\n\n        if (!startFound) {\n            if (!match)\n                startFound = true\n            else\n                startIndex += 1\n        } else {\n            if (!match)\n                break\n            else\n                endIndex -= 1\n        }\n    }\n\n    return subSequence(startIndex, endIndex + 1)\n}\n\n/**\n * Returns a string having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trim(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trim(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimStart(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n\n    return \"\"\n}\n\n/**\n * Returns a string having leading characters matching the [predicate] removed.\n */\npublic inline fun String.trimStart(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimStart(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimEnd(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices.reversed())\n        if (!predicate(this[index]))\n            return subSequence(0, index + 1)\n\n    return \"\"\n}\n\n/**\n * Returns a string having trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trimEnd(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimEnd(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trim(vararg chars: Char): CharSequence = trim { it in chars }\n\n/**\n * Returns a string having leading and trailing characters from the [chars] array removed.\n */\npublic fun String.trim(vararg chars: Char): String = trim { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading characters from the [chars] array removed.\n */\npublic fun CharSequence.trimStart(vararg chars: Char): CharSequence = trimStart { it in chars }\n\n/**\n * Returns a string having leading characters from the [chars] array removed.\n */\npublic fun String.trimStart(vararg chars: Char): String = trimStart { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trimEnd(vararg chars: Char): CharSequence = trimEnd { it in chars }\n\n/**\n * Returns a string having trailing characters from the [chars] array removed.\n */\npublic fun String.trimEnd(vararg chars: Char): String = trimEnd { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing whitespace removed.\n */\npublic fun CharSequence.trim(): CharSequence = trim(Char::isWhitespace)\n\n/**\n * Returns a string having leading and trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trim(): String = (this as CharSequence).trim().toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading whitespace removed.\n */\npublic fun CharSequence.trimStart(): CharSequence = trimStart(Char::isWhitespace)\n\n/**\n * Returns a string having leading whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimStart(): String = (this as CharSequence).trimStart().toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing whitespace removed.\n */\npublic fun CharSequence.trimEnd(): CharSequence = trimEnd(Char::isWhitespace)\n\n/**\n * Returns a string having trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimEnd(): String = (this as CharSequence).trimEnd().toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the beginning\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun CharSequence.padStart(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    sb.append(this)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the beginning with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun String.padStart(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padStart(length, padChar).toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the end\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun CharSequence.padEnd(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    sb.append(this)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the end with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun String.padEnd(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padEnd(length, padChar).toString()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty.\n *\n * @sample samples.text.Strings.stringIsNullOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.length == 0\n}\n\n/**\n * Returns `true` if this char sequence is empty (contains no characters).\n *\n * @sample samples.text.Strings.stringIsEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isEmpty(): Boolean = length == 0\n\n/**\n * Returns `true` if this char sequence is not empty.\n *\n * @sample samples.text.Strings.stringIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotEmpty(): Boolean = length > 0\n\n// implemented differently in JVM and JS\n//public fun String.isBlank(): Boolean = length() == 0 || all { it.isWhitespace() }\n\n\n/**\n * Returns `true` if this char sequence is not empty and contains some characters except of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNotBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotBlank(): Boolean = !isBlank()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty or consists solely of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNullOrBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrBlank(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrBlank != null)\n    }\n\n    return this == null || this.isBlank()\n}\n\n/**\n * Iterator for characters of the given char sequence.\n */\npublic operator fun CharSequence.iterator(): CharIterator = object : CharIterator() {\n    private var index = 0\n\n    public override fun nextChar(): Char = get(index++)\n\n    public override fun hasNext(): Boolean = index < length\n}\n\n/** Returns the string if it is not `null`, or the empty string otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun String?.orEmpty(): String = this ?: \"\"\n\n/**\n * Returns this char sequence if it's not empty\n * or the result of calling [defaultValue] function if the char sequence is empty.\n *\n * @sample samples.text.Strings.stringIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Returns this char sequence if it is not empty and doesn't consist solely of whitespace characters,\n * or the result of calling [defaultValue] function otherwise.\n *\n * @sample samples.text.Strings.stringIfBlank\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifBlank(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isBlank()) defaultValue() else this\n\n/**\n * Returns the range of valid character indices for this char sequence.\n */\npublic val CharSequence.indices: IntRange\n    get() = 0..length - 1\n\n/**\n * Returns the index of the last character in the char sequence or -1 if it is empty.\n */\npublic val CharSequence.lastIndex: Int\n    get() = this.length - 1\n\n/**\n * Returns `true` if this CharSequence has Unicode surrogate pair at the specified [index].\n */\npublic fun CharSequence.hasSurrogatePairAt(index: Int): Boolean {\n    return index in 0..length - 2\n            && this[index].isHighSurrogate()\n            && this[index + 1].isLowSurrogate()\n}\n\n/**\n * Returns a substring specified by the given [range] of indices.\n */\npublic fun String.substring(range: IntRange): String = substring(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence specified by the given [range] of indices.\n */\npublic fun CharSequence.subSequence(range: IntRange): CharSequence = subSequence(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence.\n *\n * This extension is chosen only for invocation with old-named parameters.\n * Replace parameter names with the same as those of [CharSequence.subSequence].\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning\n@Deprecated(\"Use parameters named startIndex and endIndex.\", ReplaceWith(\"subSequence(startIndex = start, endIndex = end)\"))\npublic inline fun String.subSequence(start: Int, end: Int): CharSequence = subSequence(start, end)\n\n/**\n * Returns a substring of chars from a range of this char sequence starting at the [startIndex] and ending right before the [endIndex].\n *\n * @param startIndex the start index (inclusive).\n * @param endIndex the end index (exclusive). If not specified, the length of the char sequence is used.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.substring(startIndex: Int, endIndex: Int = length): String = subSequence(startIndex, endIndex).toString()\n\n/**\n * Returns a substring of chars at indices from the specified [range] of this char sequence.\n */\npublic fun CharSequence.substring(range: IntRange): String = subSequence(range.start, range.endInclusive + 1).toString()\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range\n * is replaced with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@UseExperimental(ExperimentalStdlibApi::class)\npublic fun CharSequence.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n    val sb = StringBuilder()\n    sb.appendRange(this, 0, startIndex)\n    sb.append(replacement)\n    sb.appendRange(this, endIndex, length)\n    return sb\n}\n\n/**\n * Replaces the part of the string at the given range with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(startIndex, endIndex, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range]\n * is replaced with the [replacement] char sequence.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\npublic fun CharSequence.replaceRange(range: IntRange, replacement: CharSequence): CharSequence =\n    replaceRange(range.start, range.endInclusive + 1, replacement)\n\n/**\n * Replace the part of string at the given [range] with the [replacement] string.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(range: IntRange, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(range, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range is removed.\n *\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n * [endIndex] is not included in the removed part.\n */\n@UseExperimental(ExperimentalStdlibApi::class)\npublic fun CharSequence.removeRange(startIndex: Int, endIndex: Int): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n\n    if (endIndex == startIndex)\n        return this.subSequence(0, length)\n\n    val sb = StringBuilder(length - (endIndex - startIndex))\n    sb.appendRange(this, 0, startIndex)\n    sb.appendRange(this, endIndex, length)\n    return sb\n}\n\n/**\n * Removes the part of a string at a given range.\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n *  [endIndex] is not included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(startIndex: Int, endIndex: Int): String =\n    (this as CharSequence).removeRange(startIndex, endIndex).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range] is removed.\n *\n * The end index of the [range] is included in the removed part.\n */\npublic fun CharSequence.removeRange(range: IntRange): CharSequence = removeRange(range.start, range.endInclusive + 1)\n\n/**\n * Removes the part of a string at the given [range].\n *\n * The end index of the [range] is included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(range: IntRange): String =\n    (this as CharSequence).removeRange(range).toString()\n\n/**\n * If this char sequence starts with the given [prefix], returns a new char sequence\n * with the prefix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removePrefix(prefix: CharSequence): CharSequence {\n    if (startsWith(prefix)) {\n        return subSequence(prefix.length, length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string starts with the given [prefix], returns a copy of this string\n * with the prefix removed. Otherwise, returns this string.\n */\npublic fun String.removePrefix(prefix: CharSequence): String {\n    if (startsWith(prefix)) {\n        return substring(prefix.length)\n    }\n    return this\n}\n\n/**\n * If this char sequence ends with the given [suffix], returns a new char sequence\n * with the suffix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSuffix(suffix: CharSequence): CharSequence {\n    if (endsWith(suffix)) {\n        return subSequence(0, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string ends with the given [suffix], returns a copy of this string\n * with the suffix removed. Otherwise, returns this string.\n */\npublic fun String.removeSuffix(suffix: CharSequence): String {\n    if (endsWith(suffix)) {\n        return substring(0, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with the given [prefix] and ends with the given [suffix],\n * returns a new char sequence having both the given [prefix] and [suffix] removed.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(prefix: CharSequence, suffix: CharSequence): CharSequence {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return subSequence(prefix.length, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Removes from a string both the given [prefix] and [suffix] if and only if\n * it starts with the [prefix] and ends with the [suffix].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(prefix: CharSequence, suffix: CharSequence): String {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return substring(prefix.length, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with and ends with the given [delimiter],\n * returns a new char sequence having this [delimiter] removed both from the start and end.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(delimiter: CharSequence): CharSequence = removeSurrounding(delimiter, delimiter)\n\n/**\n * Removes the given [delimiter] string from both the start and the end of this string\n * if and only if it starts with and ends with the [delimiter].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(delimiter: CharSequence): String = removeSurrounding(delimiter, delimiter)\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n\n// public fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean): String // JVM- and JS-specific\n// public fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean): String // JVM- and JS-specific\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the given [replacement].\n *\n * The [replacement] can consist of any combination of literal text and $-substitutions. To treat the replacement string\n * literally escape it with the [kotlin.text.Regex.Companion.escapeReplacement] method.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, replacement: String): String = regex.replace(this, replacement)\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the result of the given function [transform] that takes [MatchResult] and returns a string to be used as a\n * replacement for that match.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, noinline transform: (MatchResult) -> CharSequence): String =\n    regex.replace(this, transform)\n\n/**\n * Replaces the first occurrence of the given regular expression [regex] in this char sequence with specified [replacement] expression.\n *\n * @param replacement A replacement expression that can include substitutions. See [Regex.replaceFirst] for details.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replaceFirst(regex: Regex, replacement: String): String = regex.replaceFirst(this, replacement)\n\n\n/**\n * Returns `true` if this char sequence matches the given regular expression.\n */\n@kotlin.internal.InlineOnly\npublic inline infix fun CharSequence.matches(regex: Regex): Boolean = regex.matches(this)\n\n/**\n * Implementation of [regionMatches] for CharSequences.\n * Invoked when it's already known that arguments are not Strings, so that no additional type checks are performed.\n */\ninternal fun CharSequence.regionMatchesImpl(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean): Boolean {\n    if ((otherOffset < 0) || (thisOffset < 0) || (thisOffset > this.length - length) || (otherOffset > other.length - length)) {\n        return false\n    }\n\n    for (index in 0 until length) {\n        if (!this[thisOffset + index].equals(other[otherOffset + index], ignoreCase))\n            return false\n    }\n    return true\n}\n\n/**\n * Returns `true` if this char sequence starts with the specified character.\n */\npublic fun CharSequence.startsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[0].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence ends with the specified character.\n */\npublic fun CharSequence.endsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[lastIndex].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix)\n    else\n        return regionMatchesImpl(0, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if a substring of this char sequence starting at the specified offset [startIndex] starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, startIndex: Int, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix, startIndex)\n    else\n        return regionMatchesImpl(startIndex, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if this char sequence ends with the specified suffix.\n */\npublic fun CharSequence.endsWith(suffix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && suffix is String)\n        return this.endsWith(suffix)\n    else\n        return regionMatchesImpl(length - suffix.length, suffix, 0, suffix.length, ignoreCase)\n}\n\n\n// common prefix and suffix\n\n/**\n * Returns the longest string `prefix` such that this char sequence and [other] char sequence both start with this prefix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common prefix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonPrefixWith\n */\npublic fun CharSequence.commonPrefixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val shortestLength = minOf(this.length, other.length)\n\n    var i = 0\n    while (i < shortestLength && this[i].equals(other[i], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(i - 1) || other.hasSurrogatePairAt(i - 1)) {\n        i--\n    }\n    return subSequence(0, i).toString()\n}\n\n/**\n * Returns the longest string `suffix` such that this char sequence and [other] char sequence both end with this suffix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common suffix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonSuffixWith\n */\npublic fun CharSequence.commonSuffixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val thisLength = this.length\n    val otherLength = other.length\n    val shortestLength = minOf(thisLength, otherLength)\n\n    var i = 0\n    while (i < shortestLength && this[thisLength - i - 1].equals(other[otherLength - i - 1], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(thisLength - i - 1) || other.hasSurrogatePairAt(otherLength - i - 1)) {\n        i--\n    }\n    return subSequence(thisLength - i, thisLength).toString()\n}\n\n\n// indexOfAny()\n\n/**\n * Finds the index of the first occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.indexOfAny(chars: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeIndexOf(char, startIndex)\n    }\n\n    for (index in startIndex.coerceAtLeast(0)..lastIndex) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n    return -1\n}\n\n/**\n * Finds the index of the last occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.lastIndexOfAny(chars: CharArray, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeLastIndexOf(char, startIndex)\n    }\n\n\n    for (index in startIndex.coerceAtMost(lastIndex) downTo 0) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n\n    return -1\n}\n\n\nprivate fun CharSequence.indexOf(other: CharSequence, startIndex: Int, endIndex: Int, ignoreCase: Boolean, last: Boolean = false): Int {\n    val indices = if (!last)\n        startIndex.coerceAtLeast(0)..endIndex.coerceAtMost(length)\n    else\n        startIndex.coerceAtMost(lastIndex) downTo endIndex.coerceAtLeast(0)\n\n    if (this is String && other is String) { // smart cast\n        for (index in indices) {\n            if (other.regionMatches(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    } else {\n        for (index in indices) {\n            if (other.regionMatchesImpl(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    }\n    return -1\n}\n\nprivate fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int, ignoreCase: Boolean, last: Boolean): Pair<Int, String>? {\n    if (!ignoreCase && strings.size == 1) {\n        val string = strings.single()\n        val index = if (!last) indexOf(string, startIndex) else lastIndexOf(string, startIndex)\n        return if (index < 0) null else index to string\n    }\n\n    val indices = if (!last) startIndex.coerceAtLeast(0)..length else startIndex.coerceAtMost(lastIndex) downTo 0\n\n    if (this is String) {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatches(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    } else {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatchesImpl(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    }\n\n    return null\n}\n\n/**\n * Finds the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the first occurrence of matched string from [strings] and the string matched\n * or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)\n\n/**\n * Finds the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the last occurrence of matched string from [strings] and the string matched or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findLastAnyOf(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)\n\n/**\n * Finds the index of the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.indexOfAny(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)?.first ?: -1\n\n/**\n * Finds the index of the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.lastIndexOfAny(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)?.first ?: -1\n\n\n// indexOf\n\n/**\n * Returns the index within this string of the first occurrence of the specified character, starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.indexOf(char: Char, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the first occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of [string] or `-1` if none is found.\n * @sample samples.text.Strings.indexOf\n */\npublic fun CharSequence.indexOf(string: String, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, length, ignoreCase)\n    else\n        nativeIndexOf(string, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified character,\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(char: Char, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        lastIndexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeLastIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of [string] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(string: String, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, 0, ignoreCase, last = true)\n    else\n        nativeLastIndexOf(string, startIndex)\n}\n\n/**\n * Returns `true` if this char sequence contains the specified [other] sequence of characters as a substring.\n *\n * @param ignoreCase `true` to ignore character case when comparing strings. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(other: CharSequence, ignoreCase: Boolean = false): Boolean =\n    if (other is String)\n        indexOf(other, ignoreCase = ignoreCase) >= 0\n    else\n        indexOf(other, 0, length, ignoreCase) >= 0\n\n\n\n/**\n * Returns `true` if this char sequence contains the specified character [char].\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(char: Char, ignoreCase: Boolean = false): Boolean =\n    indexOf(char, ignoreCase = ignoreCase) >= 0\n\n/**\n * Returns `true` if this char sequence contains at least one match of the specified regular expression [regex].\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharSequence.contains(regex: Regex): Boolean = regex.containsMatchIn(this)\n\n\n// rangesDelimitedBy\n\n\nprivate class DelimitedRangesSequence(\n    private val input: CharSequence,\n    private val startIndex: Int,\n    private val limit: Int,\n    private val getNextMatch: CharSequence.(currentIndex: Int) -> Pair<Int, Int>?\n) : Sequence<IntRange> {\n\n    override fun iterator(): Iterator<IntRange> = object : Iterator<IntRange> {\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var currentStartIndex: Int = startIndex.coerceIn(0, input.length)\n        var nextSearchIndex: Int = currentStartIndex\n        var nextItem: IntRange? = null\n        var counter: Int = 0\n\n        private fun calcNext() {\n            if (nextSearchIndex < 0) {\n                nextState = 0\n                nextItem = null\n            } else {\n                if (limit > 0 && ++counter >= limit || nextSearchIndex > input.length) {\n                    nextItem = currentStartIndex..input.lastIndex\n                    nextSearchIndex = -1\n                } else {\n                    val match = input.getNextMatch(nextSearchIndex)\n                    if (match == null) {\n                        nextItem = currentStartIndex..input.lastIndex\n                        nextSearchIndex = -1\n                    } else {\n                        val (index, length) = match\n                        nextItem = currentStartIndex until index\n                        currentStartIndex = index + length\n                        nextSearchIndex = currentStartIndex + if (length == 0) 1 else 0\n                    }\n                }\n                nextState = 1\n            }\n        }\n\n        override fun next(): IntRange {\n            if (nextState == -1)\n                calcNext()\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem as IntRange\n            // Clean next to avoid keeping reference on yielded instance\n            nextItem = null\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex ->\n        indexOfAny(delimiters, currentIndex, ignoreCase = ignoreCase).let { if (it < 0) null else it to 1 }\n    })\n}\n\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: Array<out String>, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" } )\n    val delimitersList = delimiters.asList()\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex -> findAnyOf(delimitersList, currentIndex, ignoreCase = ignoreCase, last = false)?.let { it.first to it.second.length } })\n\n}\n\n\n// split\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and matches at each position the first element in [delimiters]\n * that is equal to a delimiter in this instance at that position.\n */\npublic fun CharSequence.split(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        val delimiter = delimiters[0]\n        if (!delimiter.isEmpty()) {\n            return split(delimiter, ignoreCase, limit)\n        }\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.split(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        return split(delimiters[0].toString(), ignoreCase, limit)\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiter].\n * This is specialized version of split which receives single non-empty delimiter and offers better performance\n *\n * @param delimiter String used as delimiter\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\nprivate fun CharSequence.split(delimiter: String, ignoreCase: Boolean, limit: Int): List<String> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    var currentOffset = 0\n    var nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    if (nextIndex == -1 || limit == 1) {\n        return listOf(this.toString())\n    }\n\n    val isLimited = limit > 0\n    val result = ArrayList<String>(if (isLimited) limit.coerceAtMost(10) else 10)\n    do {\n        result.add(substring(currentOffset, nextIndex))\n        currentOffset = nextIndex + delimiter.length\n        // Do not search for next occurrence if we're reaching limit\n        if (isLimited && result.size == limit - 1) break\n        nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    } while (nextIndex != -1)\n\n    result.add(substring(currentOffset, length))\n    return result\n}\n\n/**\n * Splits this char sequence around matches of the given regular expression.\n *\n * @param limit Non-negative value specifying the maximum number of substrings to return.\n * Zero by default means no limit is set.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.split(regex: Regex, limit: Int = 0): List<String> = regex.split(this, limit)\n\n/**\n * Splits this char sequence to a sequence of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lineSequence(): Sequence<String> = splitToSequence(\"\\r\\n\", \"\\n\", \"\\r\")\n\n/**\n * Splits this char sequence to a list of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lines(): List<String> = lineSequence().toList()\n",null,null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#with).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#apply).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#also).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#let).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n *\n * @sample samples.misc.ControlFlow.repeat\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n",null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"LazyKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin\n\nimport kotlin.reflect.KProperty\n\n/**\n * Represents a value with lazy initialization.\n *\n * To create an instance of [Lazy] use the [lazy] function.\n */\npublic interface Lazy<out T> {\n    /**\n     * Gets the lazily initialized value of the current Lazy instance.\n     * Once the value was initialized it must not change during the rest of lifetime of this Lazy instance.\n     */\n    public val value: T\n\n    /**\n     * Returns `true` if a value for this Lazy instance has been already initialized, and `false` otherwise.\n     * Once this function has returned `true` it stays `true` for the rest of lifetime of this Lazy instance.\n     */\n    public fun isInitialized(): Boolean\n}\n\n/**\n * Creates a new instance of the [Lazy] that is already initialized with the specified [value].\n */\npublic fun <T> lazyOf(value: T): Lazy<T> = InitializedLazyImpl(value)\n\n/**\n * An extension to delegate a read-only property of type [T] to an instance of [Lazy].\n *\n * This extension allows to use instances of Lazy for property delegation:\n * `val property: String by lazy { initializer }`\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Lazy<T>.getValue(thisRef: Any?, property: KProperty<*>): T = value\n\n/**\n * Specifies how a [Lazy] instance synchronizes initialization among multiple threads.\n */\npublic enum class LazyThreadSafetyMode {\n\n    /**\n     * Locks are used to ensure that only a single thread can initialize the [Lazy] instance.\n     */\n    SYNCHRONIZED,\n\n    /**\n     * Initializer function can be called several times on concurrent access to uninitialized [Lazy] instance value,\n     * but only the first returned value will be used as the value of [Lazy] instance.\n     */\n    PUBLICATION,\n\n    /**\n     * No locks are used to synchronize an access to the [Lazy] instance value; if the instance is accessed from multiple threads, its behavior is undefined.\n     *\n     * This mode should not be used unless the [Lazy] instance is guaranteed never to be initialized from more than one thread.\n     */\n    NONE,\n}\n\n\ninternal object UNINITIALIZED_VALUE\n\n// internal to be called from lazy in JS\ninternal class UnsafeLazyImpl<out T>(initializer: () -> T) : Lazy<T>, Serializable {\n    private var initializer: (() -> T)? = initializer\n    private var _value: Any? = UNINITIALIZED_VALUE\n\n    override val value: T\n        get() {\n            if (_value === UNINITIALIZED_VALUE) {\n                _value = initializer!!()\n                initializer = null\n            }\n            @Suppress(\"UNCHECKED_CAST\")\n            return _value as T\n        }\n\n    override fun isInitialized(): Boolean = _value !== UNINITIALIZED_VALUE\n\n    override fun toString(): String = if (isInitialized()) value.toString() else \"Lazy value not initialized yet.\"\n\n    private fun writeReplace(): Any = InitializedLazyImpl(value)\n}\n\ninternal class InitializedLazyImpl<out T>(override val value: T) : Lazy<T>, Serializable {\n\n    override fun isInitialized(): Boolean = true\n\n    override fun toString(): String = value.toString()\n\n}\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n/**\n * Converts the characters in the specified array to a string.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun String(chars: CharArray): String {\n    var result = \"\"\n    for (char in chars) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Converts the characters from a portion of the specified array to a string.\n *\n * @throws IndexOutOfBoundsException if either [offset] or [length] are less than zero\n * or `offset + length` is out of [chars] array bounds.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun String(chars: CharArray, offset: Int, length: Int): String {\n    if (offset < 0 || length < 0 || chars.size - offset < length)\n        throw IndexOutOfBoundsException(\"size: ${chars.size}; offset: $offset; length: $length\")\n    var result = \"\"\n    for (index in offset until offset + length) {\n        result += chars[index]\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] into a String.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun CharArray.concatToString(): String {\n    var result = \"\"\n    for (char in this) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] or its subrange into a String.\n *\n * @param startIndex the beginning (inclusive) of the subrange of characters, 0 by default.\n * @param endIndex the end (exclusive) of the subrange of characters, size of this array by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun CharArray.concatToString(startIndex: Int = 0, endIndex: Int = this.size): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    var result = \"\"\n    for (index in startIndex until endIndex) {\n        result += this[index]\n    }\n    return result\n}\n\n/**\n * Returns a [CharArray] containing characters of this string.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun String.toCharArray(): CharArray {\n    return CharArray(length) { get(it) }\n}\n\n/**\n * Returns a [CharArray] containing characters of this string or its substring.\n *\n * @param startIndex the beginning (inclusive) of the substring, 0 by default.\n * @param endIndex the end (exclusive) of the substring, length of this string by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun String.toCharArray(startIndex: Int = 0, endIndex: Int = this.length): CharArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return CharArray(endIndex - startIndex) { get(startIndex + it) }\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array.\n *\n * Malformed byte sequences are replaced by the replacement char `\\uFFFD`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun ByteArray.decodeToString(): String {\n    return decodeUtf8(this, 0, size, false)\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array or its subrange.\n *\n * @param startIndex the beginning (inclusive) of the subrange to decode, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to decode, size of this array by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed byte sequence or replace it by the replacement char `\\uFFFD`.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if the byte array contains malformed UTF-8 byte sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun ByteArray.decodeToString(\n    startIndex: Int = 0,\n    endIndex: Int = this.size,\n    throwOnInvalidSequence: Boolean = false\n): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    return decodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Encodes this string to an array of bytes in UTF-8 encoding.\n *\n * Any malformed char sequence is replaced by the replacement byte sequence.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun String.encodeToByteArray(): ByteArray {\n    return encodeUtf8(this, 0, length, false)\n}\n\n/**\n * Encodes this string or its substring to an array of bytes in UTF-8 encoding.\n *\n * @param startIndex the beginning (inclusive) of the substring to encode, 0 by default.\n * @param endIndex the end (exclusive) of the substring to encode, length of this string by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed char sequence or replace.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if this string contains malformed char sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun String.encodeToByteArray(\n    startIndex: Int = 0,\n    endIndex: Int = this.length,\n    throwOnInvalidSequence: Boolean = false\n): ByteArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return encodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Returns a copy of this string converted to upper case using the rules of the default locale.\n *\n * @sample samples.text.Strings.toUpperCase\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toUpperCase(): String = asDynamic().toUpperCase()\n\n/**\n * Returns a copy of this string converted to lower case using the rules of the default locale.\n *\n * @sample samples.text.Strings.toLowerCase\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toLowerCase(): String = asDynamic().toLowerCase()\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeIndexOf(str: String, fromIndex: Int): Int = asDynamic().indexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeLastIndexOf(str: String, fromIndex: Int): Int = asDynamic().lastIndexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeStartsWith(s: String, position: Int): Boolean = asDynamic().startsWith(s, position)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeEndsWith(s: String): Boolean = asDynamic().endsWith(s)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int): String = asDynamic().substring(startIndex)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int, endIndex: Int): String = asDynamic().substring(startIndex, endIndex)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.concat(str: String): String = asDynamic().concat(str)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.match(regex: String): Array<String>? = asDynamic().match(regex)\n\n//native public fun String.trim(): String\n//TODO: String.replace to implement effective trimLeading and trimTrailing\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeReplace(pattern: RegExp, replacement: String): String = asDynamic().replace(pattern, replacement)\n\n@SinceKotlin(\"1.2\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.compareTo(other: String, ignoreCase: Boolean = false): Int {\n    if (ignoreCase) {\n        val n1 = this.length\n        val n2 = other.length\n        val min = minOf(n1, n2)\n        if (min == 0) return n1 - n2\n        var start = 0\n        while (true) {\n            val end = minOf(start + 16, min)\n            var s1 = this.substring(start, end)\n            var s2 = other.substring(start, end)\n            if (s1 != s2) {\n                s1 = s1.toUpperCase()\n                s2 = s2.toUpperCase()\n                if (s1 != s2) {\n                    s1 = s1.toLowerCase()\n                    s2 = s2.toLowerCase()\n                    if (s1 != s2) {\n                        return s1.compareTo(s2)\n                    }\n                }\n            }\n            if (end == min) break\n            start = end\n        }\n        return n1 - n2\n    } else {\n        return compareTo(other)\n    }\n}\n\n\nprivate val STRING_CASE_INSENSITIVE_ORDER = Comparator<String> { a, b -> a.compareTo(b, ignoreCase = true) }\n\n@SinceKotlin(\"1.2\")\npublic actual val String.Companion.CASE_INSENSITIVE_ORDER: Comparator<String>\n    get() = STRING_CASE_INSENSITIVE_ORDER\n",null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.random.Random\n\n/**\n * Removes a single instance of the specified element from this\n * collection, if it is present.\n *\n * Allows to overcome type-safety restriction of `remove` that requires to pass an element of type `E`.\n *\n * @return `true` if the element has been successfully removed; `false` if it was not present in the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.remove(element: T): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).remove(element)\n\n/**\n * Removes all of this collection's elements that are also contained in the specified collection.\n\n * Allows to overcome type-safety restriction of `removeAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any of the specified elements was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.removeAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).removeAll(elements)\n\n/**\n * Retains only the elements in this collection that are contained in the specified collection.\n *\n * Allows to overcome type-safety restriction of `retainAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any element was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.retainAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).retainAll(elements)\n\n/**\n * Adds the specified [element] to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(element: T) {\n    this.add(element)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Iterable<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] array to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Array<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Sequence<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Removes a single instance of the specified [element] from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(element: T) {\n    this.remove(element)\n}\n\n/**\n * Removes all elements contained in the given [elements] collection from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Iterable<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] array from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Array<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] sequence from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Sequence<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Iterable<T>): Boolean {\n    when (elements) {\n        is Collection -> return addAll(elements)\n        else -> {\n            var result: Boolean = false\n            for (item in elements)\n                if (add(item)) result = true\n            return result\n        }\n    }\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Sequence<T>): Boolean {\n    var result: Boolean = false\n    for (item in elements) {\n        if (add(item)) result = true\n    }\n    return result\n}\n\n/**\n * Adds all elements of the given [elements] array to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Array<out T>): Boolean {\n    return addAll(elements.asList())\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Iterable<T>): Boolean {\n    return removeAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    return set.isNotEmpty() && removeAll(set)\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Array<out T>): Boolean {\n    return elements.isNotEmpty() && removeAll(elements.toHashSet())\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Iterable<T>): Boolean {\n    return retainAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Array<out T>): Boolean {\n    if (elements.isNotEmpty())\n        return retainAll(elements.toHashSet())\n    else\n        return retainNothing()\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    if (set.isNotEmpty())\n        return retainAll(set)\n    else\n        return retainNothing()\n}\n\nprivate fun MutableCollection<*>.retainNothing(): Boolean {\n    val result = isNotEmpty()\n    clear()\n    return result\n}\n\n\n/**\n * Removes all elements from this [MutableIterable] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when no elements were removed and collection was not modified.\n */\npublic fun <T> MutableIterable<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableIterable] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when all elements were retained and collection was not modified.\n */\npublic fun <T> MutableIterable<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableIterable<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    var result = false\n    with(iterator()) {\n        while (hasNext())\n            if (predicate(next()) == predicateResultToRemove) {\n                remove()\n                result = true\n            }\n    }\n    return result\n}\n\n\n/**\n * Returns a new list with the elements of this list randomly shuffled\n * using the specified [random] instance as the source of randomness.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Iterable<T>.shuffled(random: Random): List<T> = toMutableList().apply { shuffle(random) }\n\n\n/**\n * Removes the element at the specified [index] from this list.\n * In Kotlin one should use the [MutableList.removeAt] function instead.\n */\n@Deprecated(\"Use removeAt(index) instead.\", ReplaceWith(\"removeAt(index)\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList<T>.remove(index: Int): T = removeAt(index)\n\n/**\n * Removes the first element from this mutable list and returns that removed element, or throws [NoSuchElementException] if this list is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> MutableList<T>.removeFirst(): T = if (isEmpty()) throw NoSuchElementException(\"List is empty.\") else removeAt(0)\n\n/**\n * Removes the first element from this mutable list and returns that removed element, or returns `null` if this list is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> MutableList<T>.removeFirstOrNull(): T? = if (isEmpty()) null else removeAt(0)\n\n/**\n * Removes the last element from this mutable list and returns that removed element, or throws [NoSuchElementException] if this list is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> MutableList<T>.removeLast(): T = if (isEmpty()) throw NoSuchElementException(\"List is empty.\") else removeAt(lastIndex)\n\n/**\n * Removes the last element from this mutable list and returns that removed element, or returns `null` if this list is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> MutableList<T>.removeLastOrNull(): T? = if (isEmpty()) null else removeAt(lastIndex)\n\n/**\n * Removes all elements from this [MutableList] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when no elements were removed and collection was not modified.\n */\npublic fun <T> MutableList<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableList] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when all elements were retained and collection was not modified.\n */\npublic fun <T> MutableList<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableList<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    if (this !is RandomAccess)\n        return (this as MutableIterable<T>).filterInPlace(predicate, predicateResultToRemove)\n\n    var writeIndex: Int = 0\n    for (readIndex in 0..lastIndex) {\n        val element = this[readIndex]\n        if (predicate(element) == predicateResultToRemove)\n            continue\n\n        if (writeIndex != readIndex)\n            this[writeIndex] = element\n\n        writeIndex++\n    }\n    if (writeIndex < size) {\n        for (removeIndex in lastIndex downTo writeIndex)\n            removeAt(removeIndex)\n\n        return true\n    } else {\n        return false\n    }\n}\n\n/**\n * Randomly shuffles elements in this mutable list using the specified [random] instance as the source of randomness.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> MutableList<T>.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n",null,null,null,null,null,null],"names":[],"mappings":"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yB;IAAA,qC;G;;EACA,8C;IAAA,yB;IAAA,sC;G;;EACA,0C;IAAA,yB;IAAA,kC;G;EAEA,kC;IAAA,sC;IAAmB,4BAA+B,qBAA/B,C;G;;;;;;;EAAnB,8C;IAAA,yB;IAAA,6C;MAAA,4B;KAAA,sC;G;;;;;;EARD,+B;IAAA,oH;G;;EAAA,oC;IAAA,a;MAAA,gB;QAAA,0C;MAAA,iB;QAAA,2C;MAAA,a;QAAA,uC;MAAA,QAAA,sE;;G;;EAasB,wC;IAHtB,e;IAGuB,sB;IAHvB,iB;IAAA,uB;G;EAAA,kC;IAAA,qC;K;IAIC,uDAAK,EAAL,C;IACA,yDAAM,CAAN,C;IACA,+DAAS,CAAT,C;IACA,uDAAK,CAAL,C;IACA,qEAAY,CAAZ,C;IACA,uDAAK,CAAL,C;IAEA,mC;G;;SARsB,Y;MAAA,wB;K;;;EACtB,wC;IAAA,wB;IAAA,gC;G;;EACA,yC;IAAA,wB;IAAA,iC;G;;EACA,4C;IAAA,wB;IAAA,oC;G;;EACA,wC;IAAA,wB;IAAA,gC;G;;EACA,+C;IAAA,wB;IAAA,uC;G;;EACA,wC;IAAA,wB;IAAA,gC;G;EAEA,iC;IAAA,qC;IAAmB,4BAA8B,oBAA9B,C;G;;;;;;;EAAnB,6C;IAAA,wB;IAAA,4C;MAAA,2B;KAAA,qC;G;;;;;;EAXD,8B;IAAA,mN;G;;EAAA,mC;IAAA,a;MAAA,Y;QAAA,qC;MAAA,a;QAAA,sC;MAAA,gB;QAAA,yC;MAAA,Y;QAAA,qC;MAAA,mB;QAAA,4C;MAAA,Y;QAAA,qC;MAAA,QAAA,qE;;G;;EAuB0B,4C;IAL1B,e;IAK2B,sB;IAL3B,iB;IAAA,uB;G;EAAA,sC;IAAA,yC;K;IAMC,+DAAK,EAAL,C;IACA,yEAAU,CAAV,C;IACA,qEAAQ,CAAR,C;IACA,qEAAQ,CAAR,C;IAEA,uC;G;;SAN0B,Y;MAAA,wB;K;;;EAC1B,4C;IAAA,4B;IAAA,oC;G;;EACA,iD;IAAA,4B;IAAA,yC;G;;EACA,+C;IAAA,4B;IAAA,uC;G;;EACA,+C;IAAA,4B;IAAA,uC;G;EAEA,qC;IAAA,yC;IAAmB,4BAAkC,wBAAlC,C;G;;;;;;;EAAnB,iD;IAAA,4B;IA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A,4D;G;;EAFA,uC;IAAA,uB;IAAA,+B;G;;EACA,2C;IAAA,uB;IAAA,mC;G;;EACA,2C;IAAA,uB;IAAA,mC;G;;;;;;EARD,6B;IAAA,4G;G;;EAAA,kC;IAAA,a;MAAA,Y;QAAA,oC;MAAA,gB;QAAA,wC;MAAA,gB;QAAA,wC;MAAA,QAAA,oE;;G;;EAoB+B,iD;IAL/B,e;IAKgC,sB;IALhC,iB;IAAA,uB;G;EAAA,2C;IAAA,8C;K;IAUC,mFAIU,CAJV,C;IASA,mFAIU,CAJV,C;IASA,mGAIkB,CAJlB,C;IASA,uEAII,CAJJ,C;IASA,6EAIO,CAJP,C;IAMA,4C;G;;SA/C+B,Y;MAAA,wB;K;;;EAK/B,sD;IAAA,iC;IAAA,8C;G;;EASA,sD;IAAA,iC;IAAA,8C;G;;EASA,8D;IAAA,iC;IAAA,sD;G;;EASA,gD;IAAA,iC;IAAA,wC;G;;EASA,mD;IAAA,iC;IAAA,2C;G;EAMA,0C;IAAA,8C;IAAmB,4BAAuC,6BAAvC,C;G;;;;;;;EAAnB,sD;IAAA,iC;IAAA,qD;MAAA,oC;KAAA,8C;G;;;;;;EApDD,uC;IAAA,4O;G;;EAAA,4C;IAAA,a;MAAA,iB;QAAA,mD;MAAA,iB;QAAA,mD;MAAA,yB;QAAA,2D;MAAA,W;QAAA,6C;MAAA,c;QAAA,gD;MAAA,QAAA,8E;;G;;EAsDA,2C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,yC;IAAA,4C;K;IAIC,oE;IACA,kE;G;;EADA,+C;IAAA,+B;IAAA,uC;G;;EACA,8C;IAAA,+B;IAAA,sC;G;;;;;;EALD,qC;IAAA,oF;G;;EAAA,0C;IAAA,a;MAAA,Y;QAAA,4C;MAAA,W;QAAA,2C;MAAA,QAAA,4E;;G;;EAOA,2C;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,yC;IAAA,4C;K;IAIC,4E;IACA,4E;G;;EADA,mD;IAAA,+B;IAAA,2C;G;;EACA,mD;IAAA,+B;IAAA,2C;G;;;;;;EALD,qC;IAAA,6F;G;;EAAA,0C;IAAA,a;MAAA,gB;QAAA,gD;MAAA,gB;QAAA,gD;MAAA,QAAA,4E;;G;;EAOA,uC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,qC;IAAA,wC;K;IAIC,wD;IACA,4D;G;;EADA,yC;IAAA,2B;IAAA,iC;G;;EACA,2C;IAAA,2B;IAAA,mC;G;;;;;;EALD,iC;IAAA,2E;G;;EAAA,sC;IAAA,a;MAAA,U;QAAA,sC;MAAA,Y;QAAA,wC;MAAA,QAAA,wE;;G;;EAOA,qC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,mC;IAAA,sC;K;IAIC,0D;IACA,8D;G;;EADA,0C;IAAA,yB;IAAA,kC;G;;EACA,4C;IAAA,yB;IAAA,oC;G;;;;;;EALD,+B;IAAA,6E;G;;EAAA,oC;IAAA,a;MAAA,a;QAAA,uC;MAAA,e;QAAA,yC;MAAA,QAAA,sE;;G;;EAOA,oC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,kC;IAAA,qC;K;IAIC,0D;IACA,wD;IACA,4D;G;;EAFA,0C;IAAA,wB;IAAA,kC;G;;EACA,yC;IAAA,wB;IAAA,iC;G;;EACA,2C;IAAA,wB;IAAA,mC;G;;;;;;EAND,8B;IAAA,6G;G;;EAAA,mC;IAAA,a;MAAA,c;QAAA,uC;MAAA,a;QAAA,sC;MAAA,e;QAAA,wC;MAAA,QAAA,qE;;G;;EAQA,mC;IAAA,e;IAAA,iB;IAAA,uB;G;EAAA,iC;IAAA,oC;K;IAIC,0D;IACA,sD;IACA,gE;G;;EAFA,0C;IAAA,uB;IAAA,kC;G;;EACA,wC;IAAA,uB;IAAA,gC;G;;EACA,6C;IAAA,uB;IAAA,qC;G;;;;;;EAND,6B;IAAA,8G;G;;EAAA,kC;IAAA,a;MAAA,e;QAAA,uC;MAAA,a;QAAA,qC;MAAA,kB;QAAA,0C;MAAA,QAAA,oE;;G;;EAiBiB,mC;IAChB,mC;IAQA,gBAAiC,iB;IACjC,uBAE8C,Y;G;EAX9C,iC;IAAA,qC;IACC,eAA4B,S;IAE5B,aAAqB,I;IACrB,aAAqB,K;IACrB,iBAAyB,K;G;;;;;;;EAL1B,6C;IAAA,4C;MAAA,2B;KAAA,qC;G;;SA+DsB,Y;MAAQ,OAAA,IAAK,S;K;;;SAEA,Y;MAAQ,OAAA,IAAK,gB;K;;;;;;;ECjVhC,2B;IAChB,mC;IADwD,sBAAW,IAAX,C;IAsIxD,YAKmB,G;IAMnB,YAK4B,E;IAM5B,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B,CAAlC,C;MACW,KAAV,SAAU,EAAK,QAAL,C;KAEZ,C;0DAEA,kC;IAI0C,gBAAzB,IAAK,oB;IAAoB,mB;;M1B9MvC,UDpCsF,c2BkPtC,Y3BlPsC,C;MCqCtF,IAAI,WAAJ,C;QAAiB,kBAAO,G;QAAP,oB;OACjB,UZgBgD,gB;MWpDvB,c2BgPuB,Y3BhPvB,ECqChB,GDrCgB,C;MCsCzB,kBAAO,G;;;I0B0MT,+B;IACA,IAAI,SAAU,eAAQ,QAAR,CAAV,GAA8B,CAAlC,C;MACW,KAAV,SAAU,EAAK,QAAL,C;KAEZ,C;yDAEA,kC;IAIyC,gBAAxB,IAAK,mB;IAAmB,mB;;M1BxNtC,UDpCsF,c2B4PvC,Y3B5PuC,C;MCqCtF,IAAI,WAAJ,C;QAAiB,kBAAO,G;QAAP,oB;OACjB,UZgBgD,gB;MWpDvB,c2B0PsB,Y3B1PtB,ECqChB,GDrCgB,C;MCsCzB,kBAAO,G;;;I0BoNT,+B;IACA,IAAI,SAAU,eAAQ,QAAR,CAAV,GAA8B,CAAlC,C;MACW,KAAV,SAAU,EAAK,QAAL,C;KAEZ,C;qDAEA,wB;IAGuE,OAAA,IAAK,c3BrQa,K2BqQC,Y3BrQD,C;G;qD2BuQzF,wB;IAGuE,OAAA,IAAK,c3B1Qa,K2B0QC,Y3B1QD,C;G;2D2B4QzF,wB;IAG6E,OAAA,IAAK,oB3B/QO,K2B+Qa,Y3B/Qb,C;G;0D2BiRzF,wB;IAG4E,OAAA,IAAK,mB3BpRQ,K2BoRW,Y3BpRX,C;G;8D2BsRzF,oB;IAGkE,OAAA,IAAK,uB3BzRkB,K2ByRK,Q3BzRL,C;G;8D2B2RzF,oB;IAGkE,OAAA,IAAK,uB3B9RkB,K2B8RK,Q3B9RL,C;G;;;;;;E2BmSnE,4B;IAA6C,sBAAW,IAAX,C;IAKnE,8C;IACA,cAAkB,C;IAClB,0BAA8B,E;G;oCAN9B,Y;IACC,OAAO,kC;EACR,C;oCAMA,Y;IACC,8C;IACA,cAAc,C;IACd,0BAA0B,E;EAC3B,C;;;;;;EAK0B,qC;IAAmD,wBAAa,IAAb,C;IAK7E,SAAgB,G;IAChB,SAAgB,G;G;6CALhB,Y;IACC,OAAO,2C;EACR,C;6CAKA,Y;IACO,0C;IAEN,SAAS,G;IACT,SAAS,G;EA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"}