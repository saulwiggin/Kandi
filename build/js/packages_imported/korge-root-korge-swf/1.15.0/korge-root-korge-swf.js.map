{"version":3,"file":"korge-root-korge-swf.js","sources":["collections/Collections.kt","generated/_Collections.kt","../../../../../korge-swf/src/commonMain/kotlin/com/soywiz/korfl/AMF0.kt","collections/Maps.kt","util/Preconditions.kt","util/Standard.kt","kotlin/math.kt","kotlin/UShort.kt","../../../../../korma/src/commonMain/kotlin/com/soywiz/korma/geom/Point.kt","../../../../../korge-swf/src/commonMain/kotlin/com/soywiz/korfl/as3swf/tags.kt","kotlin/Comparator.kt","collections/MutableCollections.kt","../../../../../korge-swf/src/commonMain/kotlin/com/soywiz/korfl/as3swf/utils.kt","../../../../../kmem/src/commonMain/kotlin/com/soywiz/kmem/Bits.kt","../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/_Delegates.kt","collections/Sets.kt","../../../../../kmem/src/commonMain/kotlin/com/soywiz/kmem/ArrayFill.kt","arrayUtils.kt","../../../../../korge-swf/src/commonMain/kotlin/com/soywiz/korfl/ABC.kt","util/Lazy.kt","../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/_Extensions.kt","../../../../../korge-swf/src/commonMain/kotlin/com/soywiz/korfl/AMF3.kt","../../../../../korge-swf/src/commonMain/kotlin/com/soywiz/korfl/AbcConstantPool.kt","../../../../../korge-swf/src/commonMain/kotlin/com/soywiz/korfl/AbcOpcode.kt","generated/_Arrays.kt","../../../../../korge-swf/src/commonMain/kotlin/com/soywiz/korfl/AbcUtil.kt","../../../../../korge-swf/src/commonMain/kotlin/com/soywiz/korfl/Undefined.kt","../../../../../korge-swf/src/commonMain/kotlin/com/soywiz/korfl/as3swf/MatrixExt.kt","../../../../../korge-swf/src/commonMain/kotlin/com/soywiz/korfl/as3swf/actions.kt","text/Strings.kt","../../../../../korge-swf/src/commonMain/kotlin/com/soywiz/korfl/as3swf/as3swf.kt","../../../../../korge-swf/src/commonMain/kotlin/com/soywiz/korfl/as3swf/consts.kt","../../../../../korge-swf/src/commonMain/kotlin/com/soywiz/korfl/as3swf/data.kt","../../../../../korge-swf/src/commonMain/kotlin/com/soywiz/korfl/as3swf/etc.kt","../../../../../korge-swf/src/commonMain/kotlin/com/soywiz/korfl/as3swf/exporters.kt","../../../../../korge-swf/src/commonMain/kotlin/com/soywiz/korfl/as3swf/factories.kt","../../../../../korge-swf/src/commonMain/kotlin/com/soywiz/korfl/as3swf/filters.kt","comparisons/Comparisons.kt","../../../../../korge-swf/src/commonMain/kotlin/com/soywiz/korfl/as3swf/timeline.kt","kotlin/numbers_js-v1.kt","../../../../../korge-swf/src/commonMain/kotlin/com/soywiz/korge/ext/fla/Fla.kt","../../../../../korge-swf/src/commonMain/kotlin/com/soywiz/korge/ext/swf/AtlasFactory.kt","../../../../../korge-swf/src/commonMain/kotlin/com/soywiz/korge/ext/swf/SWFShapeRasterizer.kt","../../../../../korge-swf/src/commonMain/kotlin/com/soywiz/korge/ext/swf/Swf.kt","../../../../../korge-swf/src/commonMain/kotlin/com/soywiz/korge/ext/swf/SwfLoaderMethod.kt","../../../../../korio/src/commonMain/kotlin/com/soywiz/korio/lang/Exceptions.kt","../../../../../korge-swf/src/commonMain/kotlin/com/soywiz/korge/ext/swf/SwfPlugin.kt"],"sourcesContent":["/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n@file:UseExperimental(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean) : Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/**\n * Returns a new read-only list of given elements.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.readOnlyList\n */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/**\n * Returns an empty new [MutableList].\n * @sample samples.collections.Collections.Lists.emptyMutableList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/**\n * Returns an empty new [ArrayList].\n * @sample samples.collections.Collections.Lists.emptyArrayList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/**\n * Returns a new [MutableList] with the given elements.\n * @sample samples.collections.Collections.Lists.mutableList\n */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new [ArrayList] with the given elements.\n * @sample samples.collections.Collections.Lists.arrayList\n */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new read-only list either of single given element, if it is not null, or empty list if the element is null. The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/**\n * Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.readOnlyListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.mutableListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * @sample samples.collections.Builders.Lists.buildListSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(@BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return ArrayList<E>().apply(builderAction)\n}\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of elements added in the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Lists.buildListSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(capacity: Int, @BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    checkBuilderCapacity(capacity)\n    return ArrayList<E>(capacity).apply(builderAction)\n}\n\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n * @sample samples.collections.Collections.Collections.indicesOfCollection\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/**\n * Returns `true` if the collection is not empty.\n * @sample samples.collections.Collections.Collections.collectionIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable collection is either null or empty.\n * @sample samples.collections.Collections.Collections.collectionIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.isEmpty()\n}\n\n/**\n * Returns this Collection if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Collections.collectionOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/**\n * Returns this List if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Lists.listOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/**\n * Returns this collection if it's not empty\n * or the result of calling [defaultValue] function if the collection is empty.\n *\n * @sample samples.collections.Collections.Collections.collectionIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : Collection<*>, C : R =\n    if (isEmpty()) defaultValue() else this\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n * @sample samples.collections.Collections.Collections.collectionContainsAll\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchOnComparable\n * @sample samples.collections.Collections.Lists.binarySearchWithBoundaries\n */\npublic fun <T : Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n * @sample samples.collections.Collections.Lists.binarySearchWithComparator\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchByKey\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(\n    key: K?,\n    fromIndex: Int = 0,\n    toIndex: Int = size,\n    crossinline selector: (T) -> K?\n): Int =\n    binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which the given [comparison] function returns zero using the binary search algorithm.\n *\n * The list is expected to be sorted so that the signs of the [comparison] function's return values ascend on the list elements,\n * i.e. negative values come before zero and zeroes come before positive values.\n * Otherwise, the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that returns zero when called on the list element being searched.\n * On the elements coming before the target element, the function must return negative values;\n * on the elements coming after the target element, the function must return positive values.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchWithComparisonFunction\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkIndexOverflow(index: Int): Int\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkCountOverflow(count: Int): Int\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwIndexOverflow() { throw ArithmeticException(\"Index overflow has happened.\") }\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwCountOverflow() { throw ArithmeticException(\"Count overflow has happened.\") }\n\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 1.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 2.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 3.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 4.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 5.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this collection.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Collection<T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Collection is empty.\")\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this collection, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> Collection<T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n until size)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count >= n) list.add(item) else ++count\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n until size)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic expect fun <T> MutableList<T>.reverse(): Unit\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associate\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateBy\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateByWithValueTransform\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given collection and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Iterable<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given collection,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original collection\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this collection and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the collection is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the list is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> List<T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        return null\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Iterable<T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Iterable<T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var index = 0\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(index++, accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.scanReduce(operation: (acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.scanReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    var index = 1\n    while (iterator.hasNext()) {\n        accumulator = operation(index++, accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Iterables.Operations.partition\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<List<T>>(resultCapacity)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<R>(resultCapacity)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (!partialWindows && windowSize < size) break\n            window.move(index, index + windowSize)\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] collection with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n",null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n@file:UseExperimental(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\nprivate object EmptyMap : Map<Any?, Nothing>, Serializable {\n    private const val serialVersionUID: Long = 8246714829545688274\n\n    override fun equals(other: Any?): Boolean = other is Map<*, *> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"{}\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n\n    override fun containsKey(key: Any?): Boolean = false\n    override fun containsValue(value: Nothing): Boolean = false\n    override fun get(key: Any?): Nothing? = null\n    override val entries: Set<Map.Entry<Any?, Nothing>> get() = EmptySet\n    override val keys: Set<Any?> get() = EmptySet\n    override val values: Collection<Nothing> get() = EmptyList\n\n    private fun readResolve(): Any = EmptyMap\n}\n\n/**\n * Returns an empty read-only map of specified type.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\npublic fun <K, V> emptyMap(): Map<K, V> = @Suppress(\"UNCHECKED_CAST\") (EmptyMap as Map<K, V>)\n\n/**\n * Returns a new read-only map with the specified contents, given as a list of pairs\n * where the first value is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V> =\n    if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap()\n\n/**\n * Returns an empty read-only map.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mapOf(): Map<K, V> = emptyMap()\n\n/**\n * Returns an empty new [MutableMap].\n *\n * The returned map preserves the entry iteration order.\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mutableMapOf(): MutableMap<K, V> = LinkedHashMap()\n\n/**\n * Returns a new [MutableMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.mutableMapFromPairs\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\npublic fun <K, V> mutableMapOf(vararg pairs: Pair<K, V>): MutableMap<K, V> =\n    LinkedHashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [HashMap].\n *\n * @sample samples.collections.Maps.Instantiation.emptyHashMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> hashMapOf(): HashMap<K, V> = HashMap<K, V>()\n\n/**\n * Returns a new [HashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * @sample samples.collections.Maps.Instantiation.hashMapFromPairs\n */\npublic fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V> = HashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [LinkedHashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> linkedMapOf(): LinkedHashMap<K, V> = LinkedHashMap<K, V>()\n\n/**\n * Returns a new [LinkedHashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.linkedMapFromPairs\n */\npublic fun <K, V> linkedMapOf(vararg pairs: Pair<K, V>): LinkedHashMap<K, V> = pairs.toMap(LinkedHashMap(mapCapacity(pairs.size)))\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(@BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return LinkedHashMap<K, V>().apply(builderAction)\n}\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of pairs added in the [builderAction].\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(capacity: Int, @BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    checkBuilderCapacity(capacity)\n    return LinkedHashMap<K, V>(mapCapacity(capacity)).apply(builderAction)\n}\n\n/**\n * Calculate the initial capacity of a map.\n */\n@PublishedApi\ninternal expect fun mapCapacity(expectedSize: Int): Int\n\n/**\n * Checks a collection builder function capacity argument.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@PublishedApi\ninternal expect fun checkBuilderCapacity(capacity: Int)\n\n/**\n * Returns `true` if this map is not empty.\n * @sample samples.collections.Maps.Usage.mapIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable map is either null or empty.\n * @sample samples.collections.Maps.Usage.mapIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || isEmpty()\n}\n\n/**\n * Returns the [Map] if its not `null`, or the empty [Map] otherwise.\n *\n * @sample samples.collections.Maps.Usage.mapOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>?.orEmpty(): Map<K, V> = this ?: emptyMap()\n\n/**\n * Returns this map if it's not empty\n * or the result of calling [defaultValue] function if the map is empty.\n *\n * @sample samples.collections.Maps.Usage.mapIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <M, R> M.ifEmpty(defaultValue: () -> R): R where M : Map<*, *>, M : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Checks if the map contains the given key.\n *\n * This method allows to use the `x in map` syntax for checking whether an object is contained in the map.\n *\n * @sample samples.collections.Maps.Usage.containsKey\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K): Boolean = containsKey(key)\n\n/**\n * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.get(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, V>).get(key)\n\n/**\n * Allows to use the index operator for storing values in a mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit {\n    put(key, value)\n}\n\n/**\n * Returns `true` if the map contains the specified [key].\n *\n * Allows to overcome type-safety restriction of `containsKey` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K> Map<out K, *>.containsKey(key: K): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, *>).containsKey(key)\n\n/**\n * Returns `true` if the map maps one or more keys to the specified [value].\n *\n * Allows to overcome type-safety restriction of `containsValue` that requires to pass a value of type `V`.\n *\n * @sample samples.collections.Maps.Usage.containsValue\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <K, @kotlin.internal.OnlyInputTypes V> Map<K, V>.containsValue(value: V): Boolean = this.containsValue(value)\n\n\n/**\n * Removes the specified key and its corresponding value from this map.\n *\n * @return the previous value associated with the key, or `null` if the key was not present in the map.\n\n * Allows to overcome type-safety restriction of `remove` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K, V> MutableMap<out K, V>.remove(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableMap<K, V>).remove(key)\n\n/**\n * Returns the key component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component1(): K = key\n\n/**\n * Returns the value component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component2(): V = value\n\n/**\n * Converts entry to [Pair] with key being first component and value being second.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map.Entry<K, V>.toPair(): Pair<K, V> = Pair(key, value)\n\n/**\n * Returns the value for the given key, or the result of the [defaultValue] function if there was no entry for the given key.\n *\n * @sample samples.collections.Maps.Usage.getOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>.getOrElse(key: K, defaultValue: () -> V): V = get(key) ?: defaultValue()\n\n\ninternal inline fun <K, V> Map<K, V>.getOrElseNullable(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    if (value == null && !containsKey(key)) {\n        return defaultValue()\n    } else {\n        @Suppress(\"UNCHECKED_CAST\")\n        return value as V\n    }\n}\n\n/**\n * Returns the value for the given [key] or throws an exception if there is no such key in the map.\n *\n * If the map was created by [withDefault], resorts to its `defaultValue` provider function\n * instead of throwing an exception.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and\n * no implicit default value was provided for that map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<K, V>.getValue(key: K): V = getOrImplicitDefault(key)\n\n/**\n * Returns the value for the given key. If the key is not found in the map, calls the [defaultValue] function,\n * puts its result into the map under the given key and returns it.\n *\n * Note that the operation is not guaranteed to be atomic if the map is being modified concurrently.\n *\n * @sample samples.collections.Maps.Usage.getOrPut\n */\npublic inline fun <K, V> MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    return if (value == null) {\n        val answer = defaultValue()\n        put(key, answer)\n        answer\n    } else {\n        value\n    }\n}\n\n/**\n * Returns an [Iterator] over the entries in the [Map].\n *\n * @sample samples.collections.Maps.Usage.forOverEntries\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map<out K, V>.iterator(): Iterator<Map.Entry<K, V>> = entries.iterator()\n\n/**\n * Returns a [MutableIterator] over the mutable entries in the [MutableMap].\n *\n */\n@kotlin.jvm.JvmName(\"mutableIterator\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.iterator(): MutableIterator<MutableMap.MutableEntry<K, V>> = entries.iterator()\n\n/**\n * Populates the given [destination] map with entries having the keys of this map and the values obtained\n * by applying the [transform] function to each entry in this [Map].\n */\npublic inline fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, { it.key }, transform)\n}\n\n/**\n * Populates the given [destination] map with entries having the keys obtained\n * by applying the [transform] function to each entry in this [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n */\npublic inline fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, transform, { it.value })\n}\n\n/**\n * Puts all the given [pairs] into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Array<out Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given collection into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Iterable<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given sequence into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Sequence<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Returns a new map with entries having the keys of this map and the values obtained by applying the [transform]\n * function to each entry in this [Map].\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapValues\n */\npublic inline fun <K, V, R> Map<out K, V>.mapValues(transform: (Map.Entry<K, V>) -> R): Map<K, R> {\n    return mapValuesTo(LinkedHashMap<K, R>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a new Map with entries having the keys obtained by applying the [transform] function to each entry in this\n * [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapKeys\n */\npublic inline fun <K, V, R> Map<out K, V>.mapKeys(transform: (Map.Entry<K, V>) -> R): Map<R, V> {\n    return mapKeysTo(LinkedHashMap<R, V>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a map containing all key-value pairs with keys matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterKeys\n */\npublic inline fun <K, V> Map<out K, V>.filterKeys(predicate: (K) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.key)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n/**\n * Returns a map containing all key-value pairs with values matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n *  @sample samples.collections.Maps.Filtering.filterValues\n */\npublic inline fun <K, V> Map<out K, V>.filterValues(predicate: (V) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.value)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n\n/**\n * Appends all entries matching the given [predicate] into the mutable map given as [destination] parameter.\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filter\n */\npublic inline fun <K, V> Map<out K, V>.filter(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Appends all entries not matching the given [predicate] into the given [destination].\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterNotTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (!predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs not matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterNot\n */\npublic inline fun <K, V> Map<out K, V>.filterNot(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterNotTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Returns a new map containing all key-value pairs from the given collection of pairs.\n *\n * The returned map preserves the entry iteration order of the original collection.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyMap()\n            1 -> mapOf(if (this is List) this[0] else iterator().next())\n            else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n        }\n    }\n    return toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given collection of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given array of pairs.\n *\n * The returned map preserves the entry iteration order of the original array.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> mapOf(this[0])\n    else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n}\n\n/**\n *  Populates and returns the [destination] mutable map with key-value pairs from the given array of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given sequence of pairs.\n *\n * The returned map preserves the entry iteration order of the original sequence.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V> = toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given sequence of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new read-only map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMap()\n    else -> toMutableMap()\n}\n\n/**\n * Returns a new mutable map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V> = LinkedHashMap(this)\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Creates a new read-only map by replacing or adding an entry to this map from a given key-value [pair].\n *\n * The returned map preserves the entry iteration order of the original map.\n * The [pair] is iterated in the end if it has a unique key.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pair: Pair<K, V>): Map<K, V> =\n    if (this.isEmpty()) mapOf(pair) else LinkedHashMap(this).apply { put(pair.first, pair.second) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] collection.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Iterable<Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given array of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] array.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Array<out Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] sequence.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Sequence<Pair<K, V>>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(pairs) }.optimizeReadOnlyMap()\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from another [map].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those entries of another [map] that are missing in this map are iterated in the end in the order of that [map].\n */\npublic operator fun <K, V> Map<out K, V>.plus(map: Map<out K, V>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(map) }\n\n\n/**\n * Appends or replaces the given [pair] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pair: Pair<K, V>) {\n    put(pair.first, pair.second)\n}\n\n/**\n * Appends or replaces all pairs from the given collection of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Iterable<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given array of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Array<out Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given sequence of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Sequence<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all entries from the given [map] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(map: Map<K, V>) {\n    putAll(map)\n}\n\n/**\n * Returns a map containing all entries of the original map except the entry with the given [key].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(key) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] collection.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Iterable<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] array.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Array<out K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] sequence.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Sequence<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Removes the entry with the given [key] from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(key: K) {\n    remove(key)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] collection from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Iterable<K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] array from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Array<out K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries from the keys of which are contained in the given [keys] sequence from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Sequence<K>) {\n    this.keys.removeAll(keys)\n}\n\n\n// do not expose for now @PublishedApi\ninternal fun <K, V> Map<K, V>.optimizeReadOnlyMap() = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMapOrSelf()\n    else -> this\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"PreconditionsKt\")\n\npackage kotlin\n\nimport kotlin.contracts.contract\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    require(value) { \"Failed requirement.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is null. Otherwise returns the not null value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return requireNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    } else {\n        return value\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    check(value) { \"Check failed.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return checkNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage]  if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    } else {\n        return value\n    }\n}\n\n\n/**\n * Throws an [IllegalStateException] with the given [message].\n *\n * @sample samples.misc.Preconditions.failWithError\n */\n@kotlin.internal.InlineOnly\npublic inline fun error(message: Any): Nothing = throw IllegalStateException(message.toString())\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#with).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#apply).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#also).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#let).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n *\n * @sample samples.misc.ControlFlow.repeat\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:Suppress(\"DEPRECATION\", \"DEPRECATION_ERROR\")\npackage kotlin.math\n\n\nimport kotlin.internal.InlineOnly\nimport kotlin.js.Math as nativeMath\n\n\n// region ================ Double Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Double): Double = nativeMath.sin(x)\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Double): Double = nativeMath.cos(x)\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Double): Double = nativeMath.tan(x)\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Double): Double = nativeMath.asin(x)\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Double): Double = nativeMath.acos(x)\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Double): Double = nativeMath.atan(x)\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Double, x: Double): Double = nativeMath.atan2(y, x)\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Double): Double = nativeMath.sinh(x)\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Double): Double = nativeMath.cosh(x)\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Double): Double = nativeMath.tanh(x)\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Double): Double = nativeMath.asinh(x)\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Double): Double = nativeMath.acosh(x)\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Double): Double = nativeMath.atanh(x)\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Double, y: Double): Double = nativeMath.hypot(x, y)\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Double): Double = nativeMath.sqrt(x)\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Double): Double = nativeMath.exp(x)\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Double): Double = nativeMath.expm1(x)\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun log(x: Double, base: Double): Double {\n    if (base <= 0.0 || base == 1.0) return Double.NaN\n    return nativeMath.log(x) / nativeMath.log(base)\n}\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Double): Double = nativeMath.log(x)\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Double): Double = nativeMath.log10(x)\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Double): Double = nativeMath.log2(x)\n\n/**\n * Computes `ln(x + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Double): Double = nativeMath.log1p(x)\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest double value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Double): Double = nativeMath.ceil(x).unsafeCast<Double>() // TODO: Remove unsafe cast after removing public js.math\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest double value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Double): Double = nativeMath.floor(x).unsafeCast<Double>()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Double): Double = nativeMath.trunc(x)\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun round(x: Double): Double {\n    if (x % 0.5 != 0.0) {\n        return nativeMath.round(x).unsafeCast<Double>()\n    }\n    val floor = floor(x)\n    return if (floor % 2 == 0.0) floor else ceil(x)\n}\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Double]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Double): Double = nativeMath.abs(x)\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Double): Double = nativeMath.sign(x)\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Double, b: Double): Double = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Double, b: Double): Double = nativeMath.max(a, b)\n\n// extensions\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(x: Double): Double = nativeMath.pow(this, x)\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(n: Int): Double = nativeMath.pow(this, n.toDouble())\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.absoluteValue: Double get() = nativeMath.abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.sign: Double get() = nativeMath.sign(this)\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.withSign(sign: Int): Double = this.withSign(sign.toDouble())\n\n/**\n * Returns the ulp (unit in the last place) of this value.\n *\n * An ulp is a positive distance between this value and the next nearest [Double] value larger in magnitude.\n *\n * Special Cases:\n *   - `NaN.ulp` is `NaN`\n *   - `x.ulp` is `+Inf` when `x` is `+Inf` or `-Inf`\n *   - `0.0.ulp` is `Double.MIN_VALUE`\n */\n@SinceKotlin(\"1.2\")\npublic actual val Double.ulp: Double get() = when {\n    this < 0 -> (-this).ulp\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == Double.MAX_VALUE -> this - this.nextDown()\n    else -> this.nextUp() - this\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of positive infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextUp(): Double = when {\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == 0.0 -> Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) 1 else -1)\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of negative infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextDown(): Double = when {\n    this.isNaN() || this == Double.NEGATIVE_INFINITY -> this\n    this == 0.0 -> -Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) -1 else 1)\n}\n\n\n/**\n * Returns the [Double] value nearest to this value in direction from this value towards the value [to].\n *\n * Special cases:\n *   - `x.nextTowards(y)` is `NaN` if either `x` or `y` are `NaN`\n *   - `x.nextTowards(x) == x`\n *\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextTowards(to: Double): Double = when {\n    this.isNaN() || to.isNaN() -> Double.NaN\n    to == this -> to\n    to > this -> this.nextUp()\n    else /* to < this */ -> this.nextDown()\n}\n\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToInt(): Int = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Int.MAX_VALUE -> Int.MAX_VALUE\n    this < Int.MIN_VALUE -> Int.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toInt()\n}\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToLong(): Long = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Long.MAX_VALUE -> Long.MAX_VALUE\n    this < Long.MIN_VALUE -> Long.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toLong()\n}\n\n// endregion\n\n\n\n// region ================ Float Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Float): Float = nativeMath.sin(x.toDouble()).toFloat()\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Float): Float = nativeMath.cos(x.toDouble()).toFloat()\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Float): Float = nativeMath.tan(x.toDouble()).toFloat()\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Float): Float = nativeMath.asin(x.toDouble()).toFloat()\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Float): Float = nativeMath.acos(x.toDouble()).toFloat()\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Float): Float = nativeMath.atan(x.toDouble()).toFloat()\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Float, x: Float): Float = nativeMath.atan2(y.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Float): Float = nativeMath.sinh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Float): Float = nativeMath.cosh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Float): Float = nativeMath.tanh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Float): Float = nativeMath.asinh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Float): Float = nativeMath.acosh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Float): Float = nativeMath.atanh(x.toDouble()).toFloat()\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Float, y: Float): Float = nativeMath.hypot(x.toDouble(), y.toDouble()).toFloat()\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Float): Float = nativeMath.sqrt(x.toDouble()).toFloat()\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Float): Float = nativeMath.exp(x.toDouble()).toFloat()\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Float): Float = nativeMath.expm1(x.toDouble()).toFloat()\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log(x: Float, base: Float): Float = log(x.toDouble(), base.toDouble()).toFloat()\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Float): Float = nativeMath.log(x.toDouble()).toFloat()\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Float): Float = nativeMath.log10(x.toDouble()).toFloat()\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Float): Float = nativeMath.log2(x.toDouble()).toFloat()\n\n/**\n * Computes `ln(a + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Float): Float = nativeMath.log1p(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest Float value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Float): Float = nativeMath.ceil(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest Float value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Float): Float = nativeMath.floor(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Float): Float = truncate(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun round(x: Float): Float = round(x.toDouble()).toFloat()\n\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Float]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Float): Float = nativeMath.abs(x.toDouble()).toFloat()\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Float): Float = nativeMath.sign(x.toDouble()).toFloat()\n\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Float, b: Float): Float = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Float, b: Float): Float = nativeMath.max(a, b)\n\n// extensions\n\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(x: Float): Float = nativeMath.pow(this.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(n: Int): Float = nativeMath.pow(this.toDouble(), n.toDouble()).toFloat()\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.absoluteValue: Float get() = nativeMath.abs(this.toDouble()).toFloat()\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.sign: Float get() = nativeMath.sign(this.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Float): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Int): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToInt(): Int = toDouble().roundToInt()\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToLong(): Long = toDouble().roundToLong()\n\n\n// endregion\n\n// region ================ Integer Math ========================================\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Int.MIN_VALUE)` is `Int.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Int]\n */\n// TODO: remove manual 'or' when KT-19290 is fixed\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Int): Int = if (n < 0) (-n or 0) else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Int, b: Int): Int = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Int, b: Int): Int = nativeMath.max(a, b)\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Int.MIN_VALUE.absoluteValue` is `Int.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Int.absoluteValue: Int get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Int.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Long.MIN_VALUE)` is `Long.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Long]\n */\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Long): Long = if (n < 0) -n else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun min(a: Long, b: Long): Long = if (a <= b) a else b\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun max(a: Long, b: Long): Long = if (a >= b) a else b\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Long.MIN_VALUE.absoluteValue` is `Long.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Long.absoluteValue: Long get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Long.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n// endregion\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\nimport kotlin.experimental.*\n\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline class UShort @PublishedApi internal constructor(@PublishedApi internal val data: Short) : Comparable<UShort> {\n\n    companion object {\n        /**\n         * A constant holding the minimum value an instance of UShort can have.\n         */\n        public const val MIN_VALUE: UShort = UShort(0)\n\n        /**\n         * A constant holding the maximum value an instance of UShort can have.\n         */\n        public const val MAX_VALUE: UShort = UShort(-1)\n\n        /**\n         * The number of bytes used to represent an instance of UShort in a binary form.\n         */\n        public const val SIZE_BYTES: Int = 2\n\n        /**\n         * The number of bits used to represent an instance of UShort in a binary form.\n         */\n        public const val SIZE_BITS: Int = 16\n    }\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UByte): Int = this.toInt().compareTo(other.toInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    @Suppress(\"OVERRIDE_BY_INLINE\")\n    public override inline operator fun compareTo(other: UShort): Int = this.toInt().compareTo(other.toInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UInt): Int = this.toUInt().compareTo(other)\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: ULong): Int = this.toULong().compareTo(other)\n\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UByte): UInt = this.toUInt().plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UShort): UInt = this.toUInt().plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UInt): UInt = this.toUInt().plus(other)\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: ULong): ULong = this.toULong().plus(other)\n\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UByte): UInt = this.toUInt().minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UShort): UInt = this.toUInt().minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UInt): UInt = this.toUInt().minus(other)\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: ULong): ULong = this.toULong().minus(other)\n\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UByte): UInt = this.toUInt().times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UShort): UInt = this.toUInt().times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UInt): UInt = this.toUInt().times(other)\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: ULong): ULong = this.toULong().times(other)\n\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UByte): UInt = this.toUInt().div(other.toUInt())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UShort): UInt = this.toUInt().div(other.toUInt())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UInt): UInt = this.toUInt().div(other)\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: ULong): ULong = this.toULong().div(other)\n\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UByte): UInt = this.toUInt().rem(other.toUInt())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UShort): UInt = this.toUInt().rem(other.toUInt())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UInt): UInt = this.toUInt().rem(other)\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: ULong): ULong = this.toULong().rem(other)\n\n    /** Increments this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun inc(): UShort = UShort(data.inc())\n    /** Decrements this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun dec(): UShort = UShort(data.dec())\n\n    /** Creates a range from this value to the specified [other] value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rangeTo(other: UShort): UIntRange = UIntRange(this.toUInt(), other.toUInt())\n\n    /** Performs a bitwise AND operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun and(other: UShort): UShort = UShort(this.data and other.data)\n    /** Performs a bitwise OR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun or(other: UShort): UShort = UShort(this.data or other.data)\n    /** Performs a bitwise XOR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun xor(other: UShort): UShort = UShort(this.data xor other.data)\n    /** Inverts the bits in this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun inv(): UShort = UShort(data.inv())\n\n    /**\n     * Converts this [UShort] value to [Byte].\n     *\n     * If this value is less than or equals to [Byte.MAX_VALUE], the resulting `Byte` value represents\n     * the same numerical value as this `UShort`.\n     *\n     * The resulting `Byte` value is represented by the least significant 8 bits of this `UShort` value.\n     * Note that the resulting `Byte` value may be negative.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toByte(): Byte = data.toByte()\n    /**\n     * Converts this [UShort] value to [Short].\n     *\n     * If this value is less than or equals to [Short.MAX_VALUE], the resulting `Short` value represents\n     * the same numerical value as this `UShort`. Otherwise the result is negative.\n     *\n     * The resulting `Short` value has the same binary representation as this `UShort` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toShort(): Short = data\n    /**\n     * Converts this [UShort] value to [Int].\n     *\n     * The resulting `Int` value represents the same numerical value as this `UShort`.\n     *\n     * The least significant 16 bits of the resulting `Int` value are the same as the bits of this `UShort` value,\n     * whereas the most significant 16 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toInt(): Int = data.toInt() and 0xFFFF\n    /**\n     * Converts this [UShort] value to [Long].\n     *\n     * The resulting `Long` value represents the same numerical value as this `UShort`.\n     *\n     * The least significant 16 bits of the resulting `Long` value are the same as the bits of this `UShort` value,\n     * whereas the most significant 48 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toLong(): Long = data.toLong() and 0xFFFF\n\n    /**\n     * Converts this [UShort] value to [UByte].\n     *\n     * If this value is less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n     * the same numerical value as this `UShort`.\n     *\n     * The resulting `UByte` value is represented by the least significant 8 bits of this `UShort` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUByte(): UByte = data.toUByte()\n    /** Returns this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun toUShort(): UShort = this\n    /**\n     * Converts this [UShort] value to [UInt].\n     *\n     * The resulting `UInt` value represents the same numerical value as this `UShort`.\n     *\n     * The least significant 16 bits of the resulting `UInt` value are the same as the bits of this `UShort` value,\n     * whereas the most significant 16 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUInt(): UInt = UInt(data.toInt() and 0xFFFF)\n    /**\n     * Converts this [UShort] value to [ULong].\n     *\n     * The resulting `ULong` value represents the same numerical value as this `UShort`.\n     *\n     * The least significant 16 bits of the resulting `ULong` value are the same as the bits of this `UShort` value,\n     * whereas the most significant 48 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toULong(): ULong = ULong(data.toLong() and 0xFFFF)\n\n    /**\n     * Converts this [UShort] value to [Float].\n     *\n     * The resulting `Float` value represents the same numerical value as this `UShort`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toFloat(): Float = this.toInt().toFloat()\n    /**\n     * Converts this [UShort] value to [Double].\n     *\n     * The resulting `Double` value represents the same numerical value as this `UShort`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toDouble(): Double = this.toInt().toDouble()\n\n    public override fun toString(): String = toInt().toString()\n\n}\n\n/**\n * Converts this [Byte] value to [UShort].\n *\n * If this value is positive, the resulting `UShort` value represents the same numerical value as this `Byte`.\n *\n * The least significant 8 bits of the resulting `UShort` value are the same as the bits of this `Byte` value,\n * whereas the most significant 8 bits are filled with the sign bit of this value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Byte.toUShort(): UShort = UShort(this.toShort())\n/**\n * Converts this [Short] value to [UShort].\n *\n * If this value is positive, the resulting `UShort` value represents the same numerical value as this `Short`.\n *\n * The resulting `UShort` value has the same binary representation as this `Short` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Short.toUShort(): UShort = UShort(this)\n/**\n * Converts this [Int] value to [UShort].\n *\n * If this value is positive and less than or equals to [UShort.MAX_VALUE], the resulting `UShort` value represents\n * the same numerical value as this `Int`.\n *\n * The resulting `UShort` value is represented by the least significant 16 bits of this `Int` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Int.toUShort(): UShort = UShort(this.toShort())\n/**\n * Converts this [Long] value to [UShort].\n *\n * If this value is positive and less than or equals to [UShort.MAX_VALUE], the resulting `UShort` value represents\n * the same numerical value as this `Long`.\n *\n * The resulting `UShort` value is represented by the least significant 16 bits of this `Long` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Long.toUShort(): UShort = UShort(this.toShort())\n",null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n\npublic actual interface Comparator<T> {\n    @JsName(\"compare\")\n    actual fun compare(a: T, b: T): Int\n}\n\npublic actual inline fun <T> Comparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T> = object : Comparator<T> {\n    override fun compare(a: T, b: T): Int = comparison(a, b)\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.random.Random\n\n/**\n * Removes a single instance of the specified element from this\n * collection, if it is present.\n *\n * Allows to overcome type-safety restriction of `remove` that requires to pass an element of type `E`.\n *\n * @return `true` if the element has been successfully removed; `false` if it was not present in the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.remove(element: T): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).remove(element)\n\n/**\n * Removes all of this collection's elements that are also contained in the specified collection.\n\n * Allows to overcome type-safety restriction of `removeAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any of the specified elements was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.removeAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).removeAll(elements)\n\n/**\n * Retains only the elements in this collection that are contained in the specified collection.\n *\n * Allows to overcome type-safety restriction of `retainAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any element was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.retainAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).retainAll(elements)\n\n/**\n * Adds the specified [element] to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(element: T) {\n    this.add(element)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Iterable<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] array to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Array<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Sequence<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Removes a single instance of the specified [element] from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(element: T) {\n    this.remove(element)\n}\n\n/**\n * Removes all elements contained in the given [elements] collection from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Iterable<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] array from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Array<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] sequence from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Sequence<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Iterable<T>): Boolean {\n    when (elements) {\n        is Collection -> return addAll(elements)\n        else -> {\n            var result: Boolean = false\n            for (item in elements)\n                if (add(item)) result = true\n            return result\n        }\n    }\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Sequence<T>): Boolean {\n    var result: Boolean = false\n    for (item in elements) {\n        if (add(item)) result = true\n    }\n    return result\n}\n\n/**\n * Adds all elements of the given [elements] array to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Array<out T>): Boolean {\n    return addAll(elements.asList())\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Iterable<T>): Boolean {\n    return removeAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    return set.isNotEmpty() && removeAll(set)\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Array<out T>): Boolean {\n    return elements.isNotEmpty() && removeAll(elements.toHashSet())\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Iterable<T>): Boolean {\n    return retainAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Array<out T>): Boolean {\n    if (elements.isNotEmpty())\n        return retainAll(elements.toHashSet())\n    else\n        return retainNothing()\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    if (set.isNotEmpty())\n        return retainAll(set)\n    else\n        return retainNothing()\n}\n\nprivate fun MutableCollection<*>.retainNothing(): Boolean {\n    val result = isNotEmpty()\n    clear()\n    return result\n}\n\n\n/**\n * Removes all elements from this [MutableIterable] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when no elements were removed and collection was not modified.\n */\npublic fun <T> MutableIterable<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableIterable] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when all elements were retained and collection was not modified.\n */\npublic fun <T> MutableIterable<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableIterable<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    var result = false\n    with(iterator()) {\n        while (hasNext())\n            if (predicate(next()) == predicateResultToRemove) {\n                remove()\n                result = true\n            }\n    }\n    return result\n}\n\n\n/**\n * Returns a new list with the elements of this list randomly shuffled\n * using the specified [random] instance as the source of randomness.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Iterable<T>.shuffled(random: Random): List<T> = toMutableList().apply { shuffle(random) }\n\n\n/**\n * Removes the element at the specified [index] from this list.\n * In Kotlin one should use the [MutableList.removeAt] function instead.\n */\n@Deprecated(\"Use removeAt(index) instead.\", ReplaceWith(\"removeAt(index)\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList<T>.remove(index: Int): T = removeAt(index)\n\n/**\n * Removes the first element from this mutable list and returns that removed element, or throws [NoSuchElementException] if this list is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> MutableList<T>.removeFirst(): T = if (isEmpty()) throw NoSuchElementException(\"List is empty.\") else removeAt(0)\n\n/**\n * Removes the first element from this mutable list and returns that removed element, or returns `null` if this list is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> MutableList<T>.removeFirstOrNull(): T? = if (isEmpty()) null else removeAt(0)\n\n/**\n * Removes the last element from this mutable list and returns that removed element, or throws [NoSuchElementException] if this list is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> MutableList<T>.removeLast(): T = if (isEmpty()) throw NoSuchElementException(\"List is empty.\") else removeAt(lastIndex)\n\n/**\n * Removes the last element from this mutable list and returns that removed element, or returns `null` if this list is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> MutableList<T>.removeLastOrNull(): T? = if (isEmpty()) null else removeAt(lastIndex)\n\n/**\n * Removes all elements from this [MutableList] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when no elements were removed and collection was not modified.\n */\npublic fun <T> MutableList<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableList] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when all elements were retained and collection was not modified.\n */\npublic fun <T> MutableList<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableList<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    if (this !is RandomAccess)\n        return (this as MutableIterable<T>).filterInPlace(predicate, predicateResultToRemove)\n\n    var writeIndex: Int = 0\n    for (readIndex in 0..lastIndex) {\n        val element = this[readIndex]\n        if (predicate(element) == predicateResultToRemove)\n            continue\n\n        if (writeIndex != readIndex)\n            this[writeIndex] = element\n\n        writeIndex++\n    }\n    if (writeIndex < size) {\n        for (removeIndex in lastIndex downTo writeIndex)\n            removeAt(removeIndex)\n\n        return true\n    } else {\n        return false\n    }\n}\n\n/**\n * Randomly shuffles elements in this mutable list using the specified [random] instance as the source of randomness.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> MutableList<T>.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n",null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SetsKt\")\n@file:UseExperimental(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\ninternal object EmptySet : Set<Nothing>, Serializable {\n    private const val serialVersionUID: Long = 3406603774387020532\n\n    override fun equals(other: Any?): Boolean = other is Set<*> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n\n    private fun readResolve(): Any = EmptySet\n}\n\n\n/**\n * Returns an empty read-only set.  The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.emptyReadOnlySet\n */\npublic fun <T> emptySet(): Set<T> = EmptySet\n\n/**\n * Returns a new read-only set with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.readOnlySet\n */\npublic fun <T> setOf(vararg elements: T): Set<T> = if (elements.size > 0) elements.toSet() else emptySet()\n\n/**\n * Returns an empty read-only set.  The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.emptyReadOnlySet\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> setOf(): Set<T> = emptySet()\n\n/**\n * Returns an empty new [MutableSet].\n *\n * The returned set preserves the element iteration order.\n * @sample samples.collections.Collections.Sets.emptyMutableSet\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableSetOf(): MutableSet<T> = LinkedHashSet()\n\n/**\n * Returns a new [MutableSet] with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * @sample samples.collections.Collections.Sets.mutableSet\n */\npublic fun <T> mutableSetOf(vararg elements: T): MutableSet<T> = elements.toCollection(LinkedHashSet(mapCapacity(elements.size)))\n\n/** Returns an empty new [HashSet]. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> hashSetOf(): HashSet<T> = HashSet()\n\n/** Returns a new [HashSet] with the given elements. */\npublic fun <T> hashSetOf(vararg elements: T): HashSet<T> = elements.toCollection(HashSet(mapCapacity(elements.size)))\n\n/**\n * Returns an empty new [LinkedHashSet].\n * @sample samples.collections.Collections.Sets.emptyLinkedHashSet\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> linkedSetOf(): LinkedHashSet<T> = LinkedHashSet()\n\n/**\n * Returns a new [LinkedHashSet] with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * @sample samples.collections.Collections.Sets.linkedHashSet\n */\npublic fun <T> linkedSetOf(vararg elements: T): LinkedHashSet<T> = elements.toCollection(LinkedHashSet(mapCapacity(elements.size)))\n\n/**\n * Builds a new read-only [Set] by populating a [MutableSet] using the given [builderAction]\n * and returning a read-only set with the same elements.\n *\n * The set passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * Elements of the set are iterated in the order they were added by the [builderAction].\n *\n * @sample samples.collections.Builders.Sets.buildSetSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildSet(@BuilderInference builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return LinkedHashSet<E>().apply(builderAction)\n}\n\n/**\n * Builds a new read-only [Set] by populating a [MutableSet] using the given [builderAction]\n * and returning a read-only set with the same elements.\n *\n * The set passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of elements added in the [builderAction].\n *\n * Elements of the set are iterated in the order they were added by the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Sets.buildSetSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildSet(capacity: Int, @BuilderInference builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    checkBuilderCapacity(capacity)\n    return LinkedHashSet<E>(mapCapacity(capacity)).apply(builderAction)\n}\n\n\n/** Returns this Set if it's not `null` and the empty set otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Set<T>?.orEmpty(): Set<T> = this ?: emptySet()\n\ninternal fun <T> Set<T>.optimizeReadOnlySet() = when (size) {\n    0 -> emptySet()\n    1 -> setOf(iterator().next())\n    else -> this\n}\n",null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"LazyKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin\n\nimport kotlin.reflect.KProperty\n\n/**\n * Represents a value with lazy initialization.\n *\n * To create an instance of [Lazy] use the [lazy] function.\n */\npublic interface Lazy<out T> {\n    /**\n     * Gets the lazily initialized value of the current Lazy instance.\n     * Once the value was initialized it must not change during the rest of lifetime of this Lazy instance.\n     */\n    public val value: T\n\n    /**\n     * Returns `true` if a value for this Lazy instance has been already initialized, and `false` otherwise.\n     * Once this function has returned `true` it stays `true` for the rest of lifetime of this Lazy instance.\n     */\n    public fun isInitialized(): Boolean\n}\n\n/**\n * Creates a new instance of the [Lazy] that is already initialized with the specified [value].\n */\npublic fun <T> lazyOf(value: T): Lazy<T> = InitializedLazyImpl(value)\n\n/**\n * An extension to delegate a read-only property of type [T] to an instance of [Lazy].\n *\n * This extension allows to use instances of Lazy for property delegation:\n * `val property: String by lazy { initializer }`\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Lazy<T>.getValue(thisRef: Any?, property: KProperty<*>): T = value\n\n/**\n * Specifies how a [Lazy] instance synchronizes initialization among multiple threads.\n */\npublic enum class LazyThreadSafetyMode {\n\n    /**\n     * Locks are used to ensure that only a single thread can initialize the [Lazy] instance.\n     */\n    SYNCHRONIZED,\n\n    /**\n     * Initializer function can be called several times on concurrent access to uninitialized [Lazy] instance value,\n     * but only the first returned value will be used as the value of [Lazy] instance.\n     */\n    PUBLICATION,\n\n    /**\n     * No locks are used to synchronize an access to the [Lazy] instance value; if the instance is accessed from multiple threads, its behavior is undefined.\n     *\n     * This mode should not be used unless the [Lazy] instance is guaranteed never to be initialized from more than one thread.\n     */\n    NONE,\n}\n\n\ninternal object UNINITIALIZED_VALUE\n\n// internal to be called from lazy in JS\ninternal class UnsafeLazyImpl<out T>(initializer: () -> T) : Lazy<T>, Serializable {\n    private var initializer: (() -> T)? = initializer\n    private var _value: Any? = UNINITIALIZED_VALUE\n\n    override val value: T\n        get() {\n            if (_value === UNINITIALIZED_VALUE) {\n                _value = initializer!!()\n                initializer = null\n            }\n            @Suppress(\"UNCHECKED_CAST\")\n            return _value as T\n        }\n\n    override fun isInitialized(): Boolean = _value !== UNINITIALIZED_VALUE\n\n    override fun toString(): String = if (isInitialized()) value.toString() else \"Lazy value not initialized yet.\"\n\n    private fun writeReplace(): Any = InitializedLazyImpl(value)\n}\n\ninternal class InitializedLazyImpl<out T>(override val value: T) : Lazy<T>, Serializable {\n\n    override fun isInitialized(): Boolean = true\n\n    override fun toString(): String = value.toString()\n\n}\n",null,null,null,null,"/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ArraysKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component1(): Byte {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component1(): Short {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component1(): Int {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component1(): Long {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component1(): Float {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component1(): Double {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component1(): Boolean {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component1(): Char {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component2(): Byte {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component2(): Short {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component2(): Int {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component2(): Long {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component2(): Float {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component2(): Double {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component2(): Boolean {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component2(): Char {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component3(): Byte {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component3(): Short {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component3(): Int {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component3(): Long {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component3(): Float {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component3(): Double {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component3(): Boolean {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component3(): Char {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component4(): Byte {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component4(): Short {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component4(): Int {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component4(): Long {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component4(): Float {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component4(): Double {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component4(): Boolean {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component4(): Char {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component5(): Byte {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component5(): Short {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component5(): Int {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component5(): Long {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component5(): Float {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component5(): Double {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component5(): Boolean {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component5(): Char {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ByteArray.contains(element: Byte): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ShortArray.contains(element: Short): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun IntArray.contains(element: Int): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun LongArray.contains(element: Long): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun FloatArray.contains(element: Float): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun DoubleArray.contains(element: Double): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun BooleanArray.contains(element: Boolean): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun CharArray.contains(element: Char): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun <T> Array<out T>.elementAt(index: Int): T\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ByteArray.elementAt(index: Int): Byte\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ShortArray.elementAt(index: Int): Short\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun IntArray.elementAt(index: Int): Int\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun LongArray.elementAt(index: Int): Long\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun FloatArray.elementAt(index: Int): Float\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun DoubleArray.elementAt(index: Int): Double\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun BooleanArray.elementAt(index: Int): Boolean\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun CharArray.elementAt(index: Int): Char\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrNull(index: Int): Byte? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrNull(index: Int): Short? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrNull(index: Int): Int? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrNull(index: Int): Long? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrNull(index: Int): Float? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrNull(index: Int): Double? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrNull(index: Int): Boolean? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.find(predicate: (Byte) -> Boolean): Byte? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.find(predicate: (Short) -> Boolean): Short? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.find(predicate: (Int) -> Boolean): Int? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.find(predicate: (Long) -> Boolean): Long? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.find(predicate: (Float) -> Boolean): Float? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.find(predicate: (Double) -> Boolean): Double? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.find(predicate: (Boolean) -> Boolean): Boolean? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.findLast(predicate: (Byte) -> Boolean): Byte? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.findLast(predicate: (Short) -> Boolean): Short? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.findLast(predicate: (Int) -> Boolean): Int? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.findLast(predicate: (Long) -> Boolean): Long? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.findLast(predicate: (Float) -> Boolean): Float? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.findLast(predicate: (Double) -> Boolean): Double? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.findLast(predicate: (Boolean) -> Boolean): Boolean? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.first(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.first(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.first(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.first(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.first(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.first(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.first(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.first(predicate: (Byte) -> Boolean): Byte {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.first(predicate: (Short) -> Boolean): Short {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.first(predicate: (Int) -> Boolean): Int {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.first(predicate: (Long) -> Boolean): Long {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.first(predicate: (Float) -> Boolean): Float {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.first(predicate: (Double) -> Boolean): Double {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.first(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ByteArray.firstOrNull(): Byte? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ShortArray.firstOrNull(): Short? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun IntArray.firstOrNull(): Int? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun LongArray.firstOrNull(): Long? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun FloatArray.firstOrNull(): Float? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun DoubleArray.firstOrNull(): Double? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun BooleanArray.firstOrNull(): Boolean? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun CharArray.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Array<out T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ByteArray.firstOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ShortArray.firstOrNull(predicate: (Short) -> Boolean): Short? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun IntArray.firstOrNull(predicate: (Int) -> Boolean): Int? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun LongArray.firstOrNull(predicate: (Long) -> Boolean): Long? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun FloatArray.firstOrNull(predicate: (Float) -> Boolean): Float? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun DoubleArray.firstOrNull(predicate: (Double) -> Boolean): Double? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun BooleanArray.firstOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun CharArray.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.getOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.getOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.getOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.getOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.getOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.getOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.getOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun <T> Array<out T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ByteArray.getOrNull(index: Int): Byte? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ShortArray.getOrNull(index: Int): Short? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun IntArray.getOrNull(index: Int): Int? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun LongArray.getOrNull(index: Int): Long? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun FloatArray.getOrNull(index: Int): Float? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun DoubleArray.getOrNull(index: Int): Double? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun BooleanArray.getOrNull(index: Int): Boolean? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun CharArray.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.indexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.indexOf(element: Byte): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.indexOf(element: Short): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.indexOf(element: Int): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.indexOf(element: Long): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.indexOf(element: Float): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.indexOf(element: Double): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.indexOf(element: Boolean): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.indexOf(element: Char): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfFirst(predicate: (Byte) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfFirst(predicate: (Short) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfFirst(predicate: (Int) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfFirst(predicate: (Long) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfFirst(predicate: (Float) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfFirst(predicate: (Double) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfFirst(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfLast(predicate: (Byte) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfLast(predicate: (Short) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfLast(predicate: (Int) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfLast(predicate: (Long) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfLast(predicate: (Float) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfLast(predicate: (Double) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfLast(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.last(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.last(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.last(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.last(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.last(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.last(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.last(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.last(predicate: (T) -> Boolean): T {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.last(predicate: (Byte) -> Boolean): Byte {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.last(predicate: (Short) -> Boolean): Short {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.last(predicate: (Int) -> Boolean): Int {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.last(predicate: (Long) -> Boolean): Long {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.last(predicate: (Float) -> Boolean): Float {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.last(predicate: (Double) -> Boolean): Double {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.last(predicate: (Boolean) -> Boolean): Boolean {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.lastIndexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices.reversed()) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices.reversed()) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.lastIndexOf(element: Byte): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.lastIndexOf(element: Short): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.lastIndexOf(element: Int): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.lastIndexOf(element: Long): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.lastIndexOf(element: Float): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.lastIndexOf(element: Double): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.lastIndexOf(element: Boolean): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.lastIndexOf(element: Char): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ByteArray.lastOrNull(): Byte? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ShortArray.lastOrNull(): Short? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun IntArray.lastOrNull(): Int? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun LongArray.lastOrNull(): Long? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun FloatArray.lastOrNull(): Float? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun DoubleArray.lastOrNull(): Double? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun BooleanArray.lastOrNull(): Boolean? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun CharArray.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Array<out T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ByteArray.lastOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ShortArray.lastOrNull(predicate: (Short) -> Boolean): Short? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun IntArray.lastOrNull(predicate: (Int) -> Boolean): Int? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun LongArray.lastOrNull(predicate: (Long) -> Boolean): Long? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun FloatArray.lastOrNull(predicate: (Float) -> Boolean): Float? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun DoubleArray.lastOrNull(predicate: (Double) -> Boolean): Double? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun BooleanArray.lastOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun CharArray.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.random(): Byte {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.random(): Short {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.random(): Int {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.random(): Long {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.random(): Float {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.random(): Double {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.random(): Boolean {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Array<out T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ByteArray.random(random: Random): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ShortArray.random(random: Random): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun IntArray.random(random: Random): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun LongArray.random(random: Random): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun FloatArray.random(random: Random): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun DoubleArray.random(random: Random): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun BooleanArray.random(random: Random): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharArray.random(random: Random): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.randomOrNull(): Byte? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.randomOrNull(): Short? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.randomOrNull(): Int? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.randomOrNull(): Long? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.randomOrNull(): Float? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.randomOrNull(): Double? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.randomOrNull(): Boolean? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.randomOrNull(): Char? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> Array<out T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun ByteArray.randomOrNull(random: Random): Byte? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun ShortArray.randomOrNull(random: Random): Short? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun IntArray.randomOrNull(random: Random): Int? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun LongArray.randomOrNull(random: Random): Long? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun FloatArray.randomOrNull(random: Random): Float? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun DoubleArray.randomOrNull(random: Random): Double? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun BooleanArray.randomOrNull(random: Random): Boolean? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun CharArray.randomOrNull(random: Random): Char? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ByteArray.single(): Byte {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ShortArray.single(): Short {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun IntArray.single(): Int {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun LongArray.single(): Long {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun FloatArray.single(): Float {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun DoubleArray.single(): Double {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun BooleanArray.single(): Boolean {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun CharArray.single(): Char {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Array<out T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ByteArray.single(predicate: (Byte) -> Boolean): Byte {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Byte\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ShortArray.single(predicate: (Short) -> Boolean): Short {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Short\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun IntArray.single(predicate: (Int) -> Boolean): Int {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Int\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun LongArray.single(predicate: (Long) -> Boolean): Long {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Long\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun FloatArray.single(predicate: (Float) -> Boolean): Float {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Float\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun DoubleArray.single(predicate: (Double) -> Boolean): Double {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Double\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun BooleanArray.single(predicate: (Boolean) -> Boolean): Boolean {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Boolean\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun CharArray.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ByteArray.singleOrNull(): Byte? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ShortArray.singleOrNull(): Short? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun IntArray.singleOrNull(): Int? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun LongArray.singleOrNull(): Long? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun FloatArray.singleOrNull(): Float? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun DoubleArray.singleOrNull(): Double? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun BooleanArray.singleOrNull(): Boolean? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun CharArray.singleOrNull(): Char? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Array<out T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ByteArray.singleOrNull(predicate: (Byte) -> Boolean): Byte? {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ShortArray.singleOrNull(predicate: (Short) -> Boolean): Short? {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun IntArray.singleOrNull(predicate: (Int) -> Boolean): Int? {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun LongArray.singleOrNull(predicate: (Long) -> Boolean): Long? {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun FloatArray.singleOrNull(predicate: (Float) -> Boolean): Float? {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun DoubleArray.singleOrNull(predicate: (Double) -> Boolean): Double? {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun BooleanArray.singleOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun CharArray.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.drop(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.drop(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.drop(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.drop(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.drop(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.drop(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.drop(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.drop(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.dropLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.dropLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.dropLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.dropLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.dropLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.dropLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.dropLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.dropLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    var yielding = false\n    val list = ArrayList<Byte>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropWhile(predicate: (Short) -> Boolean): List<Short> {\n    var yielding = false\n    val list = ArrayList<Short>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropWhile(predicate: (Int) -> Boolean): List<Int> {\n    var yielding = false\n    val list = ArrayList<Int>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropWhile(predicate: (Long) -> Boolean): List<Long> {\n    var yielding = false\n    val list = ArrayList<Long>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropWhile(predicate: (Float) -> Boolean): List<Float> {\n    var yielding = false\n    val list = ArrayList<Float>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropWhile(predicate: (Double) -> Boolean): List<Double> {\n    var yielding = false\n    val list = ArrayList<Double>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    var yielding = false\n    val list = ArrayList<Boolean>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropWhile(predicate: (Char) -> Boolean): List<Char> {\n    var yielding = false\n    val list = ArrayList<Char>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Array<out T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ByteArray.filter(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ShortArray.filter(predicate: (Short) -> Boolean): List<Short> {\n    return filterTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun IntArray.filter(predicate: (Int) -> Boolean): List<Int> {\n    return filterTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun LongArray.filter(predicate: (Long) -> Boolean): List<Long> {\n    return filterTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun FloatArray.filter(predicate: (Float) -> Boolean): List<Float> {\n    return filterTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun DoubleArray.filter(predicate: (Double) -> Boolean): List<Double> {\n    return filterTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun BooleanArray.filter(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun CharArray.filter(predicate: (Char) -> Boolean): List<Char> {\n    return filterTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Array<out T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ByteArray.filterIndexed(predicate: (index: Int, Byte) -> Boolean): List<Byte> {\n    return filterIndexedTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ShortArray.filterIndexed(predicate: (index: Int, Short) -> Boolean): List<Short> {\n    return filterIndexedTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun IntArray.filterIndexed(predicate: (index: Int, Int) -> Boolean): List<Int> {\n    return filterIndexedTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun LongArray.filterIndexed(predicate: (index: Int, Long) -> Boolean): List<Long> {\n    return filterIndexedTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun FloatArray.filterIndexed(predicate: (index: Int, Float) -> Boolean): List<Float> {\n    return filterIndexedTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun DoubleArray.filterIndexed(predicate: (index: Int, Double) -> Boolean): List<Double> {\n    return filterIndexedTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun BooleanArray.filterIndexed(predicate: (index: Int, Boolean) -> Boolean): List<Boolean> {\n    return filterIndexedTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun CharArray.filterIndexed(predicate: (index: Int, Char) -> Boolean): List<Char> {\n    return filterIndexedTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterIndexedTo(destination: C, predicate: (index: Int, Byte) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterIndexedTo(destination: C, predicate: (index: Int, Short) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterIndexedTo(destination: C, predicate: (index: Int, Int) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterIndexedTo(destination: C, predicate: (index: Int, Long) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterIndexedTo(destination: C, predicate: (index: Int, Float) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterIndexedTo(destination: C, predicate: (index: Int, Double) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterIndexedTo(destination: C, predicate: (index: Int, Boolean) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Array<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Array<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Array<out T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ByteArray.filterNot(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterNotTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ShortArray.filterNot(predicate: (Short) -> Boolean): List<Short> {\n    return filterNotTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun IntArray.filterNot(predicate: (Int) -> Boolean): List<Int> {\n    return filterNotTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun LongArray.filterNot(predicate: (Long) -> Boolean): List<Long> {\n    return filterNotTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun FloatArray.filterNot(predicate: (Float) -> Boolean): List<Float> {\n    return filterNotTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun DoubleArray.filterNot(predicate: (Double) -> Boolean): List<Double> {\n    return filterNotTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun BooleanArray.filterNot(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterNotTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun CharArray.filterNot(predicate: (Char) -> Boolean): List<Char> {\n    return filterNotTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Array<out T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Array<out T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterNotTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterNotTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterNotTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterNotTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterNotTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterNotTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterNotTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<out T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.slice(indices: IntRange): List<Byte> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.slice(indices: IntRange): List<Short> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.slice(indices: IntRange): List<Int> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.slice(indices: IntRange): List<Long> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.slice(indices: IntRange): List<Float> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.slice(indices: IntRange): List<Double> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.slice(indices: IntRange): List<Boolean> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.slice(indices: IntRange): List<Char> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> Array<out T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ByteArray.slice(indices: Iterable<Int>): List<Byte> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Byte>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ShortArray.slice(indices: Iterable<Int>): List<Short> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Short>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun IntArray.slice(indices: Iterable<Int>): List<Int> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Int>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun LongArray.slice(indices: Iterable<Int>): List<Long> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Long>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun FloatArray.slice(indices: Iterable<Int>): List<Float> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Float>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun DoubleArray.slice(indices: Iterable<Int>): List<Double> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Double>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun BooleanArray.slice(indices: Iterable<Int>): List<Boolean> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Boolean>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun CharArray.slice(indices: Iterable<Int>): List<Char> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Char>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun <T> Array<T>.sliceArray(indices: Collection<Int>): Array<T> {\n    val result = arrayOfNulls(this, indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ByteArray.sliceArray(indices: Collection<Int>): ByteArray {\n    val result = ByteArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ShortArray.sliceArray(indices: Collection<Int>): ShortArray {\n    val result = ShortArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun IntArray.sliceArray(indices: Collection<Int>): IntArray {\n    val result = IntArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun LongArray.sliceArray(indices: Collection<Int>): LongArray {\n    val result = LongArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun FloatArray.sliceArray(indices: Collection<Int>): FloatArray {\n    val result = FloatArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun DoubleArray.sliceArray(indices: Collection<Int>): DoubleArray {\n    val result = DoubleArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun BooleanArray.sliceArray(indices: Collection<Int>): BooleanArray {\n    val result = BooleanArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun CharArray.sliceArray(indices: Collection<Int>): CharArray {\n    val result = CharArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<T>.sliceArray(indices: IntRange): Array<T> {\n    if (indices.isEmpty()) return copyOfRange(0, 0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.sliceArray(indices: IntRange): ByteArray {\n    if (indices.isEmpty()) return ByteArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.sliceArray(indices: IntRange): ShortArray {\n    if (indices.isEmpty()) return ShortArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.sliceArray(indices: IntRange): IntArray {\n    if (indices.isEmpty()) return IntArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.sliceArray(indices: IntRange): LongArray {\n    if (indices.isEmpty()) return LongArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.sliceArray(indices: IntRange): FloatArray {\n    if (indices.isEmpty()) return FloatArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.sliceArray(indices: IntRange): DoubleArray {\n    if (indices.isEmpty()) return DoubleArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.sliceArray(indices: IntRange): BooleanArray {\n    if (indices.isEmpty()) return BooleanArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.sliceArray(indices: IntRange): CharArray {\n    if (indices.isEmpty()) return CharArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.take(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Byte>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.take(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Short>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.take(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Int>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.take(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Long>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.take(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Float>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.take(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Double>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.take(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Boolean>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.take(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Char>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<T>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.takeLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Byte>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.takeLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Short>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.takeLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Int>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.takeLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Long>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.takeLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Float>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.takeLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Double>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.takeLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Boolean>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.takeLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Char>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    val list = ArrayList<Byte>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeWhile(predicate: (Short) -> Boolean): List<Short> {\n    val list = ArrayList<Short>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeWhile(predicate: (Int) -> Boolean): List<Int> {\n    val list = ArrayList<Int>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeWhile(predicate: (Long) -> Boolean): List<Long> {\n    val list = ArrayList<Long>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeWhile(predicate: (Float) -> Boolean): List<Float> {\n    val list = ArrayList<Float>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeWhile(predicate: (Double) -> Boolean): List<Double> {\n    val list = ArrayList<Double>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    val list = ArrayList<Boolean>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeWhile(predicate: (Char) -> Boolean): List<Char> {\n    val list = ArrayList<Char>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun <T> Array<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ByteArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ShortArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun IntArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun LongArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun FloatArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun DoubleArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun BooleanArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun CharArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Array<out T>.reversed(): List<T> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ByteArray.reversed(): List<Byte> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ShortArray.reversed(): List<Short> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun IntArray.reversed(): List<Int> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun LongArray.reversed(): List<Long> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun FloatArray.reversed(): List<Float> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun DoubleArray.reversed(): List<Double> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun BooleanArray.reversed(): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun CharArray.reversed(): List<Char> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun <T> Array<T>.reversedArray(): Array<T> {\n    if (isEmpty()) return this\n    val result = arrayOfNulls(this, size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ByteArray.reversedArray(): ByteArray {\n    if (isEmpty()) return this\n    val result = ByteArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ShortArray.reversedArray(): ShortArray {\n    if (isEmpty()) return this\n    val result = ShortArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun IntArray.reversedArray(): IntArray {\n    if (isEmpty()) return this\n    val result = IntArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun LongArray.reversedArray(): LongArray {\n    if (isEmpty()) return this\n    val result = LongArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun FloatArray.reversedArray(): FloatArray {\n    if (isEmpty()) return this\n    val result = FloatArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun DoubleArray.reversedArray(): DoubleArray {\n    if (isEmpty()) return this\n    val result = DoubleArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun BooleanArray.reversedArray(): BooleanArray {\n    if (isEmpty()) return this\n    val result = BooleanArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun CharArray.reversedArray(): CharArray {\n    if (isEmpty()) return this\n    val result = CharArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Sorts elements in the array in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ByteArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ShortArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun IntArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun LongArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun FloatArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun DoubleArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun CharArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sorted(): List<T> {\n    return sortedArray().asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ByteArray.sorted(): List<Byte> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ShortArray.sorted(): List<Short> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun IntArray.sorted(): List<Int> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun LongArray.sorted(): List<Long> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun FloatArray.sorted(): List<Float> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun DoubleArray.sorted(): List<Double> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun CharArray.sorted(): List<Char> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArray(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ByteArray.sortedArray(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ShortArray.sortedArray(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun IntArray.sortedArray(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun LongArray.sortedArray(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun FloatArray.sortedArray(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun DoubleArray.sortedArray(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun CharArray.sortedArray(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArrayDescending(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(reverseOrder()) }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedArrayDescending(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedArrayDescending(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedArrayDescending(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedArrayDescending(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedArrayDescending(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedArrayDescending(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedArrayDescending(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedArrayWith(comparator: Comparator<in T>): Array<out T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(comparator) }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedBy(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedBy(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedBy(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedBy(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedBy(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedBy(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedBy(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedBy(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedByDescending(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedByDescending(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedByDescending(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedByDescending(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedByDescending(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedByDescending(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedByDescending(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedByDescending(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedDescending(): List<Byte> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedDescending(): List<Short> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedDescending(): List<Int> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedDescending(): List<Long> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedDescending(): List<Float> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedDescending(): List<Double> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedDescending(): List<Char> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    return sortedArrayWith(comparator).asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ByteArray.sortedWith(comparator: Comparator<in Byte>): List<Byte> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ShortArray.sortedWith(comparator: Comparator<in Short>): List<Short> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun IntArray.sortedWith(comparator: Comparator<in Int>): List<Int> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun LongArray.sortedWith(comparator: Comparator<in Long>): List<Long> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun FloatArray.sortedWith(comparator: Comparator<in Float>): List<Float> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun DoubleArray.sortedWith(comparator: Comparator<in Double>): List<Double> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun BooleanArray.sortedWith(comparator: Comparator<in Boolean>): List<Boolean> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun CharArray.sortedWith(comparator: Comparator<in Char>): List<Char> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun <T> Array<out T>.asList(): List<T>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ByteArray.asList(): List<Byte>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ShortArray.asList(): List<Short>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun IntArray.asList(): List<Int>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun LongArray.asList(): List<Long>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun FloatArray.asList(): List<Float>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun DoubleArray.asList(): List<Double>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun BooleanArray.asList(): List<Boolean>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun CharArray.asList(): List<Char>\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentDeepHashCode(): Int\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentDeepToString(): String\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun ByteArray.contentEquals(other: ByteArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun ShortArray.contentEquals(other: ShortArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun IntArray.contentEquals(other: IntArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun LongArray.contentEquals(other: LongArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun FloatArray.contentEquals(other: FloatArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun CharArray.contentEquals(other: CharArray): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ByteArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ShortArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun IntArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun LongArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun FloatArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun DoubleArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun BooleanArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun CharArray.contentHashCode(): Int\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ByteArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ShortArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun IntArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun LongArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun FloatArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun DoubleArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun BooleanArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun CharArray.contentToString(): String\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T>\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(): Array<T>\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ByteArray.copyOf(): ByteArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ShortArray.copyOf(): ShortArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun IntArray.copyOf(): IntArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun LongArray.copyOf(): LongArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun FloatArray.copyOf(): FloatArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun DoubleArray.copyOf(): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun BooleanArray.copyOf(): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun CharArray.copyOf(): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ByteArray.copyOf(newSize: Int): ByteArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ShortArray.copyOf(newSize: Int): ShortArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun IntArray.copyOf(newSize: Int): IntArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun LongArray.copyOf(newSize: Int): LongArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun FloatArray.copyOf(newSize: Int): FloatArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun DoubleArray.copyOf(newSize: Int): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun BooleanArray.copyOf(newSize: Int): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun CharArray.copyOf(newSize: Int): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(newSize: Int): Array<T?>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val <T> Array<out T>.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ByteArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ShortArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val IntArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val LongArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val FloatArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val DoubleArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val BooleanArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val CharArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns the last valid index for the array.\n */\npublic val <T> Array<out T>.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ByteArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ShortArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val IntArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val LongArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val FloatArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val DoubleArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val BooleanArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val CharArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(element: T): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ByteArray.plus(element: Byte): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ShortArray.plus(element: Short): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun IntArray.plus(element: Int): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun LongArray.plus(element: Long): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun FloatArray.plus(element: Float): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun DoubleArray.plus(element: Double): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun BooleanArray.plus(element: Boolean): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun CharArray.plus(element: Char): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Collection<T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ShortArray.plus(elements: Collection<Short>): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun IntArray.plus(elements: Collection<Int>): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun LongArray.plus(elements: Collection<Long>): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun FloatArray.plus(elements: Collection<Float>): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun CharArray.plus(elements: Collection<Char>): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Array<out T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ByteArray.plus(elements: ByteArray): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ShortArray.plus(elements: ShortArray): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun IntArray.plus(elements: IntArray): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun LongArray.plus(elements: LongArray): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun FloatArray.plus(elements: FloatArray): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun CharArray.plus(elements: CharArray): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.plusElement(element: T): Array<T>\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun IntArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun LongArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ByteArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ShortArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun DoubleArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun FloatArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun CharArray.sort(): Unit\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable\n */\npublic expect fun <T : Comparable<T>> Array<out T>.sort(): Unit\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic expect fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit\n\n/**\n * Returns an array of Boolean containing all of the elements of this generic array.\n */\npublic fun Array<out Boolean>.toBooleanArray(): BooleanArray {\n    return BooleanArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this generic array.\n */\npublic fun Array<out Byte>.toByteArray(): ByteArray {\n    return ByteArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Char containing all of the elements of this generic array.\n */\npublic fun Array<out Char>.toCharArray(): CharArray {\n    return CharArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Double containing all of the elements of this generic array.\n */\npublic fun Array<out Double>.toDoubleArray(): DoubleArray {\n    return DoubleArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Float containing all of the elements of this generic array.\n */\npublic fun Array<out Float>.toFloatArray(): FloatArray {\n    return FloatArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Int containing all of the elements of this generic array.\n */\npublic fun Array<out Int>.toIntArray(): IntArray {\n    return IntArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Long containing all of the elements of this generic array.\n */\npublic fun Array<out Long>.toLongArray(): LongArray {\n    return LongArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Short containing all of the elements of this generic array.\n */\npublic fun Array<out Short>.toShortArray(): ShortArray {\n    return ShortArray(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ByteArray.toTypedArray(): Array<Byte>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ShortArray.toTypedArray(): Array<Short>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun IntArray.toTypedArray(): Array<Int>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun LongArray.toTypedArray(): Array<Long>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun FloatArray.toTypedArray(): Array<Float>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun DoubleArray.toTypedArray(): Array<Double>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun BooleanArray.toTypedArray(): Array<Boolean>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun CharArray.toTypedArray(): Array<Char>\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <T, K, V> Array<out T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> ByteArray.associate(transform: (Byte) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> ShortArray.associate(transform: (Short) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> IntArray.associate(transform: (Int) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> LongArray.associate(transform: (Long) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> FloatArray.associate(transform: (Float) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> DoubleArray.associate(transform: (Double) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> BooleanArray.associate(transform: (Boolean) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> CharArray.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <T, K> Array<out T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> ByteArray.associateBy(keySelector: (Byte) -> K): Map<K, Byte> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Byte>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> ShortArray.associateBy(keySelector: (Short) -> K): Map<K, Short> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Short>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> IntArray.associateBy(keySelector: (Int) -> K): Map<K, Int> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Int>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> LongArray.associateBy(keySelector: (Long) -> K): Map<K, Long> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Long>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> FloatArray.associateBy(keySelector: (Float) -> K): Map<K, Float> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Float>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> DoubleArray.associateBy(keySelector: (Double) -> K): Map<K, Double> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Double>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> BooleanArray.associateBy(keySelector: (Boolean) -> K): Map<K, Boolean> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Boolean>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> CharArray.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <T, K, V> Array<out T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> ByteArray.associateBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> ShortArray.associateBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> IntArray.associateBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> LongArray.associateBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> FloatArray.associateBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> DoubleArray.associateBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> BooleanArray.associateBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> CharArray.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Byte>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Short>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Int>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Long>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Float>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Double>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Boolean>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateTo(destination: M, transform: (Byte) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateTo(destination: M, transform: (Short) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateTo(destination: M, transform: (Int) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateTo(destination: M, transform: (Long) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateTo(destination: M, transform: (Float) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateTo(destination: M, transform: (Double) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateTo(destination: M, transform: (Boolean) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Array<out T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Byte>> ByteArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Short>> ShortArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Int>> IntArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Long>> LongArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Float>> FloatArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Double>> DoubleArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Boolean>> BooleanArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Array<out T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ByteArray.toHashSet(): HashSet<Byte> {\n    return toCollection(HashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ShortArray.toHashSet(): HashSet<Short> {\n    return toCollection(HashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun IntArray.toHashSet(): HashSet<Int> {\n    return toCollection(HashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun LongArray.toHashSet(): HashSet<Long> {\n    return toCollection(HashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun FloatArray.toHashSet(): HashSet<Float> {\n    return toCollection(HashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun DoubleArray.toHashSet(): HashSet<Double> {\n    return toCollection(HashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun BooleanArray.toHashSet(): HashSet<Boolean> {\n    return toCollection(HashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun CharArray.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(size)))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Array<out T>.toList(): List<T> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ByteArray.toList(): List<Byte> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ShortArray.toList(): List<Short> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun IntArray.toList(): List<Int> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun LongArray.toList(): List<Long> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun FloatArray.toList(): List<Float> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun DoubleArray.toList(): List<Double> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun BooleanArray.toList(): List<Boolean> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun CharArray.toList(): List<Char> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun <T> Array<out T>.toMutableList(): MutableList<T> {\n    return ArrayList(this.asCollection())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ByteArray.toMutableList(): MutableList<Byte> {\n    val list = ArrayList<Byte>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ShortArray.toMutableList(): MutableList<Short> {\n    val list = ArrayList<Short>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun IntArray.toMutableList(): MutableList<Int> {\n    val list = ArrayList<Int>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun LongArray.toMutableList(): MutableList<Long> {\n    val list = ArrayList<Long>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun FloatArray.toMutableList(): MutableList<Float> {\n    val list = ArrayList<Float>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun DoubleArray.toMutableList(): MutableList<Double> {\n    val list = ArrayList<Double>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun BooleanArray.toMutableList(): MutableList<Boolean> {\n    val list = ArrayList<Boolean>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun CharArray.toMutableList(): MutableList<Char> {\n    val list = ArrayList<Char>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toSet(): Set<T> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toSet(): Set<Byte> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toSet(): Set<Short> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toSet(): Set<Int> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toSet(): Set<Long> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toSet(): Set<Float> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toSet(): Set<Double> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toSet(): Set<Boolean> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toSet(): Set<Char> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> ByteArray.flatMap(transform: (Byte) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> ShortArray.flatMap(transform: (Short) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> IntArray.flatMap(transform: (Int) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> LongArray.flatMap(transform: (Long) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> FloatArray.flatMap(transform: (Float) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> DoubleArray.flatMap(transform: (Double) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> BooleanArray.flatMap(transform: (Boolean) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> CharArray.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapTo(destination: C, transform: (Byte) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapTo(destination: C, transform: (Short) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapTo(destination: C, transform: (Int) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapTo(destination: C, transform: (Long) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapTo(destination: C, transform: (Float) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapTo(destination: C, transform: (Double) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapTo(destination: C, transform: (Boolean) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Array<out T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ByteArray.groupBy(keySelector: (Byte) -> K): Map<K, List<Byte>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Byte>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ShortArray.groupBy(keySelector: (Short) -> K): Map<K, List<Short>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Short>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> IntArray.groupBy(keySelector: (Int) -> K): Map<K, List<Int>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Int>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> LongArray.groupBy(keySelector: (Long) -> K): Map<K, List<Long>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Long>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> FloatArray.groupBy(keySelector: (Float) -> K): Map<K, List<Float>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Float>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> DoubleArray.groupBy(keySelector: (Double) -> K): Map<K, List<Double>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Double>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> BooleanArray.groupBy(keySelector: (Boolean) -> K): Map<K, List<Boolean>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Boolean>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharArray.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Array<out T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ByteArray.groupBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ShortArray.groupBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> IntArray.groupBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> LongArray.groupBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> FloatArray.groupBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> DoubleArray.groupBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> BooleanArray.groupBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharArray.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Byte>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Byte>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Short>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Short>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Int>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Int>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Long>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Long>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Float>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Float>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Double>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Double>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Boolean>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Boolean>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from an array to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Array<out T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Array<out T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ByteArray.map(transform: (Byte) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ShortArray.map(transform: (Short) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> IntArray.map(transform: (Int) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> LongArray.map(transform: (Long) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> FloatArray.map(transform: (Float) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> DoubleArray.map(transform: (Double) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> BooleanArray.map(transform: (Boolean) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> CharArray.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Array<out T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ByteArray.mapIndexed(transform: (index: Int, Byte) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ShortArray.mapIndexed(transform: (index: Int, Short) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> IntArray.mapIndexed(transform: (index: Int, Int) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> LongArray.mapIndexed(transform: (index: Int, Long) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> FloatArray.mapIndexed(transform: (index: Int, Float) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> DoubleArray.mapIndexed(transform: (index: Int, Double) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> BooleanArray.mapIndexed(transform: (index: Int, Boolean) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> CharArray.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Array<out T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapIndexedTo(destination: C, transform: (index: Int, Byte) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapIndexedTo(destination: C, transform: (index: Int, Short) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapIndexedTo(destination: C, transform: (index: Int, Int) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapIndexedTo(destination: C, transform: (index: Int, Long) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapIndexedTo(destination: C, transform: (index: Int, Float) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapIndexedTo(destination: C, transform: (index: Int, Double) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapIndexedTo(destination: C, transform: (index: Int, Boolean) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <T, R : Any> Array<out T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original array\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapTo(destination: C, transform: (Byte) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapTo(destination: C, transform: (Short) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapTo(destination: C, transform: (Int) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapTo(destination: C, transform: (Long) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapTo(destination: C, transform: (Float) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapTo(destination: C, transform: (Double) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapTo(destination: C, transform: (Boolean) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Array<out T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ByteArray.withIndex(): Iterable<IndexedValue<Byte>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ShortArray.withIndex(): Iterable<IndexedValue<Short>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun IntArray.withIndex(): Iterable<IndexedValue<Int>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun LongArray.withIndex(): Iterable<IndexedValue<Long>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun FloatArray.withIndex(): Iterable<IndexedValue<Float>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun DoubleArray.withIndex(): Iterable<IndexedValue<Double>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun BooleanArray.withIndex(): Iterable<IndexedValue<Boolean>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun CharArray.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Array<out T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun ByteArray.distinct(): List<Byte> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun ShortArray.distinct(): List<Short> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun IntArray.distinct(): List<Int> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun LongArray.distinct(): List<Long> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun FloatArray.distinct(): List<Float> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun DoubleArray.distinct(): List<Double> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun BooleanArray.distinct(): List<Boolean> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun CharArray.distinct(): List<Char> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Array<out T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> ByteArray.distinctBy(selector: (Byte) -> K): List<Byte> {\n    val set = HashSet<K>()\n    val list = ArrayList<Byte>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> ShortArray.distinctBy(selector: (Short) -> K): List<Short> {\n    val set = HashSet<K>()\n    val list = ArrayList<Short>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> IntArray.distinctBy(selector: (Int) -> K): List<Int> {\n    val set = HashSet<K>()\n    val list = ArrayList<Int>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> LongArray.distinctBy(selector: (Long) -> K): List<Long> {\n    val set = HashSet<K>()\n    val list = ArrayList<Long>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> FloatArray.distinctBy(selector: (Float) -> K): List<Float> {\n    val set = HashSet<K>()\n    val list = ArrayList<Float>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> DoubleArray.distinctBy(selector: (Double) -> K): List<Double> {\n    val set = HashSet<K>()\n    val list = ArrayList<Double>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> BooleanArray.distinctBy(selector: (Boolean) -> K): List<Boolean> {\n    val set = HashSet<K>()\n    val list = ArrayList<Boolean>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> CharArray.distinctBy(selector: (Char) -> K): List<Char> {\n    val set = HashSet<K>()\n    val list = ArrayList<Char>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Array<out T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ByteArray.intersect(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ShortArray.intersect(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun IntArray.intersect(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun LongArray.intersect(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun FloatArray.intersect(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun DoubleArray.intersect(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun BooleanArray.intersect(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun CharArray.intersect(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.subtract(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.subtract(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.subtract(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.subtract(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.subtract(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.subtract(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.subtract(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.subtract(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toMutableSet(): MutableSet<T> {\n    val set = LinkedHashSet<T>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toMutableSet(): MutableSet<Byte> {\n    val set = LinkedHashSet<Byte>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toMutableSet(): MutableSet<Short> {\n    val set = LinkedHashSet<Short>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toMutableSet(): MutableSet<Int> {\n    val set = LinkedHashSet<Int>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toMutableSet(): MutableSet<Long> {\n    val set = LinkedHashSet<Long>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toMutableSet(): MutableSet<Float> {\n    val set = LinkedHashSet<Float>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toMutableSet(): MutableSet<Double> {\n    val set = LinkedHashSet<Double>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toMutableSet(): MutableSet<Boolean> {\n    val set = LinkedHashSet<Boolean>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toMutableSet(): MutableSet<Char> {\n    val set = LinkedHashSet<Char>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Array<out T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ByteArray.union(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ShortArray.union(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun IntArray.union(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun LongArray.union(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun FloatArray.union(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun DoubleArray.union(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun BooleanArray.union(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun CharArray.union(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Array<out T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ByteArray.all(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ShortArray.all(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun IntArray.all(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun LongArray.all(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun FloatArray.all(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun DoubleArray.all(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun BooleanArray.all(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun CharArray.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Array<out T>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ByteArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ShortArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun IntArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun LongArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun FloatArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun DoubleArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun BooleanArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun CharArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Array<out T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ByteArray.any(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ShortArray.any(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun IntArray.any(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun LongArray.any(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun FloatArray.any(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun DoubleArray.any(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun BooleanArray.any(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun CharArray.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ByteArray.count(predicate: (Byte) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ShortArray.count(predicate: (Short) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun IntArray.count(predicate: (Int) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun LongArray.count(predicate: (Long) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun FloatArray.count(predicate: (Float) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun DoubleArray.count(predicate: (Double) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun BooleanArray.count(predicate: (Boolean) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun CharArray.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Array<out T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ByteArray.fold(initial: R, operation: (acc: R, Byte) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ShortArray.fold(initial: R, operation: (acc: R, Short) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> IntArray.fold(initial: R, operation: (acc: R, Int) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> LongArray.fold(initial: R, operation: (acc: R, Long) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> FloatArray.fold(initial: R, operation: (acc: R, Float) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> DoubleArray.fold(initial: R, operation: (acc: R, Double) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> BooleanArray.fold(initial: R, operation: (acc: R, Boolean) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> CharArray.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ByteArray.foldRight(initial: R, operation: (Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ShortArray.foldRight(initial: R, operation: (Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> IntArray.foldRight(initial: R, operation: (Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> LongArray.foldRight(initial: R, operation: (Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> FloatArray.foldRight(initial: R, operation: (Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRight(initial: R, operation: (Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRight(initial: R, operation: (Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> CharArray.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRightIndexed(initial: R, operation: (index: Int, Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRightIndexed(initial: R, operation: (index: Int, Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRightIndexed(initial: R, operation: (index: Int, Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRightIndexed(initial: R, operation: (index: Int, Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRightIndexed(initial: R, operation: (index: Int, Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRightIndexed(initial: R, operation: (index: Int, Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRightIndexed(initial: R, operation: (index: Int, Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun <T> Array<out T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ByteArray.forEach(action: (Byte) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ShortArray.forEach(action: (Short) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun IntArray.forEach(action: (Int) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun LongArray.forEach(action: (Long) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun FloatArray.forEach(action: (Float) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun DoubleArray.forEach(action: (Double) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun BooleanArray.forEach(action: (Boolean) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun CharArray.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Array<out T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ByteArray.forEachIndexed(action: (index: Int, Byte) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ShortArray.forEachIndexed(action: (index: Int, Short) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun IntArray.forEachIndexed(action: (index: Int, Int) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun LongArray.forEachIndexed(action: (index: Int, Long) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun FloatArray.forEachIndexed(action: (index: Int, Float) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun DoubleArray.forEachIndexed(action: (index: Int, Double) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun BooleanArray.forEachIndexed(action: (index: Int, Boolean) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun CharArray.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.max(): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ByteArray.max(): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ShortArray.max(): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun IntArray.max(): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun LongArray.max(): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun CharArray.max(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.maxBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.maxBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> IntArray.maxBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> LongArray.maxBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.maxBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.maxBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.maxBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> CharArray.maxBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.maxWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.maxWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.maxWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.maxWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.maxWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.maxWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.maxWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.maxWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.maxWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.min(): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ByteArray.min(): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ShortArray.min(): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun IntArray.min(): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun LongArray.min(): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun CharArray.min(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.minBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.minBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.minBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> IntArray.minBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> LongArray.minBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.minBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.minBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.minBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> CharArray.minBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.minWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.minWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.minWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.minWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.minWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.minWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.minWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.minWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.minWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Array<out T>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ByteArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ShortArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun IntArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun LongArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun FloatArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun DoubleArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun BooleanArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun CharArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Array<out T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ByteArray.none(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ShortArray.none(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun IntArray.none(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun LongArray.none(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun FloatArray.none(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun DoubleArray.none(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun BooleanArray.none(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun CharArray.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Array<out T>.reduce(operation: (acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ByteArray.reduce(operation: (acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ShortArray.reduce(operation: (acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun IntArray.reduce(operation: (acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun LongArray.reduce(operation: (acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun FloatArray.reduce(operation: (acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun DoubleArray.reduce(operation: (acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun BooleanArray.reduce(operation: (acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharArray.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Array<out T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ByteArray.reduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ShortArray.reduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun IntArray.reduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun LongArray.reduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun FloatArray.reduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun DoubleArray.reduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun BooleanArray.reduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharArray.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    if (isEmpty())\n        return null\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun ByteArray.reduceOrNull(operation: (acc: Byte, Byte) -> Byte): Byte? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun ShortArray.reduceOrNull(operation: (acc: Short, Short) -> Short): Short? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun IntArray.reduceOrNull(operation: (acc: Int, Int) -> Int): Int? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun LongArray.reduceOrNull(operation: (acc: Long, Long) -> Long): Long? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun FloatArray.reduceOrNull(operation: (acc: Float, Float) -> Float): Float? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun DoubleArray.reduceOrNull(operation: (acc: Double, Double) -> Double): Double? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun BooleanArray.reduceOrNull(operation: (acc: Boolean, Boolean) -> Boolean): Boolean? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun CharArray.reduceOrNull(operation: (acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> Array<out T>.reduceRight(operation: (T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ByteArray.reduceRight(operation: (Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ShortArray.reduceRight(operation: (Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun IntArray.reduceRight(operation: (Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun LongArray.reduceRight(operation: (Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun FloatArray.reduceRight(operation: (Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun DoubleArray.reduceRight(operation: (Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun BooleanArray.reduceRight(operation: (Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharArray.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> Array<out T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ByteArray.reduceRightIndexed(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ShortArray.reduceRightIndexed(operation: (index: Int, Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun IntArray.reduceRightIndexed(operation: (index: Int, Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun LongArray.reduceRightIndexed(operation: (index: Int, Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun FloatArray.reduceRightIndexed(operation: (index: Int, Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun DoubleArray.reduceRightIndexed(operation: (index: Int, Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun BooleanArray.reduceRightIndexed(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharArray.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun ByteArray.reduceRightOrNull(operation: (Byte, acc: Byte) -> Byte): Byte? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun ShortArray.reduceRightOrNull(operation: (Short, acc: Short) -> Short): Short? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun IntArray.reduceRightOrNull(operation: (Int, acc: Int) -> Int): Int? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun LongArray.reduceRightOrNull(operation: (Long, acc: Long) -> Long): Long? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun FloatArray.reduceRightOrNull(operation: (Float, acc: Float) -> Float): Float? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun DoubleArray.reduceRightOrNull(operation: (Double, acc: Double) -> Double): Double? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun BooleanArray.reduceRightOrNull(operation: (Boolean, acc: Boolean) -> Boolean): Boolean? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun CharArray.reduceRightOrNull(operation: (Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Array<out T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.scan(initial: R, operation: (acc: R, Byte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.scan(initial: R, operation: (acc: R, Short) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.scan(initial: R, operation: (acc: R, Int) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.scan(initial: R, operation: (acc: R, Long) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.scan(initial: R, operation: (acc: R, Float) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.scan(initial: R, operation: (acc: R, Double) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.scan(initial: R, operation: (acc: R, Boolean) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.scan(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Array<out T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.scanReduce(operation: (acc: S, T) -> S): List<S> {\n    if (isEmpty()) return emptyList()\n    var accumulator: S = this[0]\n    val result = ArrayList<S>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.scanReduce(operation: (acc: Byte, Byte) -> Byte): List<Byte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Byte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.scanReduce(operation: (acc: Short, Short) -> Short): List<Short> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Short>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.scanReduce(operation: (acc: Int, Int) -> Int): List<Int> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Int>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.scanReduce(operation: (acc: Long, Long) -> Long): List<Long> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Long>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.scanReduce(operation: (acc: Float, Float) -> Float): List<Float> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Float>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.scanReduce(operation: (acc: Double, Double) -> Double): List<Double> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Double>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.scanReduce(operation: (acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Boolean>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.scanReduce(operation: (acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.scanReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    if (isEmpty()) return emptyList()\n    var accumulator: S = this[0]\n    val result = ArrayList<S>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.scanReduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): List<Byte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Byte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.scanReduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): List<Short> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Short>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.scanReduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): List<Int> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Int>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.scanReduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): List<Long> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Long>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.scanReduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): List<Float> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Float>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.scanReduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): List<Double> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Double>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.scanReduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Boolean>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.scanReduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumBy(selector: (Byte) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumBy(selector: (Short) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumBy(selector: (Int) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumBy(selector: (Long) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumBy(selector: (Float) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumBy(selector: (Double) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumBy(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumByDouble(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumByDouble(selector: (Short) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumByDouble(selector: (Int) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumByDouble(selector: (Long) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumByDouble(selector: (Float) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumByDouble(selector: (Double) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumByDouble(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Array<T?>.requireNoNulls(): Array<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Array<T>\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun <T> Array<out T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun ByteArray.partition(predicate: (Byte) -> Boolean): Pair<List<Byte>, List<Byte>> {\n    val first = ArrayList<Byte>()\n    val second = ArrayList<Byte>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun ShortArray.partition(predicate: (Short) -> Boolean): Pair<List<Short>, List<Short>> {\n    val first = ArrayList<Short>()\n    val second = ArrayList<Short>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun IntArray.partition(predicate: (Int) -> Boolean): Pair<List<Int>, List<Int>> {\n    val first = ArrayList<Int>()\n    val second = ArrayList<Int>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun LongArray.partition(predicate: (Long) -> Boolean): Pair<List<Long>, List<Long>> {\n    val first = ArrayList<Long>()\n    val second = ArrayList<Long>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun FloatArray.partition(predicate: (Float) -> Boolean): Pair<List<Float>, List<Float>> {\n    val first = ArrayList<Float>()\n    val second = ArrayList<Float>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun DoubleArray.partition(predicate: (Double) -> Boolean): Pair<List<Double>, List<Double>> {\n    val first = ArrayList<Double>()\n    val second = ArrayList<Double>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun BooleanArray.partition(predicate: (Boolean) -> Boolean): Pair<List<Boolean>, List<Boolean>> {\n    val first = ArrayList<Boolean>()\n    val second = ArrayList<Boolean>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun CharArray.partition(predicate: (Char) -> Boolean): Pair<List<Char>, List<Char>> {\n    val first = ArrayList<Char>()\n    val second = ArrayList<Char>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Array<out R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Array<out R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Array<out R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Array<out R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Array<out R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Array<out R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Array<out R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Array<out R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Array<out R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Array<out R>, transform: (a: Short, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Array<out R>, transform: (a: Int, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Array<out R>, transform: (a: Long, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Array<out R>, transform: (a: Float, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Array<out R>, transform: (a: Double, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Array<out R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Array<out R>, transform: (a: Char, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Iterable<R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Iterable<R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Iterable<R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Iterable<R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Iterable<R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Iterable<R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Iterable<R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Iterable<R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Iterable<R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Iterable<R>, transform: (a: Short, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Iterable<R>, transform: (a: Int, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Iterable<R>, transform: (a: Long, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Iterable<R>, transform: (a: Float, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Iterable<R>, transform: (a: Double, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Iterable<R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Iterable<R>, transform: (a: Char, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ByteArray.zip(other: ByteArray): List<Pair<Byte, Byte>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ShortArray.zip(other: ShortArray): List<Pair<Short, Short>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun IntArray.zip(other: IntArray): List<Pair<Int, Int>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun LongArray.zip(other: LongArray): List<Pair<Long, Long>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun FloatArray.zip(other: FloatArray): List<Pair<Float, Float>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun DoubleArray.zip(other: DoubleArray): List<Pair<Double, Double>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun BooleanArray.zip(other: BooleanArray): List<Pair<Boolean, Boolean>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun CharArray.zip(other: CharArray): List<Pair<Char, Char>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ByteArray.zip(other: ByteArray, transform: (a: Byte, b: Byte) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ShortArray.zip(other: ShortArray, transform: (a: Short, b: Short) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> IntArray.zip(other: IntArray, transform: (a: Int, b: Int) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> LongArray.zip(other: LongArray, transform: (a: Long, b: Long) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> FloatArray.zip(other: FloatArray, transform: (a: Float, b: Float) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> DoubleArray.zip(other: DoubleArray, transform: (a: Double, b: Double) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> BooleanArray.zip(other: BooleanArray, transform: (a: Boolean, b: Boolean) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> CharArray.zip(other: CharArray, transform: (a: Char, b: Char) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Array<out T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ByteArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ShortArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> IntArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> LongArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> FloatArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> DoubleArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> BooleanArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> CharArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Array<out T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ByteArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ShortArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun IntArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun LongArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun FloatArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun DoubleArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun BooleanArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun CharArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun <T> Array<out T>.asIterable(): Iterable<T> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ByteArray.asIterable(): Iterable<Byte> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ShortArray.asIterable(): Iterable<Short> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun IntArray.asIterable(): Iterable<Int> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun LongArray.asIterable(): Iterable<Long> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun FloatArray.asIterable(): Iterable<Float> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun DoubleArray.asIterable(): Iterable<Double> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun BooleanArray.asIterable(): Iterable<Boolean> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun CharArray.asIterable(): Iterable<Char> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun <T> Array<out T>.asSequence(): Sequence<T> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ByteArray.asSequence(): Sequence<Byte> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ShortArray.asSequence(): Sequence<Short> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun IntArray.asSequence(): Sequence<Int> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun LongArray.asSequence(): Sequence<Long> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun FloatArray.asSequence(): Sequence<Float> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun DoubleArray.asSequence(): Sequence<Double> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun BooleanArray.asSequence(): Sequence<Boolean> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun CharArray.asSequence(): Sequence<Char> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Array<out Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Array<out Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Array<out Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Array<out Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Array<out Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Array<out Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ByteArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ShortArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun IntArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun LongArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun FloatArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun DoubleArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Array<out Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Array<out Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Array<out Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Array<out Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Array<out Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Array<out Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ByteArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ShortArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun IntArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun LongArray.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun FloatArray.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun DoubleArray.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n",null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\nimport kotlin.contracts.contract\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trim(predicate: (Char) -> Boolean): CharSequence {\n    var startIndex = 0\n    var endIndex = length - 1\n    var startFound = false\n\n    while (startIndex <= endIndex) {\n        val index = if (!startFound) startIndex else endIndex\n        val match = predicate(this[index])\n\n        if (!startFound) {\n            if (!match)\n                startFound = true\n            else\n                startIndex += 1\n        } else {\n            if (!match)\n                break\n            else\n                endIndex -= 1\n        }\n    }\n\n    return subSequence(startIndex, endIndex + 1)\n}\n\n/**\n * Returns a string having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trim(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trim(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimStart(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n\n    return \"\"\n}\n\n/**\n * Returns a string having leading characters matching the [predicate] removed.\n */\npublic inline fun String.trimStart(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimStart(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimEnd(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices.reversed())\n        if (!predicate(this[index]))\n            return subSequence(0, index + 1)\n\n    return \"\"\n}\n\n/**\n * Returns a string having trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trimEnd(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimEnd(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trim(vararg chars: Char): CharSequence = trim { it in chars }\n\n/**\n * Returns a string having leading and trailing characters from the [chars] array removed.\n */\npublic fun String.trim(vararg chars: Char): String = trim { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading characters from the [chars] array removed.\n */\npublic fun CharSequence.trimStart(vararg chars: Char): CharSequence = trimStart { it in chars }\n\n/**\n * Returns a string having leading characters from the [chars] array removed.\n */\npublic fun String.trimStart(vararg chars: Char): String = trimStart { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trimEnd(vararg chars: Char): CharSequence = trimEnd { it in chars }\n\n/**\n * Returns a string having trailing characters from the [chars] array removed.\n */\npublic fun String.trimEnd(vararg chars: Char): String = trimEnd { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing whitespace removed.\n */\npublic fun CharSequence.trim(): CharSequence = trim(Char::isWhitespace)\n\n/**\n * Returns a string having leading and trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trim(): String = (this as CharSequence).trim().toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading whitespace removed.\n */\npublic fun CharSequence.trimStart(): CharSequence = trimStart(Char::isWhitespace)\n\n/**\n * Returns a string having leading whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimStart(): String = (this as CharSequence).trimStart().toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing whitespace removed.\n */\npublic fun CharSequence.trimEnd(): CharSequence = trimEnd(Char::isWhitespace)\n\n/**\n * Returns a string having trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimEnd(): String = (this as CharSequence).trimEnd().toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the beginning\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun CharSequence.padStart(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    sb.append(this)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the beginning with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun String.padStart(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padStart(length, padChar).toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the end\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun CharSequence.padEnd(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    sb.append(this)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the end with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun String.padEnd(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padEnd(length, padChar).toString()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty.\n *\n * @sample samples.text.Strings.stringIsNullOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.length == 0\n}\n\n/**\n * Returns `true` if this char sequence is empty (contains no characters).\n *\n * @sample samples.text.Strings.stringIsEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isEmpty(): Boolean = length == 0\n\n/**\n * Returns `true` if this char sequence is not empty.\n *\n * @sample samples.text.Strings.stringIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotEmpty(): Boolean = length > 0\n\n// implemented differently in JVM and JS\n//public fun String.isBlank(): Boolean = length() == 0 || all { it.isWhitespace() }\n\n\n/**\n * Returns `true` if this char sequence is not empty and contains some characters except of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNotBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotBlank(): Boolean = !isBlank()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty or consists solely of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNullOrBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrBlank(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrBlank != null)\n    }\n\n    return this == null || this.isBlank()\n}\n\n/**\n * Iterator for characters of the given char sequence.\n */\npublic operator fun CharSequence.iterator(): CharIterator = object : CharIterator() {\n    private var index = 0\n\n    public override fun nextChar(): Char = get(index++)\n\n    public override fun hasNext(): Boolean = index < length\n}\n\n/** Returns the string if it is not `null`, or the empty string otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun String?.orEmpty(): String = this ?: \"\"\n\n/**\n * Returns this char sequence if it's not empty\n * or the result of calling [defaultValue] function if the char sequence is empty.\n *\n * @sample samples.text.Strings.stringIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Returns this char sequence if it is not empty and doesn't consist solely of whitespace characters,\n * or the result of calling [defaultValue] function otherwise.\n *\n * @sample samples.text.Strings.stringIfBlank\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifBlank(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isBlank()) defaultValue() else this\n\n/**\n * Returns the range of valid character indices for this char sequence.\n */\npublic val CharSequence.indices: IntRange\n    get() = 0..length - 1\n\n/**\n * Returns the index of the last character in the char sequence or -1 if it is empty.\n */\npublic val CharSequence.lastIndex: Int\n    get() = this.length - 1\n\n/**\n * Returns `true` if this CharSequence has Unicode surrogate pair at the specified [index].\n */\npublic fun CharSequence.hasSurrogatePairAt(index: Int): Boolean {\n    return index in 0..length - 2\n            && this[index].isHighSurrogate()\n            && this[index + 1].isLowSurrogate()\n}\n\n/**\n * Returns a substring specified by the given [range] of indices.\n */\npublic fun String.substring(range: IntRange): String = substring(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence specified by the given [range] of indices.\n */\npublic fun CharSequence.subSequence(range: IntRange): CharSequence = subSequence(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence.\n *\n * This extension is chosen only for invocation with old-named parameters.\n * Replace parameter names with the same as those of [CharSequence.subSequence].\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning\n@Deprecated(\"Use parameters named startIndex and endIndex.\", ReplaceWith(\"subSequence(startIndex = start, endIndex = end)\"))\npublic inline fun String.subSequence(start: Int, end: Int): CharSequence = subSequence(start, end)\n\n/**\n * Returns a substring of chars from a range of this char sequence starting at the [startIndex] and ending right before the [endIndex].\n *\n * @param startIndex the start index (inclusive).\n * @param endIndex the end index (exclusive). If not specified, the length of the char sequence is used.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.substring(startIndex: Int, endIndex: Int = length): String = subSequence(startIndex, endIndex).toString()\n\n/**\n * Returns a substring of chars at indices from the specified [range] of this char sequence.\n */\npublic fun CharSequence.substring(range: IntRange): String = subSequence(range.start, range.endInclusive + 1).toString()\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range\n * is replaced with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@UseExperimental(ExperimentalStdlibApi::class)\npublic fun CharSequence.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n    val sb = StringBuilder()\n    sb.appendRange(this, 0, startIndex)\n    sb.append(replacement)\n    sb.appendRange(this, endIndex, length)\n    return sb\n}\n\n/**\n * Replaces the part of the string at the given range with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(startIndex, endIndex, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range]\n * is replaced with the [replacement] char sequence.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\npublic fun CharSequence.replaceRange(range: IntRange, replacement: CharSequence): CharSequence =\n    replaceRange(range.start, range.endInclusive + 1, replacement)\n\n/**\n * Replace the part of string at the given [range] with the [replacement] string.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(range: IntRange, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(range, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range is removed.\n *\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n * [endIndex] is not included in the removed part.\n */\n@UseExperimental(ExperimentalStdlibApi::class)\npublic fun CharSequence.removeRange(startIndex: Int, endIndex: Int): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n\n    if (endIndex == startIndex)\n        return this.subSequence(0, length)\n\n    val sb = StringBuilder(length - (endIndex - startIndex))\n    sb.appendRange(this, 0, startIndex)\n    sb.appendRange(this, endIndex, length)\n    return sb\n}\n\n/**\n * Removes the part of a string at a given range.\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n *  [endIndex] is not included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(startIndex: Int, endIndex: Int): String =\n    (this as CharSequence).removeRange(startIndex, endIndex).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range] is removed.\n *\n * The end index of the [range] is included in the removed part.\n */\npublic fun CharSequence.removeRange(range: IntRange): CharSequence = removeRange(range.start, range.endInclusive + 1)\n\n/**\n * Removes the part of a string at the given [range].\n *\n * The end index of the [range] is included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(range: IntRange): String =\n    (this as CharSequence).removeRange(range).toString()\n\n/**\n * If this char sequence starts with the given [prefix], returns a new char sequence\n * with the prefix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removePrefix(prefix: CharSequence): CharSequence {\n    if (startsWith(prefix)) {\n        return subSequence(prefix.length, length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string starts with the given [prefix], returns a copy of this string\n * with the prefix removed. Otherwise, returns this string.\n */\npublic fun String.removePrefix(prefix: CharSequence): String {\n    if (startsWith(prefix)) {\n        return substring(prefix.length)\n    }\n    return this\n}\n\n/**\n * If this char sequence ends with the given [suffix], returns a new char sequence\n * with the suffix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSuffix(suffix: CharSequence): CharSequence {\n    if (endsWith(suffix)) {\n        return subSequence(0, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string ends with the given [suffix], returns a copy of this string\n * with the suffix removed. Otherwise, returns this string.\n */\npublic fun String.removeSuffix(suffix: CharSequence): String {\n    if (endsWith(suffix)) {\n        return substring(0, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with the given [prefix] and ends with the given [suffix],\n * returns a new char sequence having both the given [prefix] and [suffix] removed.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(prefix: CharSequence, suffix: CharSequence): CharSequence {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return subSequence(prefix.length, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Removes from a string both the given [prefix] and [suffix] if and only if\n * it starts with the [prefix] and ends with the [suffix].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(prefix: CharSequence, suffix: CharSequence): String {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return substring(prefix.length, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with and ends with the given [delimiter],\n * returns a new char sequence having this [delimiter] removed both from the start and end.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(delimiter: CharSequence): CharSequence = removeSurrounding(delimiter, delimiter)\n\n/**\n * Removes the given [delimiter] string from both the start and the end of this string\n * if and only if it starts with and ends with the [delimiter].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(delimiter: CharSequence): String = removeSurrounding(delimiter, delimiter)\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n\n// public fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean): String // JVM- and JS-specific\n// public fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean): String // JVM- and JS-specific\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the given [replacement].\n *\n * The [replacement] can consist of any combination of literal text and $-substitutions. To treat the replacement string\n * literally escape it with the [kotlin.text.Regex.Companion.escapeReplacement] method.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, replacement: String): String = regex.replace(this, replacement)\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the result of the given function [transform] that takes [MatchResult] and returns a string to be used as a\n * replacement for that match.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, noinline transform: (MatchResult) -> CharSequence): String =\n    regex.replace(this, transform)\n\n/**\n * Replaces the first occurrence of the given regular expression [regex] in this char sequence with specified [replacement] expression.\n *\n * @param replacement A replacement expression that can include substitutions. See [Regex.replaceFirst] for details.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replaceFirst(regex: Regex, replacement: String): String = regex.replaceFirst(this, replacement)\n\n\n/**\n * Returns `true` if this char sequence matches the given regular expression.\n */\n@kotlin.internal.InlineOnly\npublic inline infix fun CharSequence.matches(regex: Regex): Boolean = regex.matches(this)\n\n/**\n * Implementation of [regionMatches] for CharSequences.\n * Invoked when it's already known that arguments are not Strings, so that no additional type checks are performed.\n */\ninternal fun CharSequence.regionMatchesImpl(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean): Boolean {\n    if ((otherOffset < 0) || (thisOffset < 0) || (thisOffset > this.length - length) || (otherOffset > other.length - length)) {\n        return false\n    }\n\n    for (index in 0 until length) {\n        if (!this[thisOffset + index].equals(other[otherOffset + index], ignoreCase))\n            return false\n    }\n    return true\n}\n\n/**\n * Returns `true` if this char sequence starts with the specified character.\n */\npublic fun CharSequence.startsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[0].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence ends with the specified character.\n */\npublic fun CharSequence.endsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[lastIndex].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix)\n    else\n        return regionMatchesImpl(0, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if a substring of this char sequence starting at the specified offset [startIndex] starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, startIndex: Int, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix, startIndex)\n    else\n        return regionMatchesImpl(startIndex, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if this char sequence ends with the specified suffix.\n */\npublic fun CharSequence.endsWith(suffix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && suffix is String)\n        return this.endsWith(suffix)\n    else\n        return regionMatchesImpl(length - suffix.length, suffix, 0, suffix.length, ignoreCase)\n}\n\n\n// common prefix and suffix\n\n/**\n * Returns the longest string `prefix` such that this char sequence and [other] char sequence both start with this prefix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common prefix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonPrefixWith\n */\npublic fun CharSequence.commonPrefixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val shortestLength = minOf(this.length, other.length)\n\n    var i = 0\n    while (i < shortestLength && this[i].equals(other[i], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(i - 1) || other.hasSurrogatePairAt(i - 1)) {\n        i--\n    }\n    return subSequence(0, i).toString()\n}\n\n/**\n * Returns the longest string `suffix` such that this char sequence and [other] char sequence both end with this suffix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common suffix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonSuffixWith\n */\npublic fun CharSequence.commonSuffixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val thisLength = this.length\n    val otherLength = other.length\n    val shortestLength = minOf(thisLength, otherLength)\n\n    var i = 0\n    while (i < shortestLength && this[thisLength - i - 1].equals(other[otherLength - i - 1], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(thisLength - i - 1) || other.hasSurrogatePairAt(otherLength - i - 1)) {\n        i--\n    }\n    return subSequence(thisLength - i, thisLength).toString()\n}\n\n\n// indexOfAny()\n\n/**\n * Finds the index of the first occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.indexOfAny(chars: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeIndexOf(char, startIndex)\n    }\n\n    for (index in startIndex.coerceAtLeast(0)..lastIndex) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n    return -1\n}\n\n/**\n * Finds the index of the last occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.lastIndexOfAny(chars: CharArray, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeLastIndexOf(char, startIndex)\n    }\n\n\n    for (index in startIndex.coerceAtMost(lastIndex) downTo 0) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n\n    return -1\n}\n\n\nprivate fun CharSequence.indexOf(other: CharSequence, startIndex: Int, endIndex: Int, ignoreCase: Boolean, last: Boolean = false): Int {\n    val indices = if (!last)\n        startIndex.coerceAtLeast(0)..endIndex.coerceAtMost(length)\n    else\n        startIndex.coerceAtMost(lastIndex) downTo endIndex.coerceAtLeast(0)\n\n    if (this is String && other is String) { // smart cast\n        for (index in indices) {\n            if (other.regionMatches(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    } else {\n        for (index in indices) {\n            if (other.regionMatchesImpl(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    }\n    return -1\n}\n\nprivate fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int, ignoreCase: Boolean, last: Boolean): Pair<Int, String>? {\n    if (!ignoreCase && strings.size == 1) {\n        val string = strings.single()\n        val index = if (!last) indexOf(string, startIndex) else lastIndexOf(string, startIndex)\n        return if (index < 0) null else index to string\n    }\n\n    val indices = if (!last) startIndex.coerceAtLeast(0)..length else startIndex.coerceAtMost(lastIndex) downTo 0\n\n    if (this is String) {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatches(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    } else {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatchesImpl(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    }\n\n    return null\n}\n\n/**\n * Finds the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the first occurrence of matched string from [strings] and the string matched\n * or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)\n\n/**\n * Finds the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the last occurrence of matched string from [strings] and the string matched or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findLastAnyOf(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)\n\n/**\n * Finds the index of the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.indexOfAny(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)?.first ?: -1\n\n/**\n * Finds the index of the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.lastIndexOfAny(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)?.first ?: -1\n\n\n// indexOf\n\n/**\n * Returns the index within this string of the first occurrence of the specified character, starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.indexOf(char: Char, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the first occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of [string] or `-1` if none is found.\n * @sample samples.text.Strings.indexOf\n */\npublic fun CharSequence.indexOf(string: String, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, length, ignoreCase)\n    else\n        nativeIndexOf(string, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified character,\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(char: Char, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        lastIndexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeLastIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of [string] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(string: String, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, 0, ignoreCase, last = true)\n    else\n        nativeLastIndexOf(string, startIndex)\n}\n\n/**\n * Returns `true` if this char sequence contains the specified [other] sequence of characters as a substring.\n *\n * @param ignoreCase `true` to ignore character case when comparing strings. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(other: CharSequence, ignoreCase: Boolean = false): Boolean =\n    if (other is String)\n        indexOf(other, ignoreCase = ignoreCase) >= 0\n    else\n        indexOf(other, 0, length, ignoreCase) >= 0\n\n\n\n/**\n * Returns `true` if this char sequence contains the specified character [char].\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(char: Char, ignoreCase: Boolean = false): Boolean =\n    indexOf(char, ignoreCase = ignoreCase) >= 0\n\n/**\n * Returns `true` if this char sequence contains at least one match of the specified regular expression [regex].\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharSequence.contains(regex: Regex): Boolean = regex.containsMatchIn(this)\n\n\n// rangesDelimitedBy\n\n\nprivate class DelimitedRangesSequence(\n    private val input: CharSequence,\n    private val startIndex: Int,\n    private val limit: Int,\n    private val getNextMatch: CharSequence.(currentIndex: Int) -> Pair<Int, Int>?\n) : Sequence<IntRange> {\n\n    override fun iterator(): Iterator<IntRange> = object : Iterator<IntRange> {\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var currentStartIndex: Int = startIndex.coerceIn(0, input.length)\n        var nextSearchIndex: Int = currentStartIndex\n        var nextItem: IntRange? = null\n        var counter: Int = 0\n\n        private fun calcNext() {\n            if (nextSearchIndex < 0) {\n                nextState = 0\n                nextItem = null\n            } else {\n                if (limit > 0 && ++counter >= limit || nextSearchIndex > input.length) {\n                    nextItem = currentStartIndex..input.lastIndex\n                    nextSearchIndex = -1\n                } else {\n                    val match = input.getNextMatch(nextSearchIndex)\n                    if (match == null) {\n                        nextItem = currentStartIndex..input.lastIndex\n                        nextSearchIndex = -1\n                    } else {\n                        val (index, length) = match\n                        nextItem = currentStartIndex until index\n                        currentStartIndex = index + length\n                        nextSearchIndex = currentStartIndex + if (length == 0) 1 else 0\n                    }\n                }\n                nextState = 1\n            }\n        }\n\n        override fun next(): IntRange {\n            if (nextState == -1)\n                calcNext()\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem as IntRange\n            // Clean next to avoid keeping reference on yielded instance\n            nextItem = null\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex ->\n        indexOfAny(delimiters, currentIndex, ignoreCase = ignoreCase).let { if (it < 0) null else it to 1 }\n    })\n}\n\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: Array<out String>, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" } )\n    val delimitersList = delimiters.asList()\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex -> findAnyOf(delimitersList, currentIndex, ignoreCase = ignoreCase, last = false)?.let { it.first to it.second.length } })\n\n}\n\n\n// split\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and matches at each position the first element in [delimiters]\n * that is equal to a delimiter in this instance at that position.\n */\npublic fun CharSequence.split(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        val delimiter = delimiters[0]\n        if (!delimiter.isEmpty()) {\n            return split(delimiter, ignoreCase, limit)\n        }\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.split(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        return split(delimiters[0].toString(), ignoreCase, limit)\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiter].\n * This is specialized version of split which receives single non-empty delimiter and offers better performance\n *\n * @param delimiter String used as delimiter\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\nprivate fun CharSequence.split(delimiter: String, ignoreCase: Boolean, limit: Int): List<String> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    var currentOffset = 0\n    var nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    if (nextIndex == -1 || limit == 1) {\n        return listOf(this.toString())\n    }\n\n    val isLimited = limit > 0\n    val result = ArrayList<String>(if (isLimited) limit.coerceAtMost(10) else 10)\n    do {\n        result.add(substring(currentOffset, nextIndex))\n        currentOffset = nextIndex + delimiter.length\n        // Do not search for next occurrence if we're reaching limit\n        if (isLimited && result.size == limit - 1) break\n        nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    } while (nextIndex != -1)\n\n    result.add(substring(currentOffset, length))\n    return result\n}\n\n/**\n * Splits this char sequence around matches of the given regular expression.\n *\n * @param limit Non-negative value specifying the maximum number of substrings to return.\n * Zero by default means no limit is set.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.split(regex: Regex, limit: Int = 0): List<String> = regex.split(this, limit)\n\n/**\n * Splits this char sequence to a sequence of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lineSequence(): Sequence<String> = splitToSequence(\"\\r\\n\", \"\\n\", \"\\r\")\n\n/**\n * Splits this char sequence to a list of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lines(): List<String> = lineSequence().toList()\n",null,null,null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:kotlin.jvm.JvmName(\"ComparisonsKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin.comparisons\n\n/**\n * Compares two values using the specified functions [selectors] to calculate the result of the comparison.\n * The functions are called sequentially, receive the given values [a] and [b] and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for [a] and [b] values do not\n * compare as equal, the result of that comparison is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSelectors\n */\npublic fun <T> compareValuesBy(a: T, b: T, vararg selectors: (T) -> Comparable<*>?): Int {\n    require(selectors.size > 0)\n    return compareValuesByImpl(a, b, selectors)\n}\n\nprivate fun <T> compareValuesByImpl(a: T, b: T, selectors: Array<out (T) -> Comparable<*>?>): Int {\n    for (fn in selectors) {\n        val v1 = fn(a)\n        val v2 = fn(b)\n        val diff = compareValues(v1, v2)\n        if (diff != 0) return diff\n    }\n    return 0\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return [Comparable] objects.\n * The result of comparison of these [Comparable] instances is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareValuesBy(a: T, b: T, selector: (T) -> Comparable<*>?): Int {\n    return compareValues(selector(a), selector(b))\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return objects of type K which are then being\n * compared with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareValuesBy(a: T, b: T, comparator: Comparator<in K>, selector: (T) -> K): Int {\n    return comparator.compare(selector(a), selector(b))\n}\n\n//// Not so useful without type inference for receiver of expression\n//// compareValuesWith(v1, v2, compareBy { it.prop1 } thenByDescending { it.prop2 })\n///**\n// * Compares two values using the specified [comparator].\n// */\n//@Suppress(\"NOTHING_TO_INLINE\")\n//public inline fun <T> compareValuesWith(a: T, b: T, comparator: Comparator<T>): Int = comparator.compare(a, b)\n//\n\n\n/**\n * Compares two nullable [Comparable] values. Null is considered less than any value.\n *\n * @sample samples.comparisons.Comparisons.compareValues\n */\npublic fun <T : Comparable<*>> compareValues(a: T?, b: T?): Int {\n    if (a === b) return 0\n    if (a == null) return -1\n    if (b == null) return 1\n\n    @Suppress(\"UNCHECKED_CAST\")\n    return (a as Comparable<Any>).compareTo(b)\n}\n\n/**\n * Creates a comparator using the sequence of functions to calculate a result of comparison.\n * The functions are called sequentially, receive the given values `a` and `b` and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for `a` and `b` values do not\n * compare as equal, the result of that comparison is returned from the [Comparator].\n *\n * @sample samples.comparisons.Comparisons.compareByWithSelectors\n */\npublic fun <T> compareBy(vararg selectors: (T) -> Comparable<*>?): Comparator<T> {\n    require(selectors.size > 0)\n    return Comparator { a, b -> compareValuesByImpl(a, b, selectors) }\n}\n\n\n/**\n * Creates a comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(a, b, selector) }\n\n/**\n * Creates a comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * @sample samples.comparisons.Comparisons.compareByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(a, b, comparator, selector) }\n\n/**\n * Creates a descending comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(b, a, selector) }\n\n/**\n * Creates a descending comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * Note that an order of [comparator] is reversed by this wrapper.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(b, a, comparator, selector) }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenBy\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenBy.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(a, b, selector)\n    }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenBy.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(a, b, comparator, selector)\n    }\n\n/**\n * Creates a descending comparator using the primary comparator and\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenByDescending\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenByDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(b, a, selector)\n    }\n\n/**\n * Creates a descending comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenByDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(b, a, comparator, selector)\n    }\n\n\n/**\n * Creates a comparator using the primary comparator and function to calculate a result of comparison.\n *\n * @sample samples.comparisons.Comparisons.thenComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenComparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenComparator.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparison(a, b)\n    }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.then\n */\npublic infix fun <T> Comparator<T>.then(comparator: Comparator<in T>): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@then.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparator.compare(a, b)\n    }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.thenDescending\n */\npublic infix fun <T> Comparator<T>.thenDescending(comparator: Comparator<in T>): Comparator<T> =\n    Comparator<T> { a, b ->\n        val previousCompare = this@thenDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparator.compare(b, a)\n    }\n\n// Not so useful without type inference for receiver of expression\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Any> nullsFirst(comparator: Comparator<in T>): Comparator<T?> =\n    Comparator { a, b ->\n        when {\n            a === b -> 0\n            a == null -> -1\n            b == null -> 1\n            else -> comparator.compare(a, b)\n        }\n    }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Comparable<T>> nullsFirst(): Comparator<T?> = nullsFirst(naturalOrder())\n\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Any> nullsLast(comparator: Comparator<in T>): Comparator<T?> =\n    Comparator { a, b ->\n        when {\n            a === b -> 0\n            a == null -> 1\n            b == null -> -1\n            else -> comparator.compare(a, b)\n        }\n    }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Comparable<T>> nullsLast(): Comparator<T?> = nullsLast(naturalOrder())\n\n/**\n * Returns a comparator that compares [Comparable] objects in natural order.\n *\n * @sample samples.comparisons.Comparisons.naturalOrderComparator\n */\npublic fun <T : Comparable<T>> naturalOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n\n/**\n * Returns a comparator that compares [Comparable] objects in reversed natural order.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Comparable<T>> reverseOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n\n/**\n *  Returns a comparator that imposes the reverse ordering of this comparator.\n *\n *  @sample samples.comparisons.Comparisons.reversed\n */\npublic fun <T> Comparator<T>.reversed(): Comparator<T> = when (this) {\n    is ReversedComparator -> this.comparator\n    NaturalOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n    ReverseOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n    else -> ReversedComparator(this)\n}\n\n\nprivate class ReversedComparator<T>(public val comparator: Comparator<T>) : Comparator<T> {\n    override fun compare(a: T, b: T): Int = comparator.compare(b, a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<T> = comparator\n}\n\nprivate object NaturalOrderComparator : Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = a.compareTo(b)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = ReverseOrderComparator\n}\n\nprivate object ReverseOrderComparator : Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = b.compareTo(a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = NaturalOrderComparator\n}\n",null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n\n/**\n * Returns a bit representation of the specified floating-point value as [Long]\n * according to the IEEE 754 floating-point \"double format\" bit layout.\n */\n@SinceKotlin(\"1.2\")\n@library(\"doubleToBits\")\npublic actual fun Double.toBits(): Long = definedExternally\n\n/**\n * Returns a bit representation of the specified floating-point value as [Long]\n * according to the IEEE 754 floating-point \"double format\" bit layout,\n * preserving `NaN` values exact layout.\n */\n@SinceKotlin(\"1.2\")\n@library(\"doubleToRawBits\")\npublic actual fun Double.toRawBits(): Long = definedExternally\n\n/**\n * Returns the [Double] value corresponding to a given bit representation.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Double.Companion.fromBits(bits: Long): Double = js(\"Kotlin\").doubleFromBits(bits).unsafeCast<Double>()\n\n/**\n * Returns a bit representation of the specified floating-point value as [Int]\n * according to the IEEE 754 floating-point \"single format\" bit layout.\n *\n * Note that in Kotlin/JS [Float] range is wider than \"single format\" bit layout can represent,\n * so some [Float] values may overflow, underflow or loose their accuracy after conversion to bits and back.\n */\n@SinceKotlin(\"1.2\")\n@library(\"floatToBits\")\npublic actual fun Float.toBits(): Int = definedExternally\n\n/**\n * Returns a bit representation of the specified floating-point value as [Int]\n * according to the IEEE 754 floating-point \"single format\" bit layout,\n * preserving `NaN` values exact layout.\n *\n * Note that in Kotlin/JS [Float] range is wider than \"single format\" bit layout can represent,\n * so some [Float] values may overflow, underflow or loose their accuracy after conversion to bits and back.\n */\n@SinceKotlin(\"1.2\")\n@library(\"floatToRawBits\")\npublic actual fun Float.toRawBits(): Int = definedExternally\n\n/**\n * Returns the [Float] value corresponding to a given bit representation.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Float.Companion.fromBits(bits: Int): Float = js(\"Kotlin\").floatFromBits(bits).unsafeCast<Float>()\n\n\ninternal inline fun Long(low: Int, high: Int) = js(\"Kotlin\").Long.fromBits(low, high).unsafeCast<Long>()\ninternal inline val Long.low: Int get() = this.asDynamic().getLowBits().unsafeCast<Int>()\ninternal inline val Long.high: Int get() = this.asDynamic().getHighBits().unsafeCast<Int>()",null,null,null,null,null,null,null],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBA6EA,0C;gCCiwCA,yD;uBAAA,gD;yBDlvCA,+C;;;;;;;cEzC8C,yB;qBCsC9C,8C;mCC+CA,gD;iCCxHA,iC;;;;;;;;;;;;;;;;;eCOA,I;;;;;;;;;;;;;;;;;;gBC+PA,c;oBAAA,oB;YJ/BA,6B;;;;;;;;;;;;;uBKvOQ,qB;;;;;;WC25EW,gB;mBRt/CnB,4C;mBSx6BA,wB;;eCyCA,wC;;;;;;;;;;;;;;;;;;;;;;;;;;oBCmKqB,sB;;eCjNrB,kB;iBAEA,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YCEQ,M;iBAUA,oD;mBbu/CR,oC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qBcx8CA,6C;kBCzCA,wD;iBDiBA,yC;gBEhCA,K;edgpBA,wC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EevpBA,e;IA6EC,mBlBDyC,W;IkBEzC,qBlBFyC,W;IkBGzC,mBlBHyC,W;IkBIzC,iBlBJyC,W;IkBKzC,mBlBLyC,W;IkBMzC,qBlBNyC,W;IkBOzC,iBlBPyC,W;IkBQzC,aAAY,qB;G;EAjFQ,mC;IACnB,qC;IADoB,gB;IAAe,gB;G;EACnC,mC;IAAA,uC;IACC,iBAAsB,C;IACtB,yBAA8B,E;IAC9B,kCAAuC,E;IACvC,2BAAgC,E;IAChC,0BAA+B,E;IAC/B,kCAAuC,E;IACvC,yBAA8B,C;IAC9B,aAAY,kBAAU,CAAV,EAAa,EAAb,C;G;;;;;;;EARb,+C;IAAA,8C;MAAA,6B;KAAA,uC;G;qCAWA,Y;IAAkC,gB;G;;;;;;uCAZnC,Y;IAAqB,gB;G;uCAArB,Y;IAAoC,gB;G;yCAApC,sB;IAAA,yBAAqB,kCAArB,EAAoC,kCAApC,C;G;qCAAA,Y;IAAA,c;IAAqB,qD;IAAe,qD;IAApC,a;G;mCAAA,iB;IAAA,4IAAqB,oCAArB,IAAoC,oCAApC,I;G;;;;;;;;EAmBA,8B;IAAA,kC;IACC,4BAAkC,E;G;;SAAlC,Y;MAAA,gC;K;;;;;;;;EADD,0C;IAAA,yC;MAAA,wB;KAAA,kC;G;EAImB,uC;IAAC,0B;IAA0B,gB;IAG7C,4BAAkC,S;G;oCADlC,Y;IAAkC,OAAE,cAAF,oBAAa,S;G;;SAC/C,Y;MAAA,gC;K;;;;;;;sCAHD,Y;IAAoB,qB;G;sCAApB,Y;IAA8C,gB;G;uCAA9C,2B;IAAA,wBAAoB,iDAApB,EAA8C,kCAA9C,C;G;oCAAA,Y;IAAA,c;IAAoB,0D;IAA0B,qD;IAA9C,a;G;kCAAA,iB;IAAA,4IAAoB,8CAApB,IAA8C,oCAA9C,I;G;EAMiB,qC;IAAC,0B;IAA0B,gB;IAE3C,4BAAkC,S;G;;SAAlC,Y;MAAA,gC;K;;;;;;;oCAFD,Y;IAAkB,qB;G;oCAAlB,Y;IAA4C,gB;G;qCAA5C,2B;IAAA,sBAAkB,iDAAlB,EAA4C,kCAA5C,C;G;kCAAA,Y;IAAA,OAAkB,qDAAlB,IAA4C,sCAA5C,O;G;kCAAA,Y;IAAA,c;IAAkB,0D;IAA0B,qD;IAA5C,a;G;gCAAA,iB;IAAA,4IAAkB,8CAAlB,IAA4C,oCAA5C,I;G;EAKkB,2B;IAAC,gB;IAClB,4BAAkC,S;G;;SAAlC,Y;MAAA,gC;K;;;;;;;qCADD,Y;IAAmB,gB;G;uCAAnB,gB;IAAA,uBAAmB,kCAAnB,C;G;mCAAA,Y;IAAA,OAAmB,4CAAnB,M;G;mCAAA,Y;IAAA,c;IAAmB,qD;IAAnB,a;G;iCAAA,iB;IAAA,2IAAmB,oCAAnB,G;G;EAImB,4B;IAAC,gB;IACnB,4BAAkC,S;G;;SAAlC,Y;MAAA,gC;K;;;;;;;sCADD,Y;IAAoB,gB;G;wCAApB,gB;IAAA,wBAAoB,kCAApB,C;G;oCAAA,Y;IAAA,OAAoB,6CAApB,M;G;oCAAA,Y;IAAA,c;IAAoB,qD;IAApB,a;G;kCAAA,iB;IAAA,2IAAoB,oCAApB,G;G;EAIA,wB;IAAA,4B;IACC,4BAAkC,E;G;;SAAlC,Y;MAAA,gC;K;;;;;;;;EADD,oC;IAAA,mC;MAAA,kB;KAAA,4B;G;EAIA,yB;IAAA,6B;IACC,4BAAkC,E;G;;SAAlC,Y;MAAA,gC;K;;;;;;;;EADD,qC;IAAA,oC;MAAA,mB;KAAA,6B;G;EAIoB,2C;IAAC,gB;IAAkB,gC;IAEtC,4BAAkC,S;G;;SAAlC,Y;MAAA,gC;K;;;;;;;uCAFD,Y;IAAqB,gB;G;uCAArB,Y;IAAuC,wB;G;wCAAvC,8B;IAAA,yBAAqB,kCAArB,EAAuC,0DAAvC,C;G;qCAAA,Y;IAAA,OAAqB,8CAArB,IAAuC,sDAAvC,O;G;qCAAA,Y;IAAA,c;IAAqB,qD;IAAkB,6D;IAAvC,a;G;mCAAA,iB;IAAA,4IAAqB,oCAArB,IAAuC,oDAAvC,I;G;EAKqB,4C;IAAC,gB;IAAkB,gC;IAEvC,4BAAkC,S;G;;SAAlC,Y;MAAA,gC;K;;;;;;;wCAFD,Y;IAAsB,gB;G;wCAAtB,Y;IAAwC,wB;G;yCAAxC,8B;IAAA,0BAAsB,kCAAtB,EAAwC,0DAAxC,C;G;sCAAA,Y;IAAA,OAAsB,+CAAtB,IAAwC,sDAAxC,O;G;sCAAA,Y;IAAA,c;IAAsB,qD;IAAkB,6D;IAAxC,a;G;oCAAA,iB;IAAA,4IAAsB,oCAAtB,IAAwC,oDAAxC,I;G;EAKqB,sC;IAAC,gC;IAErB,4BAAkC,E;G;;SAAlC,Y;MAAA,gC;K;;;;;;;wCAFD,Y;IAAsB,wB;G;0CAAtB,wB;IAAA,0BAAsB,0DAAtB,C;G;sCAAA,Y;IAAA,OAAsB,+DAAtB,M;G;sCAAA,Y;IAAA,c;IAAsB,6D;IAAtB,a;G;oCAAA,iB;IAAA,2IAAsB,oDAAtB,G;G;EAKsB,uC;IAAC,gC;IAEtB,4BAAkC,E;G;;SAAlC,Y;MAAA,gC;K;;;;;;;yCAFD,Y;IAAuB,wB;G;2CAAvB,wB;IAAA,2BAAuB,0DAAvB,C;G;uCAAA,Y;IAAA,OAAuB,gEAAvB,M;G;uCAAA,Y;IAAA,c;IAAuB,6D;IAAvB,a;G;qCAAA,iB;IAAA,2IAAuB,oDAAvB,G;G;EAKmB,yC;IAAC,kB;IAAgB,4B;IACnC,4BAAkC,cAAW,UAAX,M;G;;SAAlC,Y;MAAA,gC;K;;;;;;;sCADD,Y;IAAoB,iB;G;sCAApB,Y;IAAoC,sB;G;wCAApC,6B;IAAA,wBAAoB,qCAApB,EAAoC,oDAApC,C;G;oCAAA,Y;IAAA,OAAoB,+CAApB,IAAoC,kDAApC,O;G;oCAAA,Y;IAAA,c;IAAoB,sD;IAAgB,2D;IAApC,a;G;kCAAA,iB;IAAA,4IAAoB,sCAApB,IAAoC,gDAApC,I;G;;SAYoB,Y;MAAQ,OAAA,UAAM,K;K;;;SACb,Y;MAAQ,OAAA,UAAM,M;K;;;SACT,Y;MAAQ,OAAA,UAAM,Q;K;;;SACd,Y;MAAQ,OAAA,UAAM,Q;K;;;SACR,Y;MAAQ,OAAA,UAAM,W;K;;;SACL,Y;MAAQ,OAAA,UAAM,c;K;;;SACf,Y;MAAQ,OAAA,UAAM,W;K;;EAEnC,oC;IAAC,gB;IAAkB,oB;G;;;;;;sCAAtC,Y;IAAoB,gB;G;sCAApB,Y;IAAsC,kB;G;wCAAtC,wB;IAAA,wBAAoB,kCAApB,EAAsC,wCAAtC,C;G;oCAAA,Y;IAAA,OAAoB,6CAApB,IAAsC,0CAAtC,O;G;oCAAA,Y;IAAA,c;IAAoB,qD;IAAkB,uD;IAAtC,a;G;kCAAA,iB;IAAA,4IAAoB,oCAApB,IAAsC,wCAAtC,I;G;mCAEA,a;IAIC,YAAc,Y;IACd,YAAc,Y;IALe,IAO7B,MAAM,4B;IAG8B,gBAArB,SAAU,UAAV,C;IjBsuCN,kBAAM,eAAa,mCAAwB,EAAxB,CAAb,C;IAqEA,Q;IAAA,2B;IAAb,OAAa,cAAb,C;MAAa,sB;MACT,WAAY,WiBtzCW,IAW5B,sBjB2yCiB,C;;IiBtzCW,IAU7B,ejB6yCS,W;IiBtyCyB,kBAArB,SAAU,UAAV,C;IjB+tCJ,oBAAM,eAAa,qCAAwB,EAAxB,CAAb,C;IAqEA,U;IAAA,+B;IAAb,OAAa,gBAAb,C;MAAa,0B;mBACT,a;MiBpyCL,WAlB4B,IAkBjB,qBAAU,UAAV,C;MACuB,kBAArB,SAAU,UAAV,C;MjB6tCL,oBAAM,eAAa,qCAAwB,EAAxB,CAAb,C;MAqEA,U;MAAA,+B;MAAb,OAAa,gBAAb,C;QAAa,0B;QACT,aAAY,WiBnyCuB,GAnBZ,IAmBY,qBAAU,UAAV,GAnBZ,IAmBoC,qBAAU,UAAV,CAAxB,CjBmyCvB,C;;MiBnyCjB,YjBoyCQ,a;MADS,YAAZ,aAAY,EiBlyCjB,iBAAS,IAAT,EAAqB,MAAN,KAAM,CAArB,CjBkyCiB,C;;IiBtzCW,IAiB7B,ajBsyCS,a;IiB9xCT,gBAAkB,U;IAGkB,kBAAnB,SAAQ,SAAR,C;IjBotCR,oBAAM,eAAa,qCAAwB,EAAxB,CAAb,C;IAqEA,U;IAAA,+B;IAAb,OAAa,gBAAb,C;MAAa,0B;MACT,aAAY,WiBtzCW,IA6B5B,wBjByxCiB,C;;IiBtzCW,IA4B7B,iBjB2xCS,a;IiBtxCyB,kBAAnB,SAAQ,SAAR,C;IjB+sCN,oBAAM,eAAa,qCAAwB,EAAxB,CAAb,C;IAqEA,U;IAAA,+B;IAAb,OAAa,gBAAb,C;MAAa,0B;MACT,aAAY,WiBtzCW,IAkC5B,qBjBoxCiB,C;;IiBtzCW,IAiC7B,ejBsxCS,a;IiBlxCkC,kBAAjB,IArCG,IAqCjB,cAAc,EArCG,IAqCC,YAAJ,C;IjB2sCjB,oBAAM,eAAa,qCAAwB,EAAxB,CAAb,C;IAqEA,U;IAAA,+B;IAAb,OAAa,gBAAb,C;MAAa,0B;MACT,aAAY,WiBjxC+B,iBArCpB,IAqCoB,EjBixCjB,MiBjxCmC,MAAlB,EjBixCjB,MiBjxC6C,OAA5B,CjBixC/B,C;;IiBtzCW,IAqC7B,ajBkxCS,a;IiB7wC2B,kBAArB,SAAU,UAAV,C;IjBssCN,oBAAM,eAAa,qCAAwB,EAAxB,CAAb,C;IAqEA,U;IAAA,+B;IAAb,OAAa,gBAAb,C;MAAa,0B;MACT,aAAY,WiB3wCjB,mBA3C4B,IA2CjB,yBAAc,UAAd,CAAX,EA3C4B,IA2CS,sBAArC,CjB2wCiB,C;;IiBtzCW,IA0C7B,ejB6wCS,a;IiBtwC6B,kBAArB,SAAU,UAAV,C;IjB+rCR,oBAAM,eAAa,qCAAwB,EAAxB,CAAb,C;IAqEA,U;IAAA,+B;IAAb,OAAa,gBAAb,C;MAAa,0B;mBACT,a;MiBpwCL,aAlD4B,IAkDf,yBAAc,UAAd,C;MACb,eAAiB,U;MACjB,iBAAmB,U;MACnB,qBAAuB,U;MACvB,oBAAsB,U;MACtB,cAAgB,aAAY,UAAZ,C;MACuB,kBAArB,SAAU,UAAV,C;MjBwrCV,oBAAM,eAAa,qCAAwB,EAAxB,CAAb,C;MAqEA,U;MAAA,+B;MAAb,OAAa,gBAAb,C;QAAa,0B;QACT,aAAY,WiB7vChB,sBACU,UADV,EAEQ,UAFR,EAGY,UAHZ,EAzD2B,IA6DnB,wBAAa,UAAb,CAJR,EAzD2B,IA8DX,wBAAa,UAAb,CALhB,CjB6vCgB,C;;MiB9vCjB,iBjB+vCQ,a;MiBtvCR,aAjE4B,IAiEf,sB;MjBqvCI,YAAZ,aAAY,EiBnvCjB,mBACU,MADV,EAEY,QAFZ,EAGc,UAHd,EAIkB,cAJlB,EAKiB,aALjB,EAMW,OANX,EAnE4B,IA0EnB,MAPT,EAQc,UARd,EASU,MATV,CjBmvCiB,C;;IiBtzCW,IAiD7B,iBjBswCS,a;IiBvzCoB,W;G;EAqFd,yH;IACf,oB;IACA,wB;IACA,4B;IACA,oC;IACA,kC;IACA,sB;IACA,kB;IACA,4B;IACA,oB;IAEA,qBAAW,KAAK,+BAAL,C;IAOV,mBAAc,I;G;;SAPf,Y;aC1J0F,wB;K;;ED4JxE,wD;IAAA,qB;MAAE,QAAM,QAAL,KAAK,C;IAAI,C;G;EAAS,2E;IAAA,qB;MAAE,OAAA,oCAAa,cAAK,qBAAL,EAAY,KAAZ,C;IAAkB,C;G;EAFxD,oD;IAAA,mB;MACI,gBAAX,SAAR,uBAAQ,C;MACP,UAAqC,2Db/I9B,Sa+I8B,C;MEnMmE,kBpB8FxD,kB;MoB9FgE,OFmMhG,wCb/IT,Sa+IS,CEnMuG,Cf8EvH,We9EiI,KAAV,CAAP,C;QAAwB,cAAQ,If8EhJ,We9EyJ,KAAT,C;Qf8EhJ,WM/BK,WAAI,OAAJ,C;;MOmJN,ObnHQ,W;IasHT,C;G;;;;;;EAOuB,iE;IACvB,gB;IACA,Y;IACA,oB;IACA,gB;IACA,gC;G;;;;;;2CALD,Y;IACC,gB;G;2CADD,Y;IAEC,c;G;2CAFD,Y;IAGC,kB;G;2CAHD,Y;IAIC,gB;G;2CAJD,Y;IAKC,wB;G;6CALD,gD;IAAA,6BACC,kCADD,EAEC,4BAFD,EAGC,wCAHD,EAIC,kCAJD,EAKC,0DALD,C;G;yCAAA,Y;IAAA,OACC,kDADD,IAEC,kCAFD,KAGC,0CAHD,KAIC,sCAJD,KAKC,sDALD,O;G;yCAAA,Y;IAAA,c;IACC,qD;IACA,mD;IACA,uD;IACA,qD;IACA,6D;IALD,a;G;uCAAA,iB;IAAA,4IACC,oCADD,IAEC,gCAFD,IAGC,wCAHD,IAIC,oCAJD,IAKC,oDALD,I;G;;;;;;;;EAYoB,qD;IACnB,0B;IACA,0B;IACA,gB;IACA,kB;G;;SAHA,Y;MAAA,0B;K;;;;;;;uCADD,Y;IACC,gB;G;uCADD,Y;IAEC,qB;G;uCAFD,Y;IAGC,gB;G;uCAHD,Y;IAIC,iB;G;yCAJD,wC;IAAA,yBACC,kCADD,EAEC,iDAFD,EAGC,kCAHD,EAIC,qCAJD,C;G;qCAAA,Y;IAAA,OACC,8CADD,IAEC,gDAFD,KAGC,sCAHD,KAIC,wCAJD,O;G;qCAAA,Y;IAAA,c;IACC,qD;IACA,0D;IACA,qD;IACA,sD;IAJD,a;G;mCAAA,iB;IAAA,4IACC,oCADD,IAEC,8CAFD,IAGC,oCAHD,IAIC,sCAJD,I;G;EAOsB,uD;IAAC,0B;IAAsC,0B;IAAoB,8B;G;;SAA1D,Y;MAAA,0B;K;;;;;;;yCAAvB,Y;IAAuB,gB;G;yCAAvB,Y;IAA6D,qB;G;yCAA7D,Y;IAAiF,uB;G;2CAAjF,wC;IAAA,2BAAuB,kCAAvB,EAA6D,iDAA7D,EAAiF,uDAAjF,C;G;uCAAA,Y;IAAA,OAAuB,gDAAvB,IAA6D,gDAA7D,KAAiF,oDAAjF,O;G;uCAAA,Y;IAAA,c;IAAuB,qD;IAAsC,0D;IAAoB,4D;IAAjF,a;G;qCAAA,iB;IAAA,4IAAuB,oCAAvB,IAA6D,8CAA7D,IAAiF,kDAAjF,I;G;EAEqB,qD;IAAC,0B;IAAsC,0B;IAAoB,4B;G;;SAA1D,Y;MAAA,0B;K;;;;;;;wCAAtB,Y;IAAsB,gB;G;wCAAtB,Y;IAA4D,qB;G;wCAA5D,Y;IAAgF,sB;G;0CAAhF,uC;IAAA,0BAAsB,kCAAtB,EAA4D,iDAA5D,EAAgF,oDAAhF,C;G;sCAAA,Y;IAAA,OAAsB,+CAAtB,IAA4D,gDAA5D,KAAgF,kDAAhF,O;G;sCAAA,Y;IAAA,c;IAAsB,qD;IAAsC,0D;IAAoB,2D;IAAhF,a;G;oCAAA,iB;IAAA,4IAAsB,oCAAtB,IAA4D,8CAA5D,IAAgF,gDAAhF,I;G;EAEwB,2D;IAAC,0B;IAAsC,0B;IAAoB,kC;G;;SAA1D,Y;MAAA,0B;K;;;;;;;2CAAzB,Y;IAAyB,gB;G;2CAAzB,Y;IAA+D,qB;G;2CAA/D,Y;IAAmF,yB;G;6CAAnF,0C;IAAA,6BAAyB,kCAAzB,EAA+D,iDAA/D,EAAmF,6DAAnF,C;G;yCAAA,Y;IAAA,OAAyB,kDAAzB,IAA+D,gDAA/D,KAAmF,wDAAnF,O;G;yCAAA,Y;IAAA,c;IAAyB,qD;IAAsC,0D;IAAoB,8D;IAAnF,a;G;uCAAA,iB;IAAA,4IAAyB,oCAAzB,IAA+D,8CAA/D,IAAmF,sDAAnF,I;G;EAGuB,+E;IACtB,gB;IACA,gB;IACA,4B;IACA,8C;IACA,oB;G;;;;;;0CALD,Y;IACC,gB;G;0CADD,Y;IAEC,gB;G;0CAFD,Y;IAGC,sB;G;0CAHD,Y;IAIC,+B;G;0CAJD,Y;IAKC,kB;G;4CALD,+D;IAAA,4BACC,kCADD,EAEC,kCAFD,EAGC,oDAHD,EAIC,+EAJD,EAKC,wCALD,C;G;wCAAA,Y;IAAA,OACC,iDADD,IAEC,sCAFD,KAGC,kDAHD,KAIC,oEAJD,KAKC,0CALD,O;G;wCAAA,Y;IAAA,c;IACC,qD;IACA,qD;IACA,2D;IACA,oE;IACA,uD;IALD,a;G;sCAAA,iB;IAAA,4IACC,oCADD,IAEC,oCAFD,IAGC,gDAHD,IAIC,kEAJD,IAKC,wCALD,I;G;EAQoB,4C;IAAC,8B;IAA6B,oB;G;;;;;;uCAAlD,Y;IAAqB,uB;G;uCAArB,Y;IAAkD,kB;G;yCAAlD,+B;IAAA,yBAAqB,uDAArB,EAAkD,wCAAlD,C;G;qCAAA,Y;IAAA,OAAqB,4DAArB,IAAkD,0CAAlD,O;G;qCAAA,Y;IAAA,c;IAAqB,4D;IAA6B,uD;IAAlD,a;G;mCAAA,iB;IAAA,4IAAqB,kDAArB,IAAkD,wCAAlD,I;G;EAEc,oD;IAAC,c;IAAc,gC;IAAgC,0B;G;;SACnD,Y;MAAQ,OAAA,iBAAa,K;K;;;SACX,Y;MAAQ,OAAA,iBAAa,O;K;;;SACxB,Y;MAAQ,OAAA,cAAU,O;K;;;;;;;EAGd,6C;IAAC,8B;IAA6B,oB;G;;;;;;wCAAnD,Y;IAAsB,uB;G;wCAAtB,Y;IAAmD,kB;G;0CAAnD,+B;IAAA,0BAAsB,uDAAtB,EAAmD,wCAAnD,C;G;sCAAA,Y;IAAA,OAAsB,6DAAtB,IAAmD,0CAAnD,O;G;sCAAA,Y;IAAA,c;IAAsB,4D;IAA6B,uD;IAAnD,a;G;oCAAA,iB;IAAA,4IAAsB,kDAAtB,IAAmD,wCAAnD,I;G;oCAEA,a;IACC,OAAO,kBAAU,6BAAc,QAAF,CAAE,CAAd,CAAV,EAAoC,wBAAW,CAAX,CAApC,C;EACR,C;uCAEA,a;IACY,Q;IAAX,WAAW,iDAAa,QAAF,CAAE,CAAb,oC;IACX,WAAW,4BAAa,QAAF,CAAE,CAAb,C;IACX,YAAc,OAAF,CAAE,C;IACd,eAAe,CAAC,QAAU,CAAX,MAAoB,C;IACnC,cAAc,CAAC,QAAU,CAAX,MAAoB,C;IAClC,kBAAkB,CAAC,QAAU,CAAX,MAAoB,C;IAEtC,IAAI,CAAC,QAAU,CAAX,MAAoB,CAAxB,C;MACC,yBAAyB,4BAAa,QAAF,CAAE,CAAb,C;KAGa,gBAArB,SAAU,QAAF,CAAE,CAAV,C;IjBykCT,kBAAM,eAAa,mCAAwB,EAAxB,CAAb,C;IAqEA,U;IAAA,6B;IAAb,OAAa,gBAAb,C;MAAa,wB;MACT,WAAY,WiB9oCjB,4BAAa,UAAb,CjB8oCiB,C;;IiB/oClB,iBjBgpCS,W;IiB7oCT,+BAAiC,QAAF,CAAE,C;IACjC,aAAa,wBAAW,CAAX,C;IACb,OAAO,qBACC,IADD,EAEC,IAFD,EAGO,UAHP,EAIgB,6BAAY,wBAAZ,CAJhB,EAKG,MALH,C;EAOR,C;2CAEA,uB;IAAoD,QAAM,IAAN,C;WACnD,C;QADmD,OACjC,sBAAK,KAAL,C;WAClB,C;QAFmD,OAEhC,uBAAM,KAAN,C;WACnB,C;QAHmD,OAG9B,yBAAQ,KAAR,C;WACrB,C;QAJmD,OAI/B,yBAAQ,KAAR,C;WACpB,E;QALmD,OAKhC,I;WACnB,E;QANmD,OAM/B,K;WAEpB,E;WAAA,C;QARmD,OAUlD,I;WAED,C;WAAA,E;WAAA,E;WAAA,E;WAAA,E;WAAA,E;WAAA,C;QAZmD,OAmBlD,4BAAW,KAAX,C;cAnBkD,OAqB3C,UAAU,yBAAV,C;;G;EAWP,kF;IAAA,mB;MAAwB,wB;MAAI,2B;MAAA,iC;MAIf,Q;MAHZ,gBAAkB,QAAF,WAAE,C;MAClB,WbpQO,SaoQI,wBAAa,QAAF,WAAE,CAAb,C;MACX,iBAAmB,QAAF,WAAE,C;MACP,IAAI,eAAc,CAAlB,C;QACX,gBAAkB,OAAF,WAAE,C;QAClB,ObxQM,SawQN,0BAAiB,SAAjB,EAA4B,UAA5B,C;;QAEA,W;;MAJD,gB;MAJuB,OAUvB,kBAAU,cAAV,EAAgB,SAAhB,EAA2B,IAA3B,EAAiC,KAAjC,C;K;G;EAGD,kG;IAAA,mB;MAA8B,2B;MAAA,iC;MAAA,iC;MAC7B,gBAAkB,QAAF,WAAE,C;MAClB,kBAAoB,QAAF,WAAE,C;MACpB,cAAc,CAAC,iBAAS,CAAV,MAAmB,C;MACjC,iBAAiB,CAAC,iBAAS,CAAV,MAAmB,C;MAJX,OAKzB,oBAAY,cAAZ,EAAkB,SAAlB,EAA6B,WAA7B,C;K;G;qCA1BH,a;IAC8B,gBAArB,SAAU,QAAF,CAAE,CAAV,C;IjBkiCC,kBAAM,eAAa,mCAAwB,EAAxB,CAAb,C;IAqEA,Q;IAAA,2B;IAAb,OAAa,cAAb,C;MAAa,sB;mBACT,W;MiB5kCoB,U;MA3BzB,WAAW,4BAAa,UAAb,C;MACX,WAAa,S;MACb,WAAW,SAAU,C;MACrB,kBAAkB,CAAC,OAAS,CAAV,MAAmB,C;MACrC,gBAAgB,OAAS,E;MAEzB,0E;MAaA,oF;MAQmB,QAAM,SAAN,C;aAClB,C;UAAQ,0B;UAAR,K;aACA,C;UAAQ,0B;UAAR,K;aACA,C;UAAQ,4B;UAAR,K;aACA,C;UAAQ,4B;UAAR,K;aACA,C;UAAQ,4B;UAAR,K;aACA,C;UAAQ,4BAAW,IAAX,EAAmB,UAAnB,EAAgC,UAAhC,C;UAAR,K;aACA,C;UAAQ,+BAAc,IAAd,EAAsB,UAAtB,EAAmC,UAAnC,C;UAAR,K;gBACQ,mBAAU,wBAAqB,SAA/B,C;UARU,K;;MAAnB,kB;MAUA,IAAI,WAAJ,C;QACuC,kBAArB,SAAU,UAAV,C;QjB2/BV,oBAAM,eAAa,qCAAwB,EAAxB,CAAb,C;QAqEA,U;QAAA,+B;QAAb,OAAa,gBAAb,C;UAAa,0B;UACT,aAAY,WiBjkC4B,2BAAY,UAAZ,CjBikC5B,C;;QiBjkChB,gBjBkkCO,a;OADS,YAAZ,WAAY,EiB/jCjB,KjB+jCiB,C;;IiBxmClB,OjBymCS,W;EiB9jCV,C;EAEqB,8B;IAAC,gB;IACrB,YAAwB,I;G;;;;;;wCADzB,Y;IAAsB,gB;G;0CAAtB,gB;IAAA,0BAAsB,kCAAtB,C;G;sCAAA,Y;IAAA,OAAsB,+CAAtB,M;G;sCAAA,Y;IAAA,c;IAAsB,qD;IAAtB,a;G;oCAAA,iB;IAAA,2IAAsB,oCAAtB,G;G;qCAIA,a;IACC,qBAAuB,QAAF,CAAE,C;IACvB,iBAAiB,4BAAa,QAAF,CAAE,CAAb,C;IACyB,gBAAxB,SAAQ,cAAR,C;IjB8+BT,kBAAM,eAAa,mCAAwB,EAAxB,CAAb,C;IAqEA,Q;IAAA,2B;IAAb,OAAa,cAAb,C;MAAa,sB;MACT,WAAY,WiBpjC8B,4BAAa,UAAb,CjBojC9B,C;;IiBpjClB,iBjBqjCS,W;IiBpjCT,WAAW,yBAAU,QAAF,CAAE,CAAV,C;IACX,YAAc,OAAF,CAAE,C;IACd,qBAAqB,CAAC,QAAU,CAAX,MAAoB,C;IACzC,sBAAsB,CAAC,QAAU,CAAX,MAAoB,C;IAC1C,gBAAgB,CAAC,QAAU,CAAX,MAAoB,C;IACpC,4BAA4B,CAAC,QAAU,CAAX,MAAoB,C;IAChD,eAAe,CAAC,QAAU,EAAX,MAAoB,C;IACnC,wBAAwB,CAAC,QAAU,GAAX,MAAoB,C;IAE5C,IAAI,qBAAJ,C;MACC,oBAAsB,OAAF,CAAE,C;MACuB,kBAAvB,SAAQ,aAAR,C;MjBk+Bd,oBAAM,eAAa,qCAAwB,EAAxB,CAAb,C;MAqEA,U;MAAA,+B;MAAb,OAAa,gBAAb,C;QAAa,0B;qBACT,a;QiBviCJ,iBAAmB,U;QACnB,mBAAqB,S;QACrB,YAAY,8BAAiB,YAAjB,EAA+B,UAA/B,C;QjBqiCI,YAAZ,aAAY,O;;MiBxiCjB,qBjByiCQ,a;KiBliCT,IAAI,iBAAJ,C;MAC+C,kBAAxB,SAAQ,cAAR,C;MjB09Bd,oBAAM,eAAa,qCAAwB,EAAxB,CAAb,C;MAqEA,U;MAAA,+B;MAAb,OAAa,gBAAb,C;QAAa,0B;QACT,aAAY,WiBhiCmC,yBAAU,UAAV,CjBgiCnC,C;;MiBhiCjB,qBjBiiCQ,a;KiB3hCT,OAAO,mBAAW,IAAX,C;EACR,C;;;;;;EhB5XD,gB;IAAA,oB;G;kCACC,a;IAIC,OAAiB,CAAV,gBAAO,CAAP,CAAU,Q;EAClB,C;EAEY,wB;IAAC,U;G;qCACZ,Y;IACC,QCgFmD,c;ID/EnD,OAAO,IAAP,C;MACC,UAAY,UAAF,MAAE,C;MACZ,WAAa,WAAF,MAAE,EAAW,GAAX,C;MACb,QAAU,OAAF,MAAE,C;MACV,IAAI,MAAK,CAAT,C;QAAe,K;MACf,YAAU,0BAAa,CAAb,C;MAAV,CC8NA,aD9NE,IC8NF,EAAS,KAAT,C;;ID5ND,OAAO,C;EACR,C;+CAEA,c;IAAkC,QAAM,EAAN,C;WACjC,C;QADiC,OACvB,UAAF,MAAE,C;WACV,C;QAAQ,QAAQ,OAAF,MAAE,CAAR,C;eACP,C;YAHgC,OAG3B,K;eACL,C;YAJgC,OAI3B,I;kBE+GwC,MAAM,2BF9GrC,aE8GmE,WAA9B,C;;;WF5GpD,C;QAPiC,OAOvB,YAAF,MAAE,EAAc,UAAF,MAAE,CAAd,C;WACV,C;QARiC,OAQzB,iB;WACR,C;QACC,WAAa,UAAF,MAAE,C;QGhBmB,MAAM,8B;WHoBvC,C;QAdiC,OAczB,I;WACR,C;QAfiC,OAezB,uB;WACR,C;QEmG8C,MAAM,2BFnGtC,2BEmGoE,WAA9B,C;WFlGpD,E;QACC,YAAc,UAAF,MAAE,C;QACE,gBAAf,SAAQ,KAAR,C;QDuyCM,kBAAM,eAAa,mCAAwB,EAAxB,CAAb,C;QAqEA,Q;QAAA,2B;QAAb,OAAa,cAAb,C;UAAa,sB;UACT,WAAY,WC72CM,WD62CN,C;;;QCh4CgB,ODi4CzB,W;WC52CR,E;QACC,cAAgB,UAAF,MAAE,C;QAChB,aAAe,UAAF,MAAE,C;QAvBiB,OAwBhC,kCAAiB,uBAAR,OAAQ,CAAR,KAAmB,6BAAS,EAAT,qBAAnB,CAAT,C;WAED,E;QA1BiC,OA0BvB,WAAF,MAAE,EAAa,UAAF,MAAE,CAAb,C;cEyFoC,MAAM,2BAA8B,CFxFpE,iBAAc,EEwFsD,YAA9B,C;;G;+BFrFrD,Y;IAAmB,iCAAe,OAAF,MAAE,CAAf,C;G;;;;;;;;;;;;EAnDrB,4B;IAAA,2B;MAAA,U;KAAA,oB;G;EmBOA,gB;IAAA,oB;G;gCAEC,a;IACC,UAAoB,CAAV,gBAAO,CAAP,CAAU,Q;IACpB,OAAO,G;EACR,C;EAEY,wB;IAAC,U;G;qCACZ,Y;IAcoB,Q;IAbnB,UAAU,sB;IACV,UAAU,CAAE,QAAS,CAAV,GAAiB,CAAlB,MAA2B,C;IACrC,MAAM,QAAS,C;IACb,OAAF,MAAE,C;IACF,QlBsEmD,c;IkBrEnD,IAAI,GAAJ,C;MACC,OAAO,IAAP,C;QACC,QAAQ,iB;QACR,IAAI,UAAK,EAAL,CAAJ,C;UAAa,K;QACb,YAAO,W;QAAP,ClBqND,akBrNG,ClBqNH,EAAS,KAAT,C;;;MkBlNyB,gBAAb,SAAQ,GAAR,C;MpBmzCL,kBAAM,eAAa,mCAAwB,EAAxB,CAAb,C;MAqEA,U;MAAA,6B;MAAb,OAAa,gBAAb,C;QAAa,wB;QACT,WAAY,WoBz3Ce,iBpBy3Cf,C;;MoBz3ChB,WpB03CO,W;MoBz3CW,U;MAAlB,aAAU,CAAV,gB;QAAuB,UAAE,iBAAK,CAAL,C;QAAF,cAAa,W;QAAb,ClBiNvB,aAAI,GAAJ,EAAS,OAAT,C;;;IkB/MD,OAAO,C;EACR,C;0CAEA,e;IACC,QlBuDmD,c;IkBtDjD,OAAF,MAAE,C;IACF,aAAU,CAAV,MAAkB,GAAlB,M;MAAuB,UAAE,W;MAAF,YAAY,W;MAAZ,ClByMtB,aAAI,GAAJ,EAAS,KAAT,C;;IkBxMD,OAAO,C;EACR,C;4CAEA,a;IACC,QrBkDiD,kB;IqBjDjD,W;IACA,aAAU,CAAV,MAAkB,CAAlB,M;MAAqB,CAAE,WAAI,WAAJ,C;IACvB,OAAO,C;EACR,C;4CAEA,gB;IAAsC,OAAE,UAAF,MAAE,EAAU,IAAV,C;G;0CAExC,oB;IAAY,wB;MAAA,WAAgB,C;IAC3B,UAAU,C;IACV,QAAU,OAAF,MAAE,C;IACV,IAAI,IAAI,GAAR,C;MAAc,MAAM,G;IACpB,QAAQ,C;IACR,OAAO,qBAAM,CAAN,IAAW,IAAI,GAAtB,C;MACC,MAAM,MAAQ,IAAM,G;MACpB,MAAM,OAAQ,C;MACd,IAAM,OAAF,MAAE,C;;IAEP,IAAI,IAAI,CAAR,C;MAAW,MAAM,OAAQ,C;IACzB,MAAM,MAAO,C;IACb,OAAO,QAAS,Q;EACjB,C;qCAEA,Y;IAA2B,OAAE,WAAF,MAAE,EAAW,qBAAQ,CAAR,CAAX,C;G;+CAE7B,c;IAAkC,QAAM,EAAN,C;WACjC,C;QADiC,OACzB,uB;WACR,C;QAFiC,OAEzB,I;WACR,C;QAHiC,OAGzB,K;WACR,C;QAJiC,OAIzB,I;WACR,C;QALiC,OAKzB,sB;WACR,C;QANiC,OAMvB,UAAF,MAAE,C;WACV,C;QAPiC,OAOzB,iB;WACR,C;QAAQ,MAAM,WAAM,yBAAN,C;WACd,C;QAAgB,OAAF,MAAE,C;QATiB,OASP,kCAAuB,uBAAZ,UAAF,MAAE,CAAY,CAAvB,C;WAC1B,C;QAViC,OAUzB,uBAAU,qBAAQ,CAAR,CAAV,C;WACR,E;QAXiC,OAWzB,iB;WACR,E;QAZiC,OAYzB,IAAI,iBAAJ,C;WACR,E;QAbiC,OAazB,uBAAU,qBAAQ,CAAR,CAAV,C;WACR,E;WAAA,E;WAAA,E;QAdiC,OAcb,uBAAU,qBAAQ,CAAR,CAAV,C;WACpB,E;QAAc,UAAU,qBAAQ,CAAR,C;QAAY,iB;QAfH,OAeiB,uBAAU,GAAV,C;WAClD,E;QAhBiC,OAgBzB,qBAAQ,qBAAQ,CAAR,CAAR,C;cACA,MAAM,WAAM,0BAAiB,EAAjB,CAAN,C;;G;+BAGf,Y;IAAa,iCAAe,OAAF,MAAE,CAAf,C;G;;;;;;;;;;;;EAhFf,4B;IAAA,2B;MAAA,U;KAAA,oB;G;ECRA,2B;IACC,YtB4EyC,W;IsB3EzC,atB2EyC,W;IsB1EzC,etB0EyC,W;IsBzEzC,etByEyC,W;IsBxEzC,kBtBwEyC,W;IsBvEzC,qBtBuEyC,W;IsBtEzC,kBtBsEyC,W;G;uDsBpEzC,a;IACC,eAAiB,QAAF,CAAE,C;IACV,kBAAO,CAAP,C;IAA+B,gBAAlB,SAAQ,QAAR,C;IrBq0CX,kBAAM,eAAa,mCAAwB,EAAxB,CAAb,C;IAqEA,U;IAAA,6B;IAAb,OAAa,gBAAb,C;MAAa,wB;MACT,WAAY,WqB34C4B,UrB24C5B,C;;IqB34ClB,YAAO,WrB44CE,WqB54CF,C;IACP,gBAAkB,QAAF,CAAE,C;IACV,oBAAO,CAAP,C;IAAgC,kBAAnB,SAAQ,SAAR,C;IrBm0CZ,oBAAM,eAAa,qCAAwB,EAAxB,CAAb,C;IAqEA,U;IAAA,+B;IAAb,OAAa,gBAAb,C;MAAa,0B;MACT,aAAY,WqBz4C8B,UrBy4C9B,C;;IqBz4ClB,aAAQ,arB04CC,aqB14CD,C;IACR,kBAAoB,QAAF,CAAE,C;IACV,oBAAO,GAAP,C;IAAoC,kBAArB,SAAQ,WAAR,C;IrBi0ChB,oBAAM,eAAa,qCAAwB,EAAxB,CAAb,C;IAqEA,U;IAAA,+B;IAAb,OAAa,gBAAb,C;MAAa,0B;MACT,aAAY,WqBv4CoC,YrBu4CpC,C;;IqBv4ClB,eAAU,arBw4CD,aqBx4CC,C;IACV,kBAAoB,QAAF,CAAE,C;IACV,oBAAO,EAAP,C;IAAmC,kBAArB,SAAQ,WAAR,C;IrB+zCf,oBAAM,eAAa,qCAAwB,EAAxB,CAAb,C;IAqEA,U;IAAA,+B;IAAb,OAAa,gBAAb,C;MAAa,0B;MACT,aAAY,WqBr4CmC,eAAc,UAAd,CrBq4CnC,C;;IqBr4ClB,eAAU,arBs4CD,aqBt4CC,C;IACG,oBAAqB,2CAArB,C;IAAoD,kBAArB,SAAU,QAAF,CAAE,CAAV,C;IrB8zCnC,oBAAM,eAAa,qCAAwB,EAAxB,CAAb,C;IAqEA,U;IAAA,+B;IAAb,OAAa,gBAAb,C;MAAa,0B;mBACT,a;MqBn4CL,WAAa,S;MACb,WAAW,yBAAU,UAAV,C;MrBk4CM,YAAZ,aAAY,EqBj4Cb,kBAAU,IAAV,EAAgB,IAAhB,CrBi4Ca,C;;IqBp4ClB,kBAAa,arBq4CJ,aqBr4CI,C;IAKG,qBtBsDwB,WsBtDxB,C;IAAwD,kBAArB,SAAU,QAAF,CAAE,CAAV,C;IrByzC1C,oBAAM,eAAa,qCAAwB,EAAxB,CAAb,C;IAqEA,W;IAAA,gC;IAAb,OAAa,iBAAb,C;MAAa,2B;oBACT,a;MqB93CiB,kBAArB,SAAU,UAAV,C;MrBwzCO,oBAAM,eAAa,qCAAwB,EAAxB,CAAb,C;MAqEA,W;MAAA,gC;MAAb,OAAa,iBAAb,C;QAAa,2B;QACT,aAAY,WqB93CW,4BAAa,UAAb,CrB83CX,C;;MAAA,aAAZ,aAAY,EACT,aADS,C;;IqB/3ClB,qBAAgB,crBg4CP,aqBh4CO,C;IAGH,sD;IAAmD,kBAArB,SAAU,QAAF,CAAE,CAAV,C;IrBszClC,oBAAM,eAAa,qCAAwB,EAAxB,CAAb,C;IAqEA,W;IAAA,gC;gBAAb,OAAa,iBAAb,C;MAAa,2B;oBACT,a;MAAgB,oB;;QqB33CrB,aAAa,S;QAEb,QAAM,MAAN,C;eACC,C;YAHD,mBAGa,iBAAS,4BAAa,UAAb,CAAT,EAAkC,yBAAU,UAAV,CAAlC,C;YAHb,qB;eAIC,E;YAJD,mBAIa,eAAO,4BAAa,UAAb,CAAP,EAAgC,yBAAU,UAAV,CAAhC,C;YAJb,qB;eAKC,E;YALD,mBAKa,gBAAQ,yBAAU,UAAV,CAAR,C;YALb,qB;eAMC,E;YAND,mBAMa,iBAAS,yBAAU,UAAV,CAAT,C;YANb,qB;eAOC,E;YAPD,6C;YAAA,qB;eAQC,E;YARD,8C;YAAA,qB;eASC,C;YATD,mBASa,kBAAU,yBAAU,UAAV,CAAV,EAAgC,+BAAgB,UAAhB,CAAhC,C;YATb,qB;eAUC,E;YAVD,mBAUa,mBAAW,yBAAU,UAAV,CAAX,EAAiC,+BAAgB,UAAhB,CAAjC,C;YAVb,qB;eAWC,E;YAXD,mBAWa,mBAAW,+BAAgB,UAAhB,CAAX,C;YAXb,qB;eAYC,E;YAZD,mBAYa,oBAAY,+BAAgB,UAAhB,CAAZ,C;YAZb,qB;eAaC,E;YAAuB,wB;YAAiC,kBAArB,SAAU,UAAV,C;YrBwyC5B,oBAAM,eAAa,qCAAwB,EAAxB,CAAb,C;YAqEA,W;YAAA,gC;YAAb,OAAa,iBAAb,C;cAAa,2B;cACT,aAAY,WqB92CgD,UrB82ChD,C;;;YqB33CjB,mBAaa,0BrB+2CL,aqB/2CK,C;YAbb,qB;kBAAA,mBAcS,UAAU,iBAAc,MAAxB,C;YAdT,qB;;;;MrB23CiB,aAAZ,aAAY,mB;;IqB53ClB,kBAAa,crB63CJ,aqB73CI,C;EAyBd,C;;;;;;ECpDmB,4C;IAApB,e;IAAqB,Y;IAAa,gB;IAAlC,iB;IAAA,uB;G;EAAA,gC;IAAA,mC;K;IACC,+DAAW,CAAX,8C;IACA,iDAAI,CAAJ,8C;IACA,qDAAM,CAAN,8C;IACA,2DAAS,CAAT,kD;IACA,2DAAS,CAAT,kD;IACA,iFAAoB,CAApB,+C;IACA,mFAAqB,CAArB,8C;IACA,mDAAK,CAAL,4C;IACA,qDAAM,CAAN,8C;IACA,qEAAc,EAAd,wD;IACA,wEAAe,EAAf,wD;IACA,4EAAiB,EAAjB,wD;IACA,8EAAkB,EAAlB,wD;IACA,oDAAK,EAAL,6C;IACA,wDAAO,EAAP,wD;IACA,0DAAQ,EAAR,wD;IACA,0DAAQ,EAAR,wD;IACA,gEAAW,EAAX,wD;IACA,gEAAW,EAAX,wD;IACA,kEAAY,EAAZ,wD;IACA,sEAAc,EAAd,wD;IACA,wEAAe,EAAf,wD;IACA,sEAAc,EAAd,wD;IACA,4EAAiB,EAAjB,wD;IACA,oEAAa,EAAb,qD;IACA,4DAAS,EAAT,8C;IACA,4DAAS,EAAT,8C;IACA,4DAAS,EAAT,8C;IACA,0DAAQ,EAAR,8C;IACA,4DAAS,EAAT,8C;IACA,sEAAc,EAAd,8C;IACA,8DAAU,EAAV,8C;IACA,4DAAS,EAAT,4C;IACA,8DAAU,EAAV,4C;IACA,4DAAS,EAAT,8C;IACA,8DAAU,EAAV,8C;IACA,0DAAQ,EAAR,8C;IACA,kDAAI,EAAJ,8C;IACA,kDAAI,EAAJ,8C;IACA,oDAAK,EAAL,8C;IACA,gEAAW,EAAX,+C;IACA,0DAAQ,EAAR,4C;IACA,4DAAS,EAAT,6C;IACA,gEAAW,EAAX,+C;IACA,8DAAU,EAAV,8C;IACA,sEAAc,EAAd,kD;IACA,4DAAS,EAAT,+C;IACA,kEAAY,EAAZ,8C;IACA,4DAAS,EAAT,8C;IACA,kEAAY,EAAZ,oD;IACA,oDAAK,EAAL,4C;IACA,8DAAU,EAAV,4C;IACA,gEAAW,EAAX,+C;IACA,gEAAW,EAAX,+C;IACA,8DAAU,EAAV,qD;IACA,oEAAa,EAAb,qD;IACA,gEAAW,EAAX,8C;IACA,kEAAY,EAAZ,8C;IACA,wEAAe,EAAf,4C;IACA,sEAAc,EAAd,qD;IACA,kEAAY,EAAZ,8C;IACA,kEAAY,EAAZ,qD;IACA,sEAAc,EAAd,8C;IACA,sEAAc,EAAd,qD;IACA,oEAAa,EAAb,qD;IACA,8DAAU,EAAV,4C;IACA,8DAAU,EAAV,4C;IACA,4DAAS,EAAT,4C;IACA,sEAAc,EAAd,8C;IACA,4DAAS,EAAT,iD;IACA,wEAAe,EAAf,kD;IACA,4DAAS,EAAT,iD;IACA,oFAAqB,EAArB,kD;IACA,wEAAe,EAAf,kD;IACA,wEAAe,EAAf,kD;IACA,oEAAa,EAAb,kD;IACA,0DAAQ,EAAR,kD;IACA,wDAAO,EAAP,kD;IACA,kEAAY,EAAZ,kD;IACA,4DAAS,EAAT,4C;IACA,4DAAS,EAAT,4C;IACA,wEAAe,GAAf,8C;IACA,wEAAe,GAAf,4C;IACA,kEAAY,GAAZ,kD;IACA,0EAAgB,GAAhB,8C;IACA,oEAAa,GAAb,kD;IACA,0EAAgB,GAAhB,8C;IACA,wEAAe,GAAf,kD;IACA,gFAAmB,GAAnB,8C;IACA,0DAAQ,GAAR,4C;IACA,0DAAQ,GAAR,4C;IACA,sEAAc,GAAd,4C;IACA,sEAAc,GAAd,4C;IACA,sEAAc,GAAd,8C;IACA,gEAAW,GAAX,8C;IACA,gEAAW,GAAX,8C;IACA,gEAAW,GAAX,8C;IACA,kEAAY,GAAZ,8C;IACA,sEAAc,GAAd,8C;IACA,wEAAe,GAAf,8C;IACA,uEAAc,GAAd,8C;IACA,mEAAY,GAAZ,8C;IACA,yDAAO,GAAP,kD;IACA,uEAAc,GAAd,8C;IACA,+DAAU,GAAV,8C;IACA,+DAAU,GAAV,8C;IACA,qEAAa,GAAb,8C;IACA,qEAAa,GAAb,8C;IACA,yDAAO,GAAP,kD;IACA,iEAAW,GAAX,8C;IACA,iEAAW,GAAX,8C;IACA,qEAAa,GAAb,8C;IACA,yDAAO,GAAP,8C;IACA,+DAAU,GAAV,8C;IACA,6DAAS,GAAT,4C;IACA,+DAAU,GAAV,8C;IACA,6DAAS,GAAT,4C;IACA,yDAAO,GAAP,8C;IACA,mDAAI,GAAJ,8C;IACA,yDAAO,GAAP,8C;IACA,yDAAO,GAAP,8C;IACA,+DAAU,GAAV,8C;IACA,mDAAI,GAAJ,8C;IACA,6DAAS,GAAT,8C;IACA,6DAAS,GAAT,8C;IACA,yDAAO,GAAP,8C;IACA,yDAAO,GAAP,8C;IACA,+DAAU,GAAV,8C;IACA,iEAAW,GAAX,8C;IACA,iFAAmB,GAAnB,8C;IACA,yDAAO,GAAP,8C;IACA,uDAAM,GAAN,8C;IACA,yDAAO,GAAP,8C;IACA,yDAAO,GAAP,8C;IACA,qEAAa,GAAb,8C;IACA,6DAAS,GAAT,8C;IACA,iEAAW,GAAX,8C;IACA,mEAAY,GAAZ,8C;IACA,uEAAc,GAAd,8C;IACA,iEAAW,GAAX,8C;IACA,yDAAO,GAAP,kD;IACA,iEAAW,GAAX,8C;IACA,iDAAG,GAAH,8C;IACA,qEAAa,GAAb,8C;IACA,qEAAa,GAAb,8C;IACA,mEAAY,GAAZ,4C;IACA,mEAAY,GAAZ,4C;IACA,+DAAU,GAAV,8C;IACA,yDAAO,GAAP,8C;IACA,mEAAY,GAAZ,8C;IACA,mEAAY,GAAZ,8C;IACA,+DAAU,GAAV,8C;IACA,+DAAU,GAAV,8C;IACA,+DAAU,GAAV,8C;IACA,+DAAU,GAAV,8C;IACA,+DAAU,GAAV,8C;IACA,+DAAU,GAAV,8C;IACA,+DAAU,GAAV,8C;IACA,+DAAU,GAAV,8C;IACA,uDAAM,GAAN,wD;IACA,+DAAU,GAAV,4C;IACA,+DAAU,GAAV,+C;IACA,yEAAe,GAAf,8C;IACA,2DAAQ,EAAR,8C;IACA,6DAAS,EAAT,8C;IACA,yDAAO,EAAP,8C;IACA,6DAAS,EAAT,8C;IACA,+DAAU,EAAV,8C;IACA,2DAAQ,EAAR,8C;IACA,6DAAS,EAAT,8C;IACA,yDAAO,EAAP,8C;IACA,6DAAS,EAAT,8C;IACA,+DAAU,EAAV,8C;IACA,uDAAM,EAAN,8C;IACA,uDAAM,EAAN,8C;IACA,yDAAO,EAAP,8C;IAoEA,iC;G;;EAnPA,4C;IAAA,sB;IAAA,oC;G;;EACA,qC;IAAA,sB;IAAA,6B;G;;EACA,uC;IAAA,sB;IAAA,+B;G;;EACA,0C;IAAA,sB;IAAA,kC;G;;EACA,0C;IAAA,sB;IAAA,kC;G;;EACA,qD;IAAA,sB;IAAA,6C;G;;EACA,sD;IAAA,sB;IAAA,8C;G;;EACA,sC;IAAA,sB;IAAA,8B;G;;EACA,uC;IAAA,sB;IAAA,+B;G;;EACA,+C;IAAA,sB;IAAA,uC;G;;EACA,gD;IAAA,sB;IAAA,wC;G;;EACA,kD;IAAA,sB;IAAA,0C;G;;EACA,mD;IAAA,sB;IAAA,2C;G;;EACA,sC;IAAA,sB;IAAA,8B;G;;EACA,wC;IAAA,sB;IAAA,gC;G;;EACA,yC;IAAA,sB;IAAA,iC;G;;EACA,yC;IAAA,sB;IAAA,iC;G;;EACA,4C;IAAA,sB;IAAA,oC;G;;EACA,4C;IAAA,sB;IAAA,oC;G;;EACA,6C;IAAA,sB;IAAA,qC;G;;EACA,+C;IAAA,sB;IAAA,uC;G;;EACA,gD;IAAA,sB;IAAA,wC;G;;EACA,+C;IAAA,sB;IAAA,uC;G;;EACA,kD;IAAA,sB;IAAA,0C;G;;EACA,8C;IAAA,sB;IAAA,sC;G;;EACA,0C;IAAA,sB;IAAA,kC;G;;EACA,0C;IAAA,sB;IAAA,kC;G;;EACA,0C;IAAA,sB;IAAA,kC;G;;EACA,yC;IAAA,sB;IAAA,iC;G;;EACA,0C;IAAA,sB;IAAA,kC;G;;EACA,+C;IAAA,sB;IAAA,uC;G;;EACA,2C;IAAA,sB;IAAA,mC;G;;EACA,0C;IAAA,sB;IAAA,kC;G;;EACA,2C;IAAA,sB;IAAA,mC;G;;EACA,0C;IAAA,sB;IAAA,kC;G;;EACA,2C;IAAA,sB;IAAA,mC;G;;EACA,yC;IAAA,sB;IAAA,iC;G;;EACA,qC;IAAA,sB;IAAA,6B;G;;EACA,qC;IAAA,sB;IAAA,6B;G;;EACA,sC;IAAA,sB;IAAA,8B;G;;EACA,4C;IAAA,sB;IAAA,oC;G;;EACA,yC;IAAA,sB;IAAA,iC;G;;EACA,0C;IAAA,sB;IAAA,kC;G;;EACA,4C;IAAA,sB;IAAA,oC;G;;EACA,2C;IAAA,sB;IAAA,mC;G;;EACA,+C;IAAA,sB;IAAA,uC;G;;EACA,0C;IAAA,sB;IAAA,kC;G;;EACA,6C;IAAA,sB;IAAA,qC;G;;EACA,0C;IAAA,sB;IAAA,kC;G;;EACA,6C;IAAA,sB;IAAA,qC;G;;EACA,sC;IAAA,sB;IAAA,8B;G;;EACA,2C;IAAA,sB;IAAA,mC;G;;EACA,4C;IAAA,sB;IAAA,oC;G;;EACA,4C;IAAA,sB;IAAA,oC;G;;EACA,2C;IAAA,sB;IAAA,mC;G;;EACA,8C;IAAA,sB;IAAA,sC;G;;EACA,4C;IAAA,sB;IAAA,oC;G;;EACA,6C;IAAA,sB;IAAA,qC;G;;EACA,gD;IAAA,sB;IAAA,wC;G;;EACA,+C;IAAA,sB;IAAA,uC;G;;EACA,6C;IAAA,sB;IAAA,qC;G;;EACA,6C;IAAA,sB;IAAA,qC;G;;EACA,+C;IAAA,sB;IAAA,uC;G;;EACA,+C;IAAA,sB;IAAA,uC;G;;EACA,8C;IAAA,sB;IAAA,sC;G;;EACA,2C;IAAA,sB;IAAA,mC;G;;EACA,2C;IAAA,sB;IAAA,mC;G;;EACA,0C;IAAA,sB;IAAA,kC;G;;EACA,+C;IAAA,sB;IAAA,uC;G;;EACA,0C;IAAA,sB;IAAA,kC;G;;EACA,gD;IAAA,sB;IAAA,wC;G;;EACA,0C;IAAA,sB;IAAA,kC;G;;EACA,sD;IAAA,sB;IAAA,8C;G;;EACA,gD;IAAA,sB;IAAA,wC;G;;EACA,gD;IAAA,sB;IAAA,wC;G;;EACA,8C;IAAA,sB;IAAA,sC;G;;EACA,yC;IAAA,sB;IAAA,iC;G;;EACA,wC;IAAA,sB;IAAA,gC;G;;EACA,6C;IAAA,sB;IAAA,qC;G;;EACA,0C;IAAA,sB;IAAA,kC;G;;EACA,0C;IAAA,sB;IAAA,kC;G;;EACA,gD;IAAA,sB;IAAA,wC;G;;EACA,gD;IAAA,sB;IAAA,wC;G;;EACA,6C;IAAA,sB;IAAA,qC;G;;EACA,iD;IAAA,sB;IAAA,yC;G;;EACA,8C;IAAA,sB;IAAA,sC;G;;EACA,iD;IAAA,sB;IAAA,yC;G;;EACA,gD;IAAA,sB;IAAA,wC;G;;EACA,oD;IAAA,sB;IAAA,4C;G;;EACA,yC;IAAA,sB;IAAA,iC;G;;EACA,yC;IAAA,sB;IAAA,iC;G;;EACA,+C;IAAA,sB;IAAA,uC;G;;EACA,+C;IAAA,sB;IAAA,uC;G;;EACA,+C;IAAA,sB;IAAA,uC;G;;EACA,4C;IAAA,sB;IAAA,oC;G;;EACA,4C;IAAA,sB;IAAA,oC;G;;EACA,4C;IAAA,sB;IAAA,oC;G;;EACA,6C;IAAA,sB;IAAA,qC;G;;EACA,+C;IAAA,sB;IAAA,uC;G;;EACA,gD;IAAA,sB;IAAA,wC;G;;EACA,+C;IAAA,sB;IAAA,uC;G;;EACA,6C;IAAA,sB;IAAA,qC;G;;EACA,wC;IAAA,sB;IAAA,gC;G;;EACA,+C;IAAA,sB;IAAA,uC;G;;EACA,2C;IAAA,sB;IAAA,mC;G;;EACA,2C;IAAA,sB;IAAA,mC;G;;EACA,8C;IAAA,sB;IAAA,sC;G;;EACA,8C;IAAA,sB;IAAA,sC;G;;EACA,wC;IAAA,sB;IAAA,gC;G;;EACA,4C;IAAA,sB;IAAA,oC;G;;EACA,4C;IAAA,sB;IAAA,oC;G;;EACA,8C;IAAA,sB;IAAA,sC;G;;EACA,wC;IAAA,sB;IAAA,gC;G;;EACA,2C;IAAA,sB;IAAA,mC;G;;EACA,0C;IAAA,sB;IAAA,kC;G;;EACA,2C;IAAA,sB;IAAA,mC;G;;EACA,0C;IAAA,sB;IAAA,kC;G;;EACA,wC;IAAA,sB;IAAA,gC;G;;EACA,qC;IAAA,sB;IAAA,6B;G;;EACA,wC;IAAA,sB;IAAA,gC;G;;EACA,wC;IAAA,sB;IAAA,gC;G;;EACA,2C;IAAA,sB;IAAA,mC;G;;EACA,qC;IAAA,sB;IAAA,6B;G;;EACA,0C;IAAA,sB;IAAA,kC;G;;EACA,0C;IAAA,sB;IAAA,kC;G;;EACA,wC;IAAA,sB;IAAA,gC;G;;EACA,wC;IAAA,sB;IAAA,gC;G;;EACA,2C;IAAA,sB;IAAA,mC;G;;EACA,4C;IAAA,sB;IAAA,oC;G;;EACA,oD;IAAA,sB;IAAA,4C;G;;EACA,wC;IAAA,sB;IAAA,gC;G;;EACA,uC;IAAA,sB;IAAA,+B;G;;EACA,wC;IAAA,sB;IAAA,gC;G;;EACA,wC;IAAA,sB;IAAA,gC;G;;EACA,8C;IAAA,sB;IAAA,sC;G;;EACA,0C;IAAA,sB;IAAA,kC;G;;EACA,4C;IAAA,sB;IAAA,oC;G;;EACA,6C;IAAA,sB;IAAA,qC;G;;EACA,+C;IAAA,sB;IAAA,uC;G;;EACA,4C;IAAA,sB;IAAA,oC;G;;EACA,wC;IAAA,sB;IAAA,gC;G;;EACA,4C;IAAA,sB;IAAA,oC;G;;EACA,oC;IAAA,sB;IAAA,4B;G;;EACA,8C;IAAA,sB;IAAA,sC;G;;EACA,8C;IAAA,sB;IAAA,sC;G;;EACA,6C;IAAA,sB;IAAA,qC;G;;EACA,6C;IAAA,sB;IAAA,qC;G;;EACA,2C;IAAA,sB;IAAA,mC;G;;EACA,wC;IAAA,sB;IAAA,gC;G;;EACA,6C;IAAA,sB;IAAA,qC;G;;EACA,6C;IAAA,sB;IAAA,qC;G;;EACA,2C;IAAA,sB;IAAA,mC;G;;EACA,2C;IAAA,sB;IAAA,mC;G;;EACA,2C;IAAA,sB;IAAA,mC;G;;EACA,2C;IAAA,sB;IAAA,mC;G;;EACA,2C;IAAA,sB;IAAA,mC;G;;EACA,2C;IAAA,sB;IAAA,mC;G;;EACA,2C;IAAA,sB;IAAA,mC;G;;EACA,2C;IAAA,sB;IAAA,mC;G;;EACA,uC;IAAA,sB;IAAA,+B;G;;EACA,2C;IAAA,sB;IAAA,mC;G;;EACA,2C;IAAA,sB;IAAA,mC;G;;EACA,gD;IAAA,sB;IAAA,wC;G;;EACA,yC;IAAA,sB;IAAA,iC;G;;EACA,0C;IAAA,sB;IAAA,kC;G;;EACA,wC;IAAA,sB;IAAA,gC;G;;EACA,0C;IAAA,sB;IAAA,kC;G;;EACA,2C;IAAA,sB;IAAA,mC;G;;EACA,yC;IAAA,sB;IAAA,iC;G;;EACA,0C;IAAA,sB;IAAA,kC;G;;EACA,wC;IAAA,sB;IAAA,gC;G;;EACA,0C;IAAA,sB;IAAA,kC;G;;EACA,2C;IAAA,sB;IAAA,mC;G;;EACA,uC;IAAA,sB;IAAA,+B;G;;EACA,uC;IAAA,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yC,MCqvShC,WDrvSgC,C;G;;;;;;;EAD1C,2C;IAAA,sB;IAAA,0C;MAAA,yB;KAAA,mC;G;;;;;;EApPD,4B;IAAA,8nM;G;;EAAA,iC;IAAA,a;MAAA,kB;QAAA,yC;MAAA,W;QAAA,kC;MAAA,a;QAAA,oC;MAAA,gB;QAAA,uC;MAAA,gB;QAAA,uC;MAAA,2B;QAAA,kD;MAAA,4B;QAAA,mD;MAAA,Y;QAAA,mC;MAAA,a;QAAA,oC;MAAA,qB;QAAA,4C;MAAA,sB;QAAA,6C;MAAA,wB;QAAA,+C;MAAA,yB;QAAA,gD;MAAA,Y;QAAA,mC;MAAA,c;QAAA,qC;MAAA,e;QAAA,sC;MAAA,e;QAAA,sC;MAAA,kB;QAAA,yC;MAAA,kB;QAAA,yC;MAAA,mB;QAAA,0C;MAAA,qB;QAAA,4C;MAAA,sB;QAAA,6C;MAAA,qB;QAAA,4C;MAAA,wB;QAAA,+C;MAAA,oB;QAAA,2C;MAAA,gB;QAAA,uC;MAAA,gB;QAAA,uC;MAAA,gB;QAAA,uC;MAAA,e;QAAA,sC;MAAA,gB;QAAA,uC;MAAA,qB;QAAA,4C;MAAA,iB;QAAA,wC;MAAA,gB;QAAA,uC;MAAA,iB;QAAA,wC;MAAA,gB;QAAA,uC;MAAA,iB;QAAA,wC;MAAA,e;QAAA,sC;MAAA,W;QAAA,kC;MAAA,W;QAAA,kC;MAAA,Y;QAAA,mC;MAAA,kB;QAAA,yC;MAAA,e;QAAA,sC;MAAA,gB;QAAA,uC;MAAA,kB;QAAA,yC;MAAA,iB;QAAA,wC;MAAA,qB;QAAA,4C;MAAA,gB;QAAA,uC;MAAA,mB;QAAA,0C;MAAA,gB;QAAA,uC;MAAA,mB;QAAA,0C;MAAA,Y;QAAA,mC;MAAA,iB;QAAA,wC;MAAA,kB;QAAA,yC;MAAA,kB;QAAA,yC;MAAA,iB;QAAA,wC;MAAA,oB;QAAA,2C;MAAA,kB;QAAA,yC;MAAA,mB;QAAA,0C;MAAA,sB;QAAA,6C;MAAA,qB;QAAA,4C;MAAA,mB;QAAA,0C;MAAA,mB;QAAA,0C;MAAA,qB;QAAA,4C;MAAA,qB;QAAA,4C;MAAA,oB;QAAA,2C;MAAA,iB;QAAA,wC;MAAA,iB;QAAA,wC;MAAA,gB;QAAA,uC;MAAA,qB;QAAA,4C;MAAA,gB;QAAA,uC;MAAA,sB;QAAA,6C;MAAA,gB;QAAA,uC;MAAA,4B;QAAA,mD;MAAA,sB;QAAA,6C;MAAA,sB;QAAA,6C;MAAA,oB;QAAA,2C;MAAA,e;QAAA,sC;MAAA,c;QAAA,qC;MAAA,mB;QAAA,0C;MAAA,gB;QAAA,uC;MAAA,gB;QAAA,uC;MAAA,sB;QAAA,6C;MAAA,sB;QAAA,6C;MAAA,mB;QAAA,0C;MAAA,uB;QAAA,8C;MAAA,oB;QAAA,2C;MAAA,uB;QAAA,8C;MAAA,sB;QAAA,6C;MAAA,0B;QAAA,iD;MAAA,e;QAAA,sC;MAAA,e;QAAA,sC;MAAA,qB;QAAA,4C;MAAA,qB;QAAA,4C;MAAA,qB;QAAA,4C;MAAA,kB;QAAA,yC;MAAA,kB;QAAA,yC;MAAA,kB;QAAA,yC;MAAA,mB;QAAA,0C;MAAA,qB;QAAA,4C;MAAA,sB;QAAA,6C;MAAA,qB;QAAA,4C;MAAA,mB;QAAA,0C;MAAA,c;QAAA,qC;MAAA,qB;QAAA,4C;MAAA,iB;QAAA,wC;MAAA,iB;QAAA,wC;MAAA,oB;QAAA,2C;MAAA,oB;QAAA,2C;MAAA,c;QAAA,qC;MAAA,kB;QAAA,yC;MAAA,kB;QAAA,yC;MAAA,oB;QAAA,2C;MAAA,c;QAAA,qC;MAAA,iB;QAAA,wC;MAAA,gB;QAAA,uC;MAAA,iB;QAAA,wC;MAAA,gB;QAAA,uC;MAAA,c;QAAA,qC;MAAA,W;QAAA,kC;MAAA,c;QAAA,qC;MAAA,c;QAAA,qC;MAAA,iB;QAAA,wC;MAAA,W;QAAA,kC;MAAA,gB;QAAA,uC;MAAA,gB;QAAA,uC;MAAA,c;QAAA,qC;MAAA,c;QAAA,qC;MAAA,iB;QAAA,wC;MAAA,kB;QAAA,yC;MAAA,0B;QAAA,iD;MAAA,c;QAAA,qC;MAAA,a;QAAA,oC;MAAA,c;QAAA,qC;MAAA,c;QAAA,qC;MAAA,oB;QAAA,2C;MAAA,gB;QAAA,uC;MAAA,kB;QAAA,yC;MAAA,mB;QAAA,0C;MAAA,qB;QAAA,4C;MAAA,kB;QAAA,yC;MAAA,c;QAAA,qC;MAAA,kB;QAAA,yC;MAAA,U;QAAA,iC;MAAA,oB;QAAA,2C;MAAA,oB;QAAA,2C;MA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xQnC,SyBwQ+D,oB;IAA5B,OzBvQ5B,S;G;0CyBwQV,Y;IAAqF,gBAA7B,gC;IzBzQrD,SyByQ0F,oB;IAArC,OzBxQ9C,S;G;wCyByQV,uB;IAAc,2B;MAAA,cAAsB,I;IAAwC,gBAAtB,aAAS,WAAT,C;IzB1QnD,SyB0QiF,oB;IAA9B,OzBzQ5C,S;G;iDyB0QV,8B;IAAuB,qB;MAAA,QAAa,C;IAAG,2B;MAAA,cAAsB,I;IAC7B,gBAA/B,sBAAkB,WAAlB,C;IzB5QE,SyB4QqC,2B;IAAvC,OzB3QS,S;G;qDyB6QV,mB;IAA+E,gBAApC,+BAA2B,OAA3B,C;IzB9QxC,SyB8QoF,oB;IAA5C,OzB7QjC,S;G;mDyB8QV,mB;IACmC,gBAAlC,6BAAyB,OAAzB,C;IzBhRE,SyBgRwC,oB;IAA1C,OzB/QS,S;G;oDyBiRV,6C;IAAqE,qB;MAAA,QAAa,C;IAC3B,gBAAtD,8BAA0B,MAA1B,EAAkC,QAAlC,EAA4C,QAA5C,C;IzBnRE,SyBmR4D,2B;IAA9D,OzBlRS,S;G;4CyBoRV,iB;IAAkB,qB;MAAA,QAAa,C;IAAkC,gBAAf,kB;IzBrR/C,SyBqRsE,2B;IAAvB,OzBpRxC,S;G;4CyBqRV,iB;IAAkB,qB;MAAA,QAAa,C;IAAkC,gBAAf,kB;IzBtR/C,SyBsRsE,2B;IAAvB,OzBrRxC,S;G;6CyBsRV,iB;IAAmB,qB;MAAA,QAAa,C;IAAoC,gBAAhB,mB;IzBvRjD,SyBuRyE,2B;IAAxB,OzBtR1C,S;G;+CyBwRV,iB;IAAqB,qB;MAAA,QAAa,C;IACjC,IAAI,mBAAa,CAAjB,C;MACC,OAAO,I;;MAEP,qC;MACyB,gBAAlB,qB;MzB9RN,SyB8RgC,2B;MAAjC,OzB7RQ,S;;EyB+RV,C;2CAEA,Y;IAAwE,gBAAtB,yB;IzBlS/C,SyBkS6E,oB;IAA9B,OzBjSxC,S;G;iCyBkSV,Y;IACC,eAAe,c;IACf,aAAa,8BAAiB,gBAAO,QAAP,C;IAC9B,MAAO,eAAM,IAAN,C;IACP,OAAO,M;EACR,C;6CAEA,yD;IAGC,8B;MAAA,iBAAiC,I;IACjC,qB;MAAA,QAAa,C;IAEb,IAAI,mBAAa,CAAjB,C;MACC,OAAO,I;;MAEP,qC;MACuB,gBAAhB,mB;MzBpTN,SyBoT8B,mE;MAA/B,OzBnTQ,S;;EyBqTV,C;6CAEA,kC;IACiB,gBAAhB,mB;IzBzTE,SyByTsB,4C;IAAxB,OzBxTS,S;G;qCyB0TV,Y;IAAsC,0BAAc,IAAd,C;G;mCACtC,Y;IAAkC,wBAAY,IAAZ,C;G;gDAClC,qB;IACoB,gBAAnB,sB;IzB9TE,SyB8TyB,+B;IAA3B,OzB7TS,S;G;2CyB+TV,iB;IAAiB,qB;MAAA,QAAa,C;IAAgC,gBAAd,iB;IzBhU7C,SyBgUmE,2B;IAAtB,OzB/TtC,S;G;gDyBgUV,iB;IAAsB,qB;MAAA,QAAa,C;IAA0C,gBAAnB,sB;IzBjUvD,SyBiUkF,2B;IAA3B,OzBhUhD,S;G;iDyBiUV,iB;IAAuB,qB;MAAA,QAAa,C;IAA4C,gBAApB,uB;IzBlUzD,SyBkUqF,2B;IAA5B,OzBjUlD,S;G;iDyBkUV,iB;IAAuB,qB;MAAA,QAAa,C;IAAyB,gBAApB,uB;IzBnUtC,SyBmUkE,2B;IAA5B,OzBlU/B,S;G;iDyBmUV,iB;IAAuB,qB;MAAA,QAAa,C;IAAyB,gBAApB,uB;IzBpUtC,SyBoUkE,2B;IAA5B,OzBnU/B,S;G;kDyBoUV,iB;IAAwB,qB;MAAA,QAAa,C;IACf,gBAArB,wB;IzBtUE,SyBsU2B,2B;IAA7B,OzBrUS,S;G;gDyBuUV,iB;IAAsB,qB;MAAA,QAAa,C;IAAwB,gBAAnB,sB;IzBxUrC,SyBwUgE,2B;IAA3B,OzBvU9B,S;G;qDyBwUV,iB;IAA2B,qB;MAAA,QAAa,C;IAA6B,gBAAxB,2B;IzBzU1C,SyByU0E,2B;IAAhC,OzBxUnC,S;G;8CyByUV,Y;IAAiF,gBAAzB,4B;IzB1UrD,SyB0UsF,oB;IAAjC,OzBzU9C,S;G;uCyB0UV,Y;IACC,UAAe,a;IACf,aAAuB,I;IACvB,iBAAsB,c;IACtB,IAAI,eAAc,CAAlB,C;MACC,mBAA4B,cAAc,GAAlB,GAAwB,eAAxB,GAAwC,C;MAChE,SAAS,8BAAiB,gBAAO,UAAP,EAAmB,YAAnB,EAAiC,GAAjC,C;MAC1B,MAAO,eAAM,IAAN,C;KAER,OA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;G;;EAAW,wD;IAAA,sC;IAAA,gD;G;EAEX,+C;IAAA,mD;IACsB,gBAAT,kC;IPujSH,kBAAM,eAAa,gBAAb,C;IA6UA,Q;IAAb,iD;MAAa,WAAb,e;MACI,WAAY,WOr4SS,GPq4SK,IOr4SF,GAAH,EPq4SK,IOr4SL,CPq4ST,C;;IOr4SlB,aAAyC,MPs4ShC,WOt4SgC,C;G;8DACzC,iB;IAA+B,Q;IAAA,oCAAM,KAAN,oBAAgB,8C;G;;;;;;;EAFhD,2D;IAAA,sC;IAAA,0D;MAAA,yC;KAAA,mD;G;;;;;;EAHD,4C;IAAA,uG;G;;EAAA,iD;IAAA,a;MAAA,c;QAAA,qD;MAAA,c;QAAA,qD;MAAA,QAAA,sF;;G;;EAS6B,+C;IAA7B,e;IAA8B,Y;IAA9B,iB;IAAA,uB;G;EAAA,yC;IAAA,4C;K;IACC,mEAAI,CAAJ,C;IAAQ,2EAAQ,CAAR,C;IAAY,yEAAO,CAAP,C;IAEpB,0C;G;;EAFA,8C;IAAA,+B;IAAA,sC;G;;EAAQ,kD;IAAA,+B;IAAA,0C;G;;EAAY,iD;IAAA,+B;IAAA,yC;G;EAEpB,wC;IAAA,4C;IACsB,gBAAT,2B;IP8iSH,kBAAM,eAAa,gBAAb,C;IA6UA,Q;IAAb,iD;MAAa,WAAb,e;MACI,WAAY,WO53SS,GP43SK,IO53SF,GAAH,EP43SK,IO53SL,CP43ST,C;;IO53SlB,aAAyC,MP63ShC,WO73SgC,C;G;uDACzC,iB;IAA+B,Q;IAAA,oCAAM,KAAN,oBAAgB,oC;G;;;;;;;EAFhD,oD;IAAA,+B;IAAA,mD;MAAA,kC;KAAA,4C;G;;;;;;EAHD,qC;IAAA,gI;G;;EAAA,0C;IAAA,a;MAAA,W;QAAA,2C;MAAA,e;QAAA,+C;MAAA,c;QAAA,8C;MAAA,QAAA,+E;;G;;EASoB,sC;IAApB,e;IAAqB,Y;IAArB,iB;IAAA,uB;G;EAAA,gC;IAAA,mC;K;IACC,mDAAK,CAAL,C;IAAS,+DAAW,CAAX,C;IAAe,2DAAS,CAAT,C;IAAa,uDAAO,CAAP,C;IAErC,iC;G;;EAFA,sC;IAAA,sB;IAAA,8B;G;;EAAS,4C;IAAA,sB;IAAA,oC;G;;EAAe,0C;IAAA,sB;IAAA,kC;G;;EAAa,wC;IAAA,sB;IAAA,gC;G;EAErC,+B;IAAA,mC;IACsB,gBAAT,kB;IPqiSH,kBAAM,eAAa,gBAAb,C;IA6UA,Q;IAAb,iD;MAAa,WAAb,e;MACI,WAAY,WOn3SS,GPm3SK,IOn3SF,GAAH,EPm3SK,IOn3SL,CPm3ST,C;;IOn3SlB,aAAyC,MPo3ShC,WOp3SgC,C;G;8CACzC,iB;IAA+B,Q;IAAA,oCAAM,KAAN,oBAAgB,8B;G;;;;;;;EAFhD,2C;IAAA,sB;IAAA,0C;MAAA,yB;KAAA,mC;G;;;;;;EAHD,4B;IAAA,2I;G;;EAAA,iC;IAAA,a;MAAA,Y;QAAA,mC;MAAA,kB;QAAA,yC;MAAA,gB;QAAA,uC;MAAA,c;QAAA,qC;MAAA,QAAA,sE;;G;;EASwB,0C;IAAxB,e;IAAyB,Y;IAAzB,iB;IAAA,uB;G;EAAA,oC;IAAA,uC;K;IACC,6DAAM,CAAN,C;IAAU,uDAAG,CAAH,C;IAAO,+DAAO,CAAP,C;IAEjB,qC;G;;EAFA,2C;IAAA,0B;IAAA,mC;G;;EAAU,wC;IAAA,0B;IAAA,gC;G;;EAAO,4C;IAAA,0B;IAAA,oC;G;EAEjB,mC;IAAA,uC;IACsB,gBAAT,sB;IP4hSH,kBAAM,eAAa,gBAAb,C;IA6UA,Q;IAAb,iD;MAAa,WAAb,e;MACI,WAAY,WO12SS,GP02SK,IO12SF,GAAH,EP02SK,IO12SL,CP02ST,C;;IO12SlB,aAAyC,MP22ShC,WO32SgC,C;G;kDACzC,iB;IAA+B,Q;IAAA,oCAAM,KAAN,qD;G;;;;;;;EAFhC,+C;IAAA,0B;IAAA,8C;MAAA,6B;KAAA,uC;G;;;;;;EAHD,gC;IAAA,8G;G;;EAAA,qC;IAAA,a;MAAA,a;QAAA,wC;MAAA,U;QAAA,qC;MAAA,c;QAAA,yC;MAAA,QAAA,0E;;G;;EASA,0B;IAAA,8B;IACC,aAAkB,C;IAClB,aAAkB,C;IAClB,aAAkB,C;G;8CAElB,0B;IAAoC,QAAM,cAAN,C;WACnC,C;QADmC,OAC1B,O;WACT,C;QAFmC,OAE1B,O;WACT,C;QAHmC,OAG1B,O;cAH0B,OAI3B,M;;G;;;;;;;EATV,sC;IAAA,qC;MAAA,oB;KAAA,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,wB;MAAW,gDAAiB,6B;MAA/C,UAAW,uH;MACX,IAAI,WAAJ,C;QACI,QAAQ,oB;QASK,kB;QAAT,oBAAS,2CAAiB,6BAA1B,EAAgC,UARR,CAQQ,6DAAhC,C;QAPJ,yBAAO,C;QAAP,2B;OAEJ,yBAAO,G;;;;G;E6BwDH,uC;IAAC,oB;IAChB,YAAoB,I;IACpB,c3CqBmD,kB;I2CpBnD,e3CoBmD,kB;G;;;E2CjBlD,kC;IAAA,sC;G;;;;;;;EAAA,8C;IAAA,6C;MAAA,4B;KAAA,sC;G;EACA,kC;IAAA,sC;G;;;;;;;EAAA,8C;IAAA,6C;MAAA,4B;KAAA,sC;G;EACU,wC;IAAC,oB;G;;;;;;EACI,8C;IAAC,sB;G;;;;;;;;;;;;SAGI,Y;MAAQ,uBAAU,C;K;;;SAClB,Y;MAAQ,OAAe,YAAf,qD;K;;;SACR,Y;MAAgB,gBAAR,Y;MAAQ,c;;Q1C27ClB,Q;QADhB,IAAI,wCAAsB,mBAA1B,C;UAAqC,aAAO,K;UAAP,e;SACrB,2B;QAAhB,OAAgB,cAAhB,C;UAAgB,yB;UAAM,I0C37CkB,c1C27CJ,O0C37CI,yB1C27ClB,C;YAAwB,aAAO,I;YAAP,e;;QAC9C,aAAO,K;;;M0C57CmB,iB;K;;;SACR,Y;MAAQ,uBAAW,Y;K;;8BAExC,Y;IAAmB,4B;IAAA,kD;IhCzChB,SAAK,WAAI,OAAJ,C;G;8BgC0CR,Y;IAAmB,4B;IAAA,kD;IhC1ChB,SAAK,WAAI,OAAJ,C;G;sCgC2CR,iB;IAA6B,4B;IAAA,cAAkB,iC;IhC3C5C,SAAK,WAAI,OAAJ,C;G;6CgC4CR,iB;IAAoC,wB;IAAa,W;G;6CACjD,iB;IAAoC,wB;IAAa,W;G;2CACjD,mB;IAAoC,4B;IAAA,cAAkB,wC;IhC9CnD,SAAK,WAAI,OAAJ,C;G;;;;;;EgCiDT,yB;IACC,c3CHmD,kB;G;;;;;;E2CMS,8B;IAAE,0B;EAAgB,C;;;EAA/E,oC;IAAA,0B;;M7B3F0C,gC;MAAX,wB;MAAW,oDAAiB,iC;MAA/C,UAAW,uH;MACX,IAAI,WAAJ,C;QACI,QAAQ,wB;QASK,kB;QAAT,oBAAS,+CAAiB,iCAA1B,EAAgC,UARR,CAQQ,6DAAhC,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"}